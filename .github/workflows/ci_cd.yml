# check spelling, codestyle
name: GitHub CI

# run only on main branch.  This avoids duplicated actions on PRs
on:
  workflow_dispatch:
  schedule: # UTC at 0300
    - cron: "0 3 * * *"
  pull_request:
  push:
    tags:
      - "*"
    branches:
      - main

env:
  MAIN_PYTHON_VERSION: '3.10'
  PACKAGE_NAME: 'pyconverter-xml2py'
  PACKAGE_NAMESPACE: 'pyconverter.xml2py'
  DOCUMENTATION_CNAME: 'pyconverter-xml2py.docs.pyansys.com'
  RESET_PIP_CACHE: 1
  RESET_AUTOSUMMARY_CACHE: 1
  RESET_DOC_BUILD_CACHE: 1
  ON_CI: true

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  code-style:
    name: "Code style"
    runs-on: ubuntu-latest
    steps:
      - name: PyAnsys code style checks
        uses: ansys/actions/code-style@v6
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}


  doc-style:
    name: "Documentation Style Check"
    runs-on: ubuntu-latest
    steps:
      - name: PyAnsys documentation style checks
        uses: ansys/actions/doc-style@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}


  smoke-tests:
    name: Build and Smoke tests (Linux)
    runs-on: ubuntu-latest
    needs: [code-style]
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']

    steps:
      - name: Build wheelhouse and perform smoke test
        uses: ansys/actions/build-wheelhouse@v6
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          library-namespace: ${{ env.PACKAGE_NAMESPACE }}
          operating-system: ${{ runner.os }}
          python-version: ${{ matrix.python-version }}


  smoke-tests-macos-windows:
    name: Build and Smoke tests (macOS and Windows)
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    runs-on: ${{ matrix.os }}
    needs: [code-style]
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']

    steps:
      - name: Build wheelhouse and perform smoke test
        uses: ansys/actions/build-wheelhouse@v6
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          library-namespace: ${{ env.PACKAGE_NAMESPACE }}
          operating-system: ${{ matrix.os }}
          python-version: ${{ matrix.python-version }}


  build-test:
    name: "Build and unit testing"
    runs-on: ubuntu-latest
    needs: [smoke-tests]

    steps:
      - name: "Install Git and checkout project"
        uses: actions/checkout@v4

      - name: "Setup Python"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: "Install os packages"
        run: |
          sudo apt update
          sudo apt-get install pandoc

      - name: "Cache pip"
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: Python-v${{ env.RESET_PIP_CACHE }}-${{ runner.os }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            Python-v${{ env.RESET_PIP_CACHE }}-${{ runner.os }}
    
      # The token will expire in 2024.
      - name: "Checkout mapdl-cmd-doc repository"
        uses: actions/checkout@v4
        with:
          repository: ansys-internal/mapdl-cmd-doc
          ref: feat/pyconverter-xml2py-predifined-format
          token: ${{ secrets.MAPDL_CMD_DOC_TOKEN }}
          path: mapdl-cmd-doc

      - name: "Unit testing requirements installation"  
        run: |
          python -m pip install .[tests]

      - name: "Unit testing"
        run: |
          pytest -v --durations=10 --maxfail=10 \
            --reruns 7 --reruns-delay 3 --ghdir ${{ github.workspace }}\
            --cov=pyconverter.xml2py --cov-report=xml:coverage.xml --cov-report=html\
            --cov-report term

      - name: "Upload coverage to Codecov"
        uses: codecov/codecov-action@v4
        with:
          name: coverage.xml
          flags: coverage

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage.xml
          path: ./coverage.xml


  doc-build:
    name: Documentation building
    runs-on: ubuntu-latest
    needs: [doc-style]
    steps:
      - name: "Install Git and checkout project"
        uses: actions/checkout@v4

      - name: "Setup Python"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: "Cache pip"
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: Python-pyconverter.xml2py-v${{ env.RESET_PIP_CACHE }}-${{ env.MAIN_PYTHON_VERSION }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            Python-pyconverter.xml2py-v${{ env.RESET_PIP_CACHE }}-${{ env.MAIN_PYTHON_VERSION }}
      
      - name: "Install pyconverter-xml2py"
        run: |
          pip install --upgrade pip
          pip install .[doc]
      
      - name: "Retrieve pyconverter.xml2py version"
        run: |
          echo "PYCONVERTER_VERSION=$(python -c 'from pyconverter.xml2py import __version__; print(__version__)')" >> $GITHUB_ENV
          echo "pyconverter.xml2py version is: $(python -c 'from pyconverter.xml2py import __version__; print(__version__)')"
    
      - name: "Cache docs build directory"
        uses: actions/cache@v4
        with:
          path: doc/_build
          key: doc-build-pyconverter-xml2py-v${{ env.RESET_DOC_BUILD_CACHE }}-${{ env.PYCONVERTER_VERSION }}-${{ github.sha }}
          restore-keys: |
            doc-build-pyconverter-xml2py-v${{ env.RESET_DOC_BUILD_CACHE }}-${{ env.PYCONVERTER_VERSION }}

      - name: "Cache autosummary"
        uses: actions/cache@v4
        with:
          path: doc/source/**/_autosummary/**/*.rst
          key: autosummary-pyconverter-xml2py-v${{ env.RESET_AUTOSUMMARY_CACHE }}-${{ env.PYCONVERTER_VERSION }}-${{ github.sha }}
          restore-keys: |
            autosummary-pyconverter-xml2py-v${{ env.RESET_AUTOSUMMARY_CACHE }}-${{ env.PYCONVERTER_VERSION }}

      - name: "Run Ansys documentation building action"
        uses: ansys/actions/doc-build@v6
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          checkout: false
          skip-install: true
          sphinxopts: -j auto
          dependencies: "graphviz"

  package:
    name: Package library
    runs-on: ubuntu-latest
    needs: [doc-build, build-test]
    steps:
      - name: Build library source and wheel artifacts
        uses: ansys/actions/build-library@v6
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          python-version: ${{ env.MAIN_PYTHON_VERSION }}


  doc-deploy-dev:
    name: "Deploy development documentation"
    # Deploy development only when merging to main
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [package]
    steps:
      - name: "Deploy the latest documentation"
        uses: ansys/actions/doc-deploy-dev@v6
        with:
            cname: ${{ env.DOCUMENTATION_CNAME }}
            token: ${{ secrets.GITHUB_TOKEN }}


  release:
    name: "Release project to public PyPI and GitHub"
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    needs:  [package, smoke-tests-macos-windows]
    runs-on: ubuntu-latest
    steps:
    - name: "Release to the public PyPI repository"
      uses: ansys/actions/release-pypi-public@v6
      with:
        library-name: ${{ env.PACKAGE_NAME }}
        twine-username: "__token__"
        twine-token: ${{ secrets.PYPI_TOKEN }}

    - name: "Release to GitHub"
      uses: ansys/actions/release-github@v6
      with:
        library-name: ${{ env.PACKAGE_NAME }}


  doc-deploy-stable:
    name: "Deploy stable documentation"
    # Deploy release documentation when creating a new tag
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    needs: [release]
    steps:
      - name: "Deploy the stable documentation"
        uses: ansys/actions/doc-deploy-stable@v6
        with:
            cname: ${{ env.DOCUMENTATION_CNAME }}
            token: ${{ secrets.GITHUB_TOKEN }}
            python-version: ${{ env.MAIN_PYTHON_VERSION }}
