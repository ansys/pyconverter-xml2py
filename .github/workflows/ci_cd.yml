# check spelling, codestyle
name: GitHub CI

# run only on main branch.  This avoids duplicated actions on PRs
on:
  workflow_dispatch:
  schedule: # UTC at 0300
    - cron: "0 3 * * *"
  pull_request:
  push:
    tags:
      - "*"
    branches:
      - main

env:
  MAIN_PYTHON_VERSION: '3.9'
  PACKAGE_NAME: 'ansys-dita-ast'
  PACKAGE_NAMESPACE: 'ansys.dita.ast'
  RESET_PIP_CACHE: 0

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  code-style:
    name: "Code style"
    runs-on: ubuntu-latest
    steps:
      - name: PyAnsys code style checks
        uses: pyansys/actions/code-style@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}



  smoke-tests:
    name: Build and Smoke tests (Linux)
    runs-on: ubuntu-latest
    needs: [code-style]
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']

    steps:
      - name: Build wheelhouse and perform smoke test
        uses: pyansys/actions/build-wheelhouse@v4
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          library-namespace: ${{ env.PACKAGE_NAMESPACE }}
          operating-system: ${{ runner.os }}
          python-version: ${{ matrix.python-version }}


  smoke-tests-macos-windows:
    name: Build and Smoke tests (macOS and Windows)
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    runs-on: ${{ matrix.os }}
    needs: [code-style]
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']

    steps:
      - name: Build wheelhouse and perform smoke test
        uses: pyansys/actions/build-wheelhouse@v4
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          library-namespace: ${{ env.PACKAGE_NAMESPACE }}
          operating-system: ${{ matrix.os }}
          python-version: ${{ matrix.python-version }}


  build-test:
    name: "Build and unit testing"
    runs-on: ubuntu-latest
    needs: [smoke-tests]

    steps:
      - name: "Install Git and checkout project"
        uses: actions/checkout@v3

      - name: "Setup Python"
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: "Install os packages"
        run: |
          sudo apt update
          sudo apt-get install pandoc

      - name: "Cache pip"
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: Python-v${{ env.RESET_PIP_CACHE }}-${{ runner.os }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            Python-v${{ env.RESET_PIP_CACHE }}-${{ runner.os }}

      - name: "Unit testing requirements installation"  
        run: |
          python -m pip install .[tests]

      - name: "Unit testing"
        run: |
          pytest -v --durations=10 --maxfail=10 \
            --reruns 7 --reruns-delay 3 \
            --cov=ansys.dita.ast --cov-report=xml:centos-remote.xml --cov-report=html

      - name: "Upload coverage to Codecov"
        uses: codecov/codecov-action@v3
        with:
          name: centos-remote.xml
          flags: centos,remote

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v3
        with:
          name: centos-remote.xml
          path: ./centos-remote.xml


  package:
    name: Package library
    needs: [build-test]
    runs-on: ubuntu-latest
    steps:
      - name: Build library source and wheel artifacts
        uses: pyansys/actions/build-library@v4
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          python-version: ${{ env.MAIN_PYTHON_VERSION }}


  release:
    name: "Release project to private PyPI and GitHub"
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    needs:  [package, smoke-tests-macos-windows]
    runs-on: ubuntu-latest
    steps:

    - name: "Release to the private PyPI repository"
      uses: pyansys/actions/release-pypi-private@v4
      with:
        library-name: ${{ env.PACKAGE_NAME }}
        twine-username: "__token__"
        twine-token: ${{ secrets.PYANSYS_PYPI_PRIVATE_PAT }}


    # - name: "Release to the public PyPI repository"
    #   uses: pyansys/actions/release-pypi-public@v3
    #   with:
    #     library-name: "ansys-dita-ast"
    #     twine-username: "__token__"
    #     twine-token: ${{ secrets.PYPI_TOKEN }}

    - name: "Release to GitHub"
      uses: pyansys/actions/release-github@v4
      with:
        library-name: ${{ env.PACKAGE_NAME }}

