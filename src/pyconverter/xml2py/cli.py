# Copyright (C) 2024 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

"""Command Line Interface for PyConverter-XML2Py."""

import logging
import os
from pathlib import Path
from typing import Union

import click
from pyconverter.xml2py import __version__, download, formatter
from pyconverter.xml2py import writer as wr


def create_package(
    xml_path: Union[Path, None] = None,
    target_path: Union[Path, None] = None,
    template_path: Union[Path, None] = None,
    custom_functions_path: Union[Path, None] = None,
    run_black: bool = False,
    max_docstring_length: int = 100,
) -> None:
    """Create Python package based on a XML documentation.

    Parameters
    ----------
    xml_path: str or Path
        Path to the directory that contains the XML documentation to convert.
    target_path: str or Path, optional
        Path to the directory where you want to create the autogenerated package.
        The default value is the current working directory.
    template_path: str or Path, optional
        Path for the template to use. If no path is provided, the default template is used.
        The default value is the ``_package`` directory accessible in the
        `PyConverter-XML2Py GitHub repository <https://github.com/ansys/pyconverter-xml2py/tree/main/_package>`_.
    custom_functions_path: str or Path, optional
        Path to the directory that contains the functions that need to be customized.
        The default value is None.
    run_black: bool, optional
        Whether to run black CLI on the autogenerated package source code.
        The default value is ``False``.
    max_docstring_length: int, optional
        Maximum length of the generated docstrings.
        The default is ``100``.
    """  # noqa : E501
    if xml_path is None:
        xml_path = os.environ.get("XML_PATH")
    if xml_path is None:
        raise RuntimeError(
            "Missing the XML documentation path. Specify this with either xml_path or set the XML_PATH environment variable"  # noqa : E501
        )
    else:
        xml_path = Path(xml_path).expanduser().resolve()
        if not xml_path.is_dir():
            raise FileExistsError(
                "Please, enter a valid directory path that contains the XML documentation to convert."  # noqa : E501
            )

    if custom_functions_path is None:
        logging.info(
            """
            No customized functions path was entered. The default code generation is applied
            to all the commands. You can specify the customized functions by adding a path to the
            ``--func-path`` argument.
            """
        )

    else:
        custom_functions_path = Path(custom_functions_path).expanduser().resolve()
        if not custom_functions_path.is_dir():
            raise FileExistsError(
                "Please, enter a valid directory path that contains the functions that need to be customized."  # noqa : E501
            )

    if target_path is None:
        target_path = Path.cwd()

    else:
        target_path = Path(target_path)
        target_path.mkdir(parents=True, exist_ok=True)
        print(f"The autogenerated package will be saved in {target_path}.")

    if template_path is None:
        if not (Path.cwd() / "_package").is_dir():
            download.download_template()

    command_map, name_map = wr.convert(xml_path)
    package_structure = wr.write_source(
        command_map, name_map, xml_path, target_path, custom_functions_path
    )
    package_path = target_path / "package"
    wr.write_docs(package_path, package_structure)
    if run_black is True:
        formatter.run_black(package_path, max_docstring_length)


@click.group()
def main():
    """A Python wrapper to convert XML documentation into Python source code
    with its related Sphinx documentation."""
    pass


@main.command()
def version():
    """Display current version."""
    print(f"pyconverter.xml2py {__version__}")


@main.command()
@click.option(
    "-x",
    "--xml-path",
    type=click.Path(exists=True),
    help="Path to the directory that contains the XML documentation to convert.",
)
@click.option(
    "-f",
    "--func-path",
    type=click.Path(exists=True),
    help="Path to the directory that contains the functions that need to be customized.",
)
@click.option(
    "-p",
    "--targ-path",
    type=click.Path(),
    help="Path to the directory where you want the autogenerated package to be created.",
)
@click.option(
    "-t",
    "--template-path",
    type=click.Path(),
    help="Path to the directory that contains the template to use.",
)
@click.option(
    "-b",
    "--run-black",
    type=click.BOOL,
    default=False,
    help="Whether to run Black CLI on the autogenerated package source code. The default is 'False'.",  # noqa : E501
)
@click.option(
    "-l",
    "--max-length",
    type=click.INT,
    default=100,
    help="Maximum length of the generated docstrings.",
)
def package(
    xml_path: Path,
    func_path: Path,
    targ_path: Path,
    template_path: Path,
    run_black: bool,
    max_length: int,
) -> None:
    """Create a Python package from your XML documentation."""
    create_package(xml_path, targ_path, template_path, func_path, run_black, max_length)
