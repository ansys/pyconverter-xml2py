# Copyright (C) 2023 - 2025 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

"""This module contains the functions to format the generated docstrings with
`Black <black_>`_."""

from pathlib import Path

# Subprocess is needed to run pre-commit hooks.
# Excluding bandit check.
import subprocess  # nosec B404


def run_pre_commit(package_path) -> None:
    """Run `pre-commit <pre-commit_>`_ on the autogenerated package."""
    output = 1
    cur_run = 0
    max_run = 10
    pre_commit_file = package_path / Path(".pre-commit-config.yaml")
    if not pre_commit_file.exists():
        raise FileNotFoundError(f"Pre-commit configuration file not found at {pre_commit_file}.")
    while cur_run < max_run and output != 0:
        cur_run += 1
        # pre_commit_file is controlled by the library.
        # Excluding bandit check.
        output = subprocess.run(
            [
                "pre-commit",
                "run",
                "--all-files",
                "--config",
                str(pre_commit_file),
            ],
            capture_output=True,
        ).returncode # nosec B603 B607
    if output != 0:
        raise RuntimeError("Pre-commit failed.")
    else:
        print("Pre-commit ran successfully.")
