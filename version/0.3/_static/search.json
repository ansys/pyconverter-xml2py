[
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/BlockQuote",
        "href": "api/src/pyconverter/xml2py/ast_tree/BlockQuote.html#blockquote",
        "title": "BlockQuote",
        "section": "BlockQuote",
        "text": "Bases: Element\nProvides the block quote element.\nto_rst\nReturn a string to enable converting the element to an RST format.\nReturn a string to enable converting the element to an RST format.\nfrom src.pyconverter.xml2py.ast_tree import BlockQuote"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/BlockQuote",
        "href": "api/src/pyconverter/xml2py/ast_tree/BlockQuote.html#overview",
        "title": "BlockQuote > Overview",
        "section": "Overview",
        "text": "to_rst\nReturn a string to enable converting the element to an RST format."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/BlockQuote",
        "href": "api/src/pyconverter/xml2py/ast_tree/BlockQuote.html#import-detail",
        "title": "BlockQuote > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import BlockQuote"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/BlockQuote",
        "href": "api/src/pyconverter/xml2py/ast_tree/BlockQuote.html#method-detail",
        "title": "BlockQuote > Method detail",
        "section": "Method detail",
        "text": "Return a string to enable converting the element to an RST format."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Important",
        "href": "api/src/pyconverter/xml2py/ast_tree/Important.html#important",
        "title": "Important",
        "section": "Important",
        "text": "Bases: Element\nProvides the base element.\nfrom src.pyconverter.xml2py.ast_tree import Important"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Important",
        "href": "api/src/pyconverter/xml2py/ast_tree/Important.html#import-detail",
        "title": "Important > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import Important"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/InformalExample",
        "href": "api/src/pyconverter/xml2py/ast_tree/InformalExample.html#informalexample",
        "title": "InformalExample",
        "section": "InformalExample",
        "text": "Bases: Element\nProvides the informal example element.\n__repr__\nfrom src.pyconverter.xml2py.ast_tree import InformalExample"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/InformalExample",
        "href": "api/src/pyconverter/xml2py/ast_tree/InformalExample.html#overview",
        "title": "InformalExample > Overview",
        "section": "Overview",
        "text": "__repr__"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/InformalExample",
        "href": "api/src/pyconverter/xml2py/ast_tree/InformalExample.html#import-detail",
        "title": "InformalExample > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import InformalExample"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/InformalExample",
        "href": "api/src/pyconverter/xml2py/ast_tree/InformalExample.html#method-detail",
        "title": "InformalExample > Method detail",
        "section": "Method detail",
        "text": ""
    },
    {
        "objectID": "contributing/index",
        "href": "contributing/index.html#contribute",
        "title": "Contribute",
        "section": "Contribute",
        "text": "Overall guidance on contributing to a PyAnsys library appears in the\nContributing topic\nin the PyAnsys Developer’s Guide. Ensure that you are thoroughly familiar\nwith this guide before attempting to contribute to PyConverter-XML2Py.\nThe following contribution information is specific to PyConverter-XML2Py.\nFollow these steps to install the package in developer mode:\nClone the repository:\nCreate a fresh-clean Python environment and activate it. If you require\nadditional information on creation of a virtual environment, see the\nofficial Python venv documentation.\nMake sure you have the latest version of pip:\nInstall the project in editable mode:\nInstall additional requirements (if needed):\nVerify your development installation:\nIf required, you can call style commands (such as black, isort,\nand flake8) or unit testing commands (such as pytest) from the command line.\nHowever, this does not guarantee that your project is being tested in an isolated\nenvironment, which is why you might consider using tox.\nFor building documentation, you can run the usual rules provided in the\nSphinx Makefile or make.bat:\nOnce the documentation is built, you can open it as follows.\nBy running the command:\nBy opening the documentation, which you do by going to the doc/html directory\nand opening the index.html file.\nBy opening the documentation, which you do by going to the doc/html directory\nand opening the index.html file.\nPyConverter-XML2Py follows the PEP8 standard as outlined in the PyAnsys Developer’s Guide and implements style checking using\npre-commit.\nTo ensure your code meets minimum code styling standards, run this code:\nYou can also install this as a pre-commit hook by running this code:\nThis way, it’s not possible for you to push code that fails the style checks\nIf you would like to create either source or wheel files, start by installing\nthe building requirements:\nThen, execute these commands:\ngit clone https://github.com/ansys/pyconverter-xml2py.git\npython -m venv .venv\nsource .venv/bin/activate\npython -m venv .venv\nsource .venv/bin/activate\npython -m venv .venv\n.\\.venv\\Scripts\\activate\npython -m pip install -U pip\npython -m pip install -e .\npython -m pip install .[doc,tests]\npytest tests -v\npython -m pip install .[doc]\nmake -C doc html\npython -m pip install .[doc]\n.\\doc\\make.bat html\nyour_browser_name doc/html/index.html\npip install pre-commit\npre-commit run --all-files\npre-commit install\n$ git commit -am \"added my cool feature\"\nblack....................................................................Passed\nblacken-docs.............................................................Passed\nisort....................................................................Passed\nflake8...................................................................Passed\ncodespell................................................................Passed\ncheck for merge conflicts................................................Passed\ndebug statements (python)................................................Passed\nValidate GitHub Workflows................................................Passed\npython -m pip install -e .[doc,tests]\npython -m build\npython -m twine check dist/*"
    },
    {
        "objectID": "contributing/index",
        "href": "contributing/index.html#developer-installation",
        "title": "Contribute > Developer installation",
        "section": "Developer installation",
        "text": "Follow these steps to install the package in developer mode:\nClone the repository:\nCreate a fresh-clean Python environment and activate it. If you require\nadditional information on creation of a virtual environment, see the\nofficial Python venv documentation.\nMake sure you have the latest version of pip:\nInstall the project in editable mode:\nInstall additional requirements (if needed):\nVerify your development installation:\ngit clone https://github.com/ansys/pyconverter-xml2py.git\npython -m venv .venv\nsource .venv/bin/activate\npython -m venv .venv\nsource .venv/bin/activate\npython -m venv .venv\n.\\.venv\\Scripts\\activate\npython -m pip install -U pip\npython -m pip install -e .\npython -m pip install .[doc,tests]\npytest tests -v"
    },
    {
        "objectID": "contributing/index",
        "href": "contributing/index.html#style-and-testing",
        "title": "Contribute > Style and testing",
        "section": "Style and testing",
        "text": "If required, you can call style commands (such as black, isort,\nand flake8) or unit testing commands (such as pytest) from the command line.\nHowever, this does not guarantee that your project is being tested in an isolated\nenvironment, which is why you might consider using tox."
    },
    {
        "objectID": "contributing/index",
        "href": "contributing/index.html#documentation",
        "title": "Contribute > Documentation",
        "section": "Documentation",
        "text": "For building documentation, you can run the usual rules provided in the\nSphinx Makefile or make.bat:\nOnce the documentation is built, you can open it as follows.\nBy running the command:\nBy opening the documentation, which you do by going to the doc/html directory\nand opening the index.html file.\nBy opening the documentation, which you do by going to the doc/html directory\nand opening the index.html file.\npython -m pip install .[doc]\nmake -C doc html\npython -m pip install .[doc]\n.\\doc\\make.bat html\nyour_browser_name doc/html/index.html"
    },
    {
        "objectID": "contributing/index",
        "href": "contributing/index.html#adhere-to-code-style",
        "title": "Contribute > Adhere to code style",
        "section": "Adhere to code style",
        "text": "PyConverter-XML2Py follows the PEP8 standard as outlined in the PyAnsys Developer’s Guide and implements style checking using\npre-commit.\nTo ensure your code meets minimum code styling standards, run this code:\nYou can also install this as a pre-commit hook by running this code:\nThis way, it’s not possible for you to push code that fails the style checks\npip install pre-commit\npre-commit run --all-files\npre-commit install\n$ git commit -am \"added my cool feature\"\nblack....................................................................Passed\nblacken-docs.............................................................Passed\nisort....................................................................Passed\nflake8...................................................................Passed\ncodespell................................................................Passed\ncheck for merge conflicts................................................Passed\ndebug statements (python)................................................Passed\nValidate GitHub Workflows................................................Passed"
    },
    {
        "objectID": "contributing/index",
        "href": "contributing/index.html#distributing",
        "title": "Contribute > Distributing",
        "section": "Distributing",
        "text": "If you would like to create either source or wheel files, start by installing\nthe building requirements:\nThen, execute these commands:\npython -m pip install -e .[doc,tests]\npython -m build\npython -m twine check dist/*"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/TGroup",
        "href": "api/src/pyconverter/xml2py/ast_tree/TGroup.html#tgroup",
        "title": "TGroup",
        "section": "TGroup",
        "text": "Bases: Element\nProvides the tgroup element, which contains the header and body rows of a table.\nto_rst\nReturn a string to enable converting the element to an RST format.\nn_col\nNumber of columns.\nthead\nTHead.\ntbody\nTBody.\nrow_in_tbody\nList of the rows in the TBody.\nNumber of columns.\nTHead.\nTBody.\nList of the rows in the TBody.\nReturn a string to enable converting the element to an RST format.\nfrom src.pyconverter.xml2py.ast_tree import TGroup"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/TGroup",
        "href": "api/src/pyconverter/xml2py/ast_tree/TGroup.html#overview",
        "title": "TGroup > Overview",
        "section": "Overview",
        "text": "to_rst\nReturn a string to enable converting the element to an RST format.\nn_col\nNumber of columns.\nthead\nTHead.\ntbody\nTBody.\nrow_in_tbody\nList of the rows in the TBody."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/TGroup",
        "href": "api/src/pyconverter/xml2py/ast_tree/TGroup.html#import-detail",
        "title": "TGroup > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import TGroup"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/TGroup",
        "href": "api/src/pyconverter/xml2py/ast_tree/TGroup.html#property-detail",
        "title": "TGroup > Property detail",
        "section": "Property detail",
        "text": "Number of columns.\nTHead.\nTBody.\nList of the rows in the TBody."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/TGroup",
        "href": "api/src/pyconverter/xml2py/ast_tree/TGroup.html#method-detail",
        "title": "TGroup > Method detail",
        "section": "Method detail",
        "text": "Return a string to enable converting the element to an RST format."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/NameMap",
        "href": "api/src/pyconverter/xml2py/ast_tree/NameMap.html#namemap",
        "title": "NameMap",
        "section": "NameMap",
        "text": "name_map\nNAME_MAP_GLOB\nfrom src.pyconverter.xml2py.ast_tree import NameMap"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/NameMap",
        "href": "api/src/pyconverter/xml2py/ast_tree/NameMap.html#overview",
        "title": "NameMap > Overview",
        "section": "Overview",
        "text": "name_map\nNAME_MAP_GLOB"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/NameMap",
        "href": "api/src/pyconverter/xml2py/ast_tree/NameMap.html#import-detail",
        "title": "NameMap > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import NameMap"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/NameMap",
        "href": "api/src/pyconverter/xml2py/ast_tree/NameMap.html#attribute-detail",
        "title": "NameMap > Attribute detail",
        "section": "Attribute detail",
        "text": ""
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/IndexTerm",
        "href": "api/src/pyconverter/xml2py/ast_tree/IndexTerm.html#indexterm",
        "title": "IndexTerm",
        "section": "IndexTerm",
        "text": "Bases: Element\nProvides the index term element.\nfrom src.pyconverter.xml2py.ast_tree import IndexTerm"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/IndexTerm",
        "href": "api/src/pyconverter/xml2py/ast_tree/IndexTerm.html#import-detail",
        "title": "IndexTerm > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import IndexTerm"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Element",
        "href": "api/src/pyconverter/xml2py/ast_tree/Element.html#element",
        "title": "Element",
        "section": "Element",
        "text": "Provides the base element.\nhas_children\nReturn wether the element has children.\nget\nGet an item from an element.\nprint_tree\nPrint the tree.\ntypes_repr\nReturn the string types.\nget_children_by_type\nGet children of a specific type.\nget_titles_in_element_list\nGet the titles of the elements in a list of elements.\nto_rst\nReturn a string to enable converting the element to an RST format.\nrec_find\nFind the first type matching a given type string recursively.\nfind\nFind the first type matching a given type string.\nfind_all\nFind all types matching a given type string.\ntext_content\nText content.\nraw\nRaw string of the element.\ntostring\nAttributes of the element as a dictionary.\nadded\nHas the revision flag added.\nany_isalnum\nReturns True if any characters are alphanumeric.\ntail\nTail of the element as a string.\nchildren\nChildren of the tree.\nchildren_types\nTypes of the children.\ntitle\nElement title.\ncontent\nText content.\nid\nID of the element.\nnext_elem\nNext element.\nprev_elem\nPrevious element.\ntag\nElement tag.\n__getitem__\n__len__\n__repr__\nText content.\nRaw string of the element.\nAttributes of the element as a dictionary.\nHas the revision flag added.\nReturns True if any characters are alphanumeric.\nTail of the element as a string.\nChildren of the tree.\nTypes of the children.\nElement title.\nText content.\nID of the element.\nNext element.\nPrevious element.\nElement tag.\nReturn wether the element has children.\nGet an item from an element.\nPrint the tree.\nReturn the string types.\nGet children of a specific type.\nGet the titles of the elements in a list of elements.\nReturn a string to enable converting the element to an RST format.\nFind the first type matching a given type string recursively.\nFind the first type matching a given type string.\nFind all types matching a given type string.\nfrom src.pyconverter.xml2py.ast_tree import Element"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Element",
        "href": "api/src/pyconverter/xml2py/ast_tree/Element.html#overview",
        "title": "Element > Overview",
        "section": "Overview",
        "text": "has_children\nReturn wether the element has children.\nget\nGet an item from an element.\nprint_tree\nPrint the tree.\ntypes_repr\nReturn the string types.\nget_children_by_type\nGet children of a specific type.\nget_titles_in_element_list\nGet the titles of the elements in a list of elements.\nto_rst\nReturn a string to enable converting the element to an RST format.\nrec_find\nFind the first type matching a given type string recursively.\nfind\nFind the first type matching a given type string.\nfind_all\nFind all types matching a given type string.\ntext_content\nText content.\nraw\nRaw string of the element.\ntostring\nAttributes of the element as a dictionary.\nadded\nHas the revision flag added.\nany_isalnum\nReturns True if any characters are alphanumeric.\ntail\nTail of the element as a string.\nchildren\nChildren of the tree.\nchildren_types\nTypes of the children.\ntitle\nElement title.\ncontent\nText content.\nid\nID of the element.\nnext_elem\nNext element.\nprev_elem\nPrevious element.\ntag\nElement tag.\n__getitem__\n__len__\n__repr__"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Element",
        "href": "api/src/pyconverter/xml2py/ast_tree/Element.html#import-detail",
        "title": "Element > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import Element"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Element",
        "href": "api/src/pyconverter/xml2py/ast_tree/Element.html#property-detail",
        "title": "Element > Property detail",
        "section": "Property detail",
        "text": "Text content.\nRaw string of the element.\nAttributes of the element as a dictionary.\nHas the revision flag added.\nReturns True if any characters are alphanumeric.\nTail of the element as a string.\nChildren of the tree.\nTypes of the children.\nElement title.\nText content.\nID of the element.\nNext element.\nPrevious element.\nElement tag."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Element",
        "href": "api/src/pyconverter/xml2py/ast_tree/Element.html#method-detail",
        "title": "Element > Method detail",
        "section": "Method detail",
        "text": "Return wether the element has children.\nGet an item from an element.\nPrint the tree.\nReturn the string types.\nGet children of a specific type.\nGet the titles of the elements in a list of elements.\nReturn a string to enable converting the element to an RST format.\nFind the first type matching a given type string recursively.\nFind the first type matching a given type string.\nFind all types matching a given type string."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/XMLType",
        "href": "api/src/pyconverter/xml2py/ast_tree/XMLType.html#xmltype",
        "title": "XMLType",
        "section": "XMLType",
        "text": "Bases: Element\nProvides the base element.\nfrom src.pyconverter.xml2py.ast_tree import XMLType"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/XMLType",
        "href": "api/src/pyconverter/xml2py/ast_tree/XMLType.html#import-detail",
        "title": "XMLType > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import XMLType"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Title",
        "href": "api/src/pyconverter/xml2py/ast_tree/Title.html#title",
        "title": "Title",
        "section": "Title",
        "text": "Bases: Element\nProvides the title element.\n__repr__\nfrom src.pyconverter.xml2py.ast_tree import Title"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Title",
        "href": "api/src/pyconverter/xml2py/ast_tree/Title.html#overview",
        "title": "Title > Overview",
        "section": "Overview",
        "text": "__repr__"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Title",
        "href": "api/src/pyconverter/xml2py/ast_tree/Title.html#import-detail",
        "title": "Title > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import Title"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Title",
        "href": "api/src/pyconverter/xml2py/ast_tree/Title.html#method-detail",
        "title": "Title > Method detail",
        "section": "Method detail",
        "text": ""
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Phrase",
        "href": "api/src/pyconverter/xml2py/ast_tree/Phrase.html#phrase",
        "title": "Phrase",
        "section": "Phrase",
        "text": "Bases: Element\nProvides the phrase element.\n__repr__\nfrom src.pyconverter.xml2py.ast_tree import Phrase"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Phrase",
        "href": "api/src/pyconverter/xml2py/ast_tree/Phrase.html#overview",
        "title": "Phrase > Overview",
        "section": "Overview",
        "text": "__repr__"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Phrase",
        "href": "api/src/pyconverter/xml2py/ast_tree/Phrase.html#import-detail",
        "title": "Phrase > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import Phrase"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Phrase",
        "href": "api/src/pyconverter/xml2py/ast_tree/Phrase.html#method-detail",
        "title": "Phrase > Method detail",
        "section": "Method detail",
        "text": ""
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refsynopsisdiv",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refsynopsisdiv.html#refsynopsisdiv",
        "title": "Refsynopsisdiv",
        "section": "Refsynopsisdiv",
        "text": "Bases: Element\nProvides the base element.\nfrom src.pyconverter.xml2py.ast_tree import Refsynopsisdiv"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refsynopsisdiv",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refsynopsisdiv.html#import-detail",
        "title": "Refsynopsisdiv > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import Refsynopsisdiv"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Term",
        "href": "api/src/pyconverter/xml2py/ast_tree/Term.html#term",
        "title": "Term",
        "section": "Term",
        "text": "Bases: Element\nProvides the term element.\nto_rst\nReturn a string to enable converting the element to an RST format.\n__repr__\nReturn a string to enable converting the element to an RST format.\nfrom src.pyconverter.xml2py.ast_tree import Term"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Term",
        "href": "api/src/pyconverter/xml2py/ast_tree/Term.html#overview",
        "title": "Term > Overview",
        "section": "Overview",
        "text": "to_rst\nReturn a string to enable converting the element to an RST format.\n__repr__"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Term",
        "href": "api/src/pyconverter/xml2py/ast_tree/Term.html#import-detail",
        "title": "Term > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import Term"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Term",
        "href": "api/src/pyconverter/xml2py/ast_tree/Term.html#method-detail",
        "title": "Term > Method detail",
        "section": "Method detail",
        "text": "Return a string to enable converting the element to an RST format."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Chapter",
        "href": "api/src/pyconverter/xml2py/ast_tree/Chapter.html#chapter",
        "title": "Chapter",
        "section": "Chapter",
        "text": "Bases: Element\nProvides the chapter element.\nhelpstring\nValue for the helpstring parameter contained in the chapter element.\n__repr__\nValue for the helpstring parameter contained in the chapter element.\nfrom src.pyconverter.xml2py.ast_tree import Chapter"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Chapter",
        "href": "api/src/pyconverter/xml2py/ast_tree/Chapter.html#overview",
        "title": "Chapter > Overview",
        "section": "Overview",
        "text": "helpstring\nValue for the helpstring parameter contained in the chapter element.\n__repr__"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Chapter",
        "href": "api/src/pyconverter/xml2py/ast_tree/Chapter.html#import-detail",
        "title": "Chapter > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import Chapter"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Chapter",
        "href": "api/src/pyconverter/xml2py/ast_tree/Chapter.html#property-detail",
        "title": "Chapter > Property detail",
        "section": "Property detail",
        "text": "Value for the helpstring parameter contained in the chapter element."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Chapter",
        "href": "api/src/pyconverter/xml2py/ast_tree/Chapter.html#method-detail",
        "title": "Chapter > Method detail",
        "section": "Method detail",
        "text": ""
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/XMLWarning",
        "href": "api/src/pyconverter/xml2py/ast_tree/XMLWarning.html#xmlwarning",
        "title": "XMLWarning",
        "section": "XMLWarning",
        "text": "Bases: Element\nProvides the base element.\nfrom src.pyconverter.xml2py.ast_tree import XMLWarning"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/XMLWarning",
        "href": "api/src/pyconverter/xml2py/ast_tree/XMLWarning.html#import-detail",
        "title": "XMLWarning > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import XMLWarning"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Section1",
        "href": "api/src/pyconverter/xml2py/ast_tree/Section1.html#section1",
        "title": "Section1",
        "section": "Section1",
        "text": "Bases: Element\nProvides the base element.\nfrom src.pyconverter.xml2py.ast_tree import Section1"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Section1",
        "href": "api/src/pyconverter/xml2py/ast_tree/Section1.html#import-detail",
        "title": "Section1 > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import Section1"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/XMLCommand",
        "href": "api/src/pyconverter/xml2py/ast_tree/XMLCommand.html#xmlcommand",
        "title": "XMLCommand",
        "section": "XMLCommand",
        "text": "Bases: Element\nProvides the XML command from the documentation.\npy_signature\nBeginning of the Python command’s definition.\npy_docstring\nPython docstring of the command.\npy_notes\nPython-formatted notes string.\npy_parm\nPython parameter’s string.\npy_source\nReturn the Python source.\nto_python\nReturn the complete Python definition of the command.\nxml_filename\nSource filename of the command.\nargs\nCommand arguments.\ndefault\nCommand default.\narg_desc\nArgument object list of the command.\nshort_desc\nShort description of the command.\nname\nName of the XML command.\npy_name\nPython-compatible name.\npy_args\nis_archived\nFlag indicating if the command is archived.\ngroup\nGroup of the command.\nurl\nURL to the Ansys command documentation.\nfilename\nCommand filename\nnotes\nNotes of the command.\n__repr__\nSource filename of the command.\nCommand arguments.\nCommand default.\nArgument object list of the command.\nShort description of the command.\nName of the XML command.\nPython-compatible name.\nFlag indicating if the command is archived.\nGroup of the command.\nURL to the Ansys command documentation.\nCommand filename\nNotes of the command.\nBeginning of the Python command’s definition.\nPython docstring of the command.\nPython-formatted notes string.\nPython parameter’s string.\nReturn the Python source.\nCustom functions to add to the command. The default is None.\nReturn the complete Python definition of the command.\nCustom functions to add to the command. The default is None.\nIndentation of the Python function. The default is \"\".\nPython function of the command including the converted docstring.\nfrom src.pyconverter.xml2py.ast_tree import XMLCommand"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/XMLCommand",
        "href": "api/src/pyconverter/xml2py/ast_tree/XMLCommand.html#overview",
        "title": "XMLCommand > Overview",
        "section": "Overview",
        "text": "py_signature\nBeginning of the Python command’s definition.\npy_docstring\nPython docstring of the command.\npy_notes\nPython-formatted notes string.\npy_parm\nPython parameter’s string.\npy_source\nReturn the Python source.\nto_python\nReturn the complete Python definition of the command.\nxml_filename\nSource filename of the command.\nargs\nCommand arguments.\ndefault\nCommand default.\narg_desc\nArgument object list of the command.\nshort_desc\nShort description of the command.\nname\nName of the XML command.\npy_name\nPython-compatible name.\npy_args\nis_archived\nFlag indicating if the command is archived.\ngroup\nGroup of the command.\nurl\nURL to the Ansys command documentation.\nfilename\nCommand filename\nnotes\nNotes of the command.\n__repr__"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/XMLCommand",
        "href": "api/src/pyconverter/xml2py/ast_tree/XMLCommand.html#import-detail",
        "title": "XMLCommand > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import XMLCommand"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/XMLCommand",
        "href": "api/src/pyconverter/xml2py/ast_tree/XMLCommand.html#property-detail",
        "title": "XMLCommand > Property detail",
        "section": "Property detail",
        "text": "Source filename of the command.\nCommand arguments.\nCommand default.\nArgument object list of the command.\nShort description of the command.\nName of the XML command.\nPython-compatible name.\nFlag indicating if the command is archived.\nGroup of the command.\nURL to the Ansys command documentation.\nCommand filename\nNotes of the command."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/XMLCommand",
        "href": "api/src/pyconverter/xml2py/ast_tree/XMLCommand.html#method-detail",
        "title": "XMLCommand > Method detail",
        "section": "Method detail",
        "text": "Beginning of the Python command’s definition.\nPython docstring of the command.\nPython-formatted notes string.\nPython parameter’s string.\nReturn the Python source.\nCustom functions to add to the command. The default is None.\nReturn the complete Python definition of the command.\nCustom functions to add to the command. The default is None.\nIndentation of the Python function. The default is \"\".\nPython function of the command including the converted docstring."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Quote",
        "href": "api/src/pyconverter/xml2py/ast_tree/Quote.html#quote",
        "title": "Quote",
        "section": "Quote",
        "text": "Bases: Element\nProvides the quote element.\nquote\nQuote value.\n__repr__\nQuote value.\nfrom src.pyconverter.xml2py.ast_tree import Quote"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Quote",
        "href": "api/src/pyconverter/xml2py/ast_tree/Quote.html#overview",
        "title": "Quote > Overview",
        "section": "Overview",
        "text": "quote\nQuote value.\n__repr__"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Quote",
        "href": "api/src/pyconverter/xml2py/ast_tree/Quote.html#import-detail",
        "title": "Quote > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import Quote"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Quote",
        "href": "api/src/pyconverter/xml2py/ast_tree/Quote.html#property-detail",
        "title": "Quote > Property detail",
        "section": "Property detail",
        "text": "Quote value."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Quote",
        "href": "api/src/pyconverter/xml2py/ast_tree/Quote.html#method-detail",
        "title": "Quote > Method detail",
        "section": "Method detail",
        "text": ""
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Table",
        "href": "api/src/pyconverter/xml2py/ast_tree/Table.html#table",
        "title": "Table",
        "section": "Table",
        "text": "Bases: Element\nProvides the table element\nto_rst\nReturn a string to enable converting the element to an RST format.\ntitle\nTable title.\ntgroup\nTGroup.\n__repr__\nTable title.\nTGroup.\nReturn a string to enable converting the element to an RST format.\nfrom src.pyconverter.xml2py.ast_tree import Table"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Table",
        "href": "api/src/pyconverter/xml2py/ast_tree/Table.html#overview",
        "title": "Table > Overview",
        "section": "Overview",
        "text": "to_rst\nReturn a string to enable converting the element to an RST format.\ntitle\nTable title.\ntgroup\nTGroup.\n__repr__"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Table",
        "href": "api/src/pyconverter/xml2py/ast_tree/Table.html#import-detail",
        "title": "Table > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import Table"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Table",
        "href": "api/src/pyconverter/xml2py/ast_tree/Table.html#property-detail",
        "title": "Table > Property detail",
        "section": "Property detail",
        "text": "Table title.\nTGroup."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Table",
        "href": "api/src/pyconverter/xml2py/ast_tree/Table.html#method-detail",
        "title": "Table > Method detail",
        "section": "Method detail",
        "text": "Return a string to enable converting the element to an RST format."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Highlights",
        "href": "api/src/pyconverter/xml2py/ast_tree/Highlights.html#highlights",
        "title": "Highlights",
        "section": "Highlights",
        "text": "Bases: Element\nProvides the base element.\nfrom src.pyconverter.xml2py.ast_tree import Highlights"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Highlights",
        "href": "api/src/pyconverter/xml2py/ast_tree/Highlights.html#import-detail",
        "title": "Highlights > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import Highlights"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Member",
        "href": "api/src/pyconverter/xml2py/ast_tree/Member.html#member",
        "title": "Member",
        "section": "Member",
        "text": "Bases: Element\nProvides the member element for a simple itemized list.\nfrom src.pyconverter.xml2py.ast_tree import Member"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Member",
        "href": "api/src/pyconverter/xml2py/ast_tree/Member.html#import-detail",
        "title": "Member > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import Member"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/SegTitle",
        "href": "api/src/pyconverter/xml2py/ast_tree/SegTitle.html#segtitle",
        "title": "SegTitle",
        "section": "SegTitle",
        "text": "Bases: Element\nProvides the base element.\nfrom src.pyconverter.xml2py.ast_tree import SegTitle"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/SegTitle",
        "href": "api/src/pyconverter/xml2py/ast_tree/SegTitle.html#import-detail",
        "title": "SegTitle > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import SegTitle"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Entry",
        "href": "api/src/pyconverter/xml2py/ast_tree/Entry.html#entry",
        "title": "Entry",
        "section": "Entry",
        "text": "Bases: Element\nProvides the entry element.\nto_rst\nReturn a string to enable converting the element to an RST format.\nmorerows\nValue for the morerows parameter contained in the entry element.\nValue for the morerows parameter contained in the entry element.\nReturn a string to enable converting the element to an RST format.\nfrom src.pyconverter.xml2py.ast_tree import Entry"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Entry",
        "href": "api/src/pyconverter/xml2py/ast_tree/Entry.html#overview",
        "title": "Entry > Overview",
        "section": "Overview",
        "text": "to_rst\nReturn a string to enable converting the element to an RST format.\nmorerows\nValue for the morerows parameter contained in the entry element."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Entry",
        "href": "api/src/pyconverter/xml2py/ast_tree/Entry.html#import-detail",
        "title": "Entry > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import Entry"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Entry",
        "href": "api/src/pyconverter/xml2py/ast_tree/Entry.html#property-detail",
        "title": "Entry > Property detail",
        "section": "Property detail",
        "text": "Value for the morerows parameter contained in the entry element."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Entry",
        "href": "api/src/pyconverter/xml2py/ast_tree/Entry.html#method-detail",
        "title": "Entry > Method detail",
        "section": "Method detail",
        "text": "Return a string to enable converting the element to an RST format."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/XRef",
        "href": "api/src/pyconverter/xml2py/ast_tree/XRef.html#xref",
        "title": "XRef",
        "section": "XRef",
        "text": "Bases: Link\nProvides the cross reference element.\nto_rst\nReturn a string to enable converting the element to an RST format.\ntail\nTail of the element as a string.\nTail of the element as a string.\nReturn a string to enable converting the element to an RST format.\nfrom src.pyconverter.xml2py.ast_tree import XRef"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/XRef",
        "href": "api/src/pyconverter/xml2py/ast_tree/XRef.html#overview",
        "title": "XRef > Overview",
        "section": "Overview",
        "text": "to_rst\nReturn a string to enable converting the element to an RST format.\ntail\nTail of the element as a string."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/XRef",
        "href": "api/src/pyconverter/xml2py/ast_tree/XRef.html#import-detail",
        "title": "XRef > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import XRef"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/XRef",
        "href": "api/src/pyconverter/xml2py/ast_tree/XRef.html#property-detail",
        "title": "XRef > Property detail",
        "section": "Property detail",
        "text": "Tail of the element as a string."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/XRef",
        "href": "api/src/pyconverter/xml2py/ast_tree/XRef.html#method-detail",
        "title": "XRef > Method detail",
        "section": "Method detail",
        "text": "Return a string to enable converting the element to an RST format."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/THead",
        "href": "api/src/pyconverter/xml2py/ast_tree/THead.html#thead",
        "title": "THead",
        "section": "THead",
        "text": "Bases: Element\nProvides the thead element.\nto_rst\nReturn a list and the length of the list for converting the element\nrows\nReturn all row elements found in the THead element.\nReturn all row elements found in the THead element.\nReturn a list and the length of the list for converting the element\nto an RST format.\nfrom src.pyconverter.xml2py.ast_tree import THead"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/THead",
        "href": "api/src/pyconverter/xml2py/ast_tree/THead.html#overview",
        "title": "THead > Overview",
        "section": "Overview",
        "text": "to_rst\nReturn a list and the length of the list for converting the element\nrows\nReturn all row elements found in the THead element."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/THead",
        "href": "api/src/pyconverter/xml2py/ast_tree/THead.html#import-detail",
        "title": "THead > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import THead"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/THead",
        "href": "api/src/pyconverter/xml2py/ast_tree/THead.html#property-detail",
        "title": "THead > Property detail",
        "section": "Property detail",
        "text": "Return all row elements found in the THead element."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/THead",
        "href": "api/src/pyconverter/xml2py/ast_tree/THead.html#method-detail",
        "title": "THead > Method detail",
        "section": "Method detail",
        "text": "Return a list and the length of the list for converting the element\nto an RST format."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ClassName",
        "href": "api/src/pyconverter/xml2py/ast_tree/ClassName.html#classname",
        "title": "ClassName",
        "section": "ClassName",
        "text": "Bases: Element\nProvides the base element.\nfrom src.pyconverter.xml2py.ast_tree import ClassName"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ClassName",
        "href": "api/src/pyconverter/xml2py/ast_tree/ClassName.html#import-detail",
        "title": "ClassName > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import ClassName"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ListItem",
        "href": "api/src/pyconverter/xml2py/ast_tree/ListItem.html#listitem",
        "title": "ListItem",
        "section": "ListItem",
        "text": "Bases: Element\nProvides the list item element.\nto_rst\nReturn a string to enable converting the element to an RST format.\nReturn a string to enable converting the element to an RST format.\nfrom src.pyconverter.xml2py.ast_tree import ListItem"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ListItem",
        "href": "api/src/pyconverter/xml2py/ast_tree/ListItem.html#overview",
        "title": "ListItem > Overview",
        "section": "Overview",
        "text": "to_rst\nReturn a string to enable converting the element to an RST format."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ListItem",
        "href": "api/src/pyconverter/xml2py/ast_tree/ListItem.html#import-detail",
        "title": "ListItem > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import ListItem"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ListItem",
        "href": "api/src/pyconverter/xml2py/ast_tree/ListItem.html#method-detail",
        "title": "ListItem > Method detail",
        "section": "Method detail",
        "text": "Return a string to enable converting the element to an RST format."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/custom_functions/index",
        "href": "api/src/pyconverter/xml2py/custom_functions/index.html#the-custom_functionspy-module",
        "title": "The custom_functions.py module",
        "section": "The custom_functions.py module",
        "text": "CustomFunctions\nProvides for creating customized functions.\nget_docstring_lists\nGet lists of strings depending on Python file sections.\nGet lists of strings depending on Python file sections.\nPath containing the Python file.\nList containing the docstring Returns section.\nList containing the docstring Examples section.\nList containing the source code.\nList containing the library import section."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/custom_functions/index",
        "href": "api/src/pyconverter/xml2py/custom_functions/index.html#summary",
        "title": "The custom_functions.py module > Summary",
        "section": "Summary",
        "text": "CustomFunctions\nProvides for creating customized functions.\nget_docstring_lists\nGet lists of strings depending on Python file sections."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/custom_functions/index",
        "href": "api/src/pyconverter/xml2py/custom_functions/index.html#module-detail",
        "title": "The custom_functions.py module > Module detail",
        "section": "Module detail",
        "text": "Get lists of strings depending on Python file sections.\nPath containing the Python file.\nList containing the docstring Returns section.\nList containing the docstring Examples section.\nList containing the source code.\nList containing the library import section."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/RefSection",
        "href": "api/src/pyconverter/xml2py/ast_tree/RefSection.html#refsection",
        "title": "RefSection",
        "section": "RefSection",
        "text": "Bases: Element\nProvides the reference section element.\nto_rst\nReturn a string to enable converting the element to an RST format.\nReturn a string to enable converting the element to an RST format.\nfrom src.pyconverter.xml2py.ast_tree import RefSection"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/RefSection",
        "href": "api/src/pyconverter/xml2py/ast_tree/RefSection.html#overview",
        "title": "RefSection > Overview",
        "section": "Overview",
        "text": "to_rst\nReturn a string to enable converting the element to an RST format."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/RefSection",
        "href": "api/src/pyconverter/xml2py/ast_tree/RefSection.html#import-detail",
        "title": "RefSection > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import RefSection"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/RefSection",
        "href": "api/src/pyconverter/xml2py/ast_tree/RefSection.html#method-detail",
        "title": "RefSection > Method detail",
        "section": "Method detail",
        "text": "Return a string to enable converting the element to an RST format."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Example",
        "href": "api/src/pyconverter/xml2py/ast_tree/Example.html#example",
        "title": "Example",
        "section": "Example",
        "text": "Bases: Element\nProvides the example element.\nfrom src.pyconverter.xml2py.ast_tree import Example"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Example",
        "href": "api/src/pyconverter/xml2py/ast_tree/Example.html#import-detail",
        "title": "Example > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import Example"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Row",
        "href": "api/src/pyconverter/xml2py/ast_tree/Row.html#row",
        "title": "Row",
        "section": "Row",
        "text": "Bases: Element\nProvides the row element.\nto_rst_list\nReturn a list to enable converting the element to an RST format.\nentry\nReturn all entry elements found in the row element.\nReturn all entry elements found in the row element.\nReturn a list to enable converting the element to an RST format.\nfrom src.pyconverter.xml2py.ast_tree import Row"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Row",
        "href": "api/src/pyconverter/xml2py/ast_tree/Row.html#overview",
        "title": "Row > Overview",
        "section": "Overview",
        "text": "to_rst_list\nReturn a list to enable converting the element to an RST format.\nentry\nReturn all entry elements found in the row element."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Row",
        "href": "api/src/pyconverter/xml2py/ast_tree/Row.html#import-detail",
        "title": "Row > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import Row"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Row",
        "href": "api/src/pyconverter/xml2py/ast_tree/Row.html#property-detail",
        "title": "Row > Property detail",
        "section": "Property detail",
        "text": "Return all entry elements found in the row element."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Row",
        "href": "api/src/pyconverter/xml2py/ast_tree/Row.html#method-detail",
        "title": "Row > Method detail",
        "section": "Method detail",
        "text": "Return a list to enable converting the element to an RST format."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Footnoteref",
        "href": "api/src/pyconverter/xml2py/ast_tree/Footnoteref.html#footnoteref",
        "title": "Footnoteref",
        "section": "Footnoteref",
        "text": "Bases: Element\nProvides the base element.\nfrom src.pyconverter.xml2py.ast_tree import Footnoteref"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Footnoteref",
        "href": "api/src/pyconverter/xml2py/ast_tree/Footnoteref.html#import-detail",
        "title": "Footnoteref > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import Footnoteref"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Emphasis",
        "href": "api/src/pyconverter/xml2py/ast_tree/Emphasis.html#emphasis",
        "title": "Emphasis",
        "section": "Emphasis",
        "text": "Bases: Element\nProvides the emphasis element.\nto_rst\nReturn a string to enable converting the element to an RST format.\nrole\nReturn the role parameter value contained in the Emphasis element.\nReturn the role parameter value contained in the Emphasis element.\nReturn a string to enable converting the element to an RST format.\nfrom src.pyconverter.xml2py.ast_tree import Emphasis"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Emphasis",
        "href": "api/src/pyconverter/xml2py/ast_tree/Emphasis.html#overview",
        "title": "Emphasis > Overview",
        "section": "Overview",
        "text": "to_rst\nReturn a string to enable converting the element to an RST format.\nrole\nReturn the role parameter value contained in the Emphasis element."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Emphasis",
        "href": "api/src/pyconverter/xml2py/ast_tree/Emphasis.html#import-detail",
        "title": "Emphasis > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import Emphasis"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Emphasis",
        "href": "api/src/pyconverter/xml2py/ast_tree/Emphasis.html#property-detail",
        "title": "Emphasis > Property detail",
        "section": "Property detail",
        "text": "Return the role parameter value contained in the Emphasis element."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Emphasis",
        "href": "api/src/pyconverter/xml2py/ast_tree/Emphasis.html#method-detail",
        "title": "Emphasis > Method detail",
        "section": "Method detail",
        "text": "Return a string to enable converting the element to an RST format."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/SuperScript",
        "href": "api/src/pyconverter/xml2py/ast_tree/SuperScript.html#superscript",
        "title": "SuperScript",
        "section": "SuperScript",
        "text": "Bases: Element\nProvides the superscript element.\nto_rst\nReturn a string to enable converting the element to an RST format.\nReturn a string to enable converting the element to an RST format.\nfrom src.pyconverter.xml2py.ast_tree import SuperScript"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/SuperScript",
        "href": "api/src/pyconverter/xml2py/ast_tree/SuperScript.html#overview",
        "title": "SuperScript > Overview",
        "section": "Overview",
        "text": "to_rst\nReturn a string to enable converting the element to an RST format."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/SuperScript",
        "href": "api/src/pyconverter/xml2py/ast_tree/SuperScript.html#import-detail",
        "title": "SuperScript > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import SuperScript"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/SuperScript",
        "href": "api/src/pyconverter/xml2py/ast_tree/SuperScript.html#method-detail",
        "title": "SuperScript > Method detail",
        "section": "Method detail",
        "text": "Return a string to enable converting the element to an RST format."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/version_variables/Autogenerateddirectory",
        "href": "api/src/pyconverter/xml2py/version_variables/Autogenerateddirectory.html#autogenerateddirectory",
        "title": "Autogenerateddirectory",
        "section": "Autogenerateddirectory",
        "text": "Contains the version variables of the XML documentation.\nautogenerated_directory_name\nAutogenerated directory name.\nversion\nVersion of the XML documentation.\nbase_url\nBase URL of the HTML documentation.\ncmd_base_url\nCommand base URL.\nAutogenerated directory name.\nVersion of the XML documentation.\nBase URL of the HTML documentation.\nCommand base URL.\nfrom src.pyconverter.xml2py.version_variables import Autogenerateddirectory"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/version_variables/Autogenerateddirectory",
        "href": "api/src/pyconverter/xml2py/version_variables/Autogenerateddirectory.html#overview",
        "title": "Autogenerateddirectory > Overview",
        "section": "Overview",
        "text": "autogenerated_directory_name\nAutogenerated directory name.\nversion\nVersion of the XML documentation.\nbase_url\nBase URL of the HTML documentation.\ncmd_base_url\nCommand base URL."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/version_variables/Autogenerateddirectory",
        "href": "api/src/pyconverter/xml2py/version_variables/Autogenerateddirectory.html#import-detail",
        "title": "Autogenerateddirectory > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.version_variables import Autogenerateddirectory"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/version_variables/Autogenerateddirectory",
        "href": "api/src/pyconverter/xml2py/version_variables/Autogenerateddirectory.html#property-detail",
        "title": "Autogenerateddirectory > Property detail",
        "section": "Property detail",
        "text": "Autogenerated directory name.\nVersion of the XML documentation.\nBase URL of the HTML documentation.\nCommand base URL."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refentrytitle",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refentrytitle.html#refentrytitle",
        "title": "Refentrytitle",
        "section": "Refentrytitle",
        "text": "Bases: Element\nProvides the title of the reference entry.\n__repr__\nfrom src.pyconverter.xml2py.ast_tree import Refentrytitle"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refentrytitle",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refentrytitle.html#overview",
        "title": "Refentrytitle > Overview",
        "section": "Overview",
        "text": "__repr__"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refentrytitle",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refentrytitle.html#import-detail",
        "title": "Refentrytitle > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import Refentrytitle"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refentrytitle",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refentrytitle.html#method-detail",
        "title": "Refentrytitle > Method detail",
        "section": "Method detail",
        "text": ""
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/GuiIcon",
        "href": "api/src/pyconverter/xml2py/ast_tree/GuiIcon.html#guiicon",
        "title": "GuiIcon",
        "section": "GuiIcon",
        "text": "Bases: Element\nProvides the base element.\nfrom src.pyconverter.xml2py.ast_tree import GuiIcon"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/GuiIcon",
        "href": "api/src/pyconverter/xml2py/ast_tree/GuiIcon.html#import-detail",
        "title": "GuiIcon > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import GuiIcon"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Math",
        "href": "api/src/pyconverter/xml2py/ast_tree/Math.html#math",
        "title": "Math",
        "section": "Math",
        "text": "Bases: _Math\nProvides the math element.\nto_rst\nReturn a string to enable converting the element to an RST format.\nReturn a string to enable converting the element to an RST format.\nfrom src.pyconverter.xml2py.ast_tree import Math"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Math",
        "href": "api/src/pyconverter/xml2py/ast_tree/Math.html#overview",
        "title": "Math > Overview",
        "section": "Overview",
        "text": "to_rst\nReturn a string to enable converting the element to an RST format."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Math",
        "href": "api/src/pyconverter/xml2py/ast_tree/Math.html#import-detail",
        "title": "Math > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import Math"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Math",
        "href": "api/src/pyconverter/xml2py/ast_tree/Math.html#method-detail",
        "title": "Math > Method detail",
        "section": "Method detail",
        "text": "Return a string to enable converting the element to an RST format."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/TBody",
        "href": "api/src/pyconverter/xml2py/ast_tree/TBody.html#tbody",
        "title": "TBody",
        "section": "TBody",
        "text": "Bases: Element\nProvides the tbody element.\nto_rst\nReturn a list to enable converting the element to an RST format.\nrows\nReturn all the row elements found in the TBody element.\nReturn all the row elements found in the TBody element.\nReturn a list to enable converting the element to an RST format.\nfrom src.pyconverter.xml2py.ast_tree import TBody"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/TBody",
        "href": "api/src/pyconverter/xml2py/ast_tree/TBody.html#overview",
        "title": "TBody > Overview",
        "section": "Overview",
        "text": "to_rst\nReturn a list to enable converting the element to an RST format.\nrows\nReturn all the row elements found in the TBody element."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/TBody",
        "href": "api/src/pyconverter/xml2py/ast_tree/TBody.html#import-detail",
        "title": "TBody > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import TBody"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/TBody",
        "href": "api/src/pyconverter/xml2py/ast_tree/TBody.html#property-detail",
        "title": "TBody > Property detail",
        "section": "Property detail",
        "text": "Return all the row elements found in the TBody element."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/TBody",
        "href": "api/src/pyconverter/xml2py/ast_tree/TBody.html#method-detail",
        "title": "TBody > Method detail",
        "section": "Method detail",
        "text": "Return a list to enable converting the element to an RST format."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refsect1",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refsect1.html#refsect1",
        "title": "Refsect1",
        "section": "Refsect1",
        "text": "Bases: Element\nProvides the base element.\nfrom src.pyconverter.xml2py.ast_tree import Refsect1"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refsect1",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refsect1.html#import-detail",
        "title": "Refsect1 > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import Refsect1"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Markup",
        "href": "api/src/pyconverter/xml2py/ast_tree/Markup.html#markup",
        "title": "Markup",
        "section": "Markup",
        "text": "Bases: Element\nProvides the base element.\nfrom src.pyconverter.xml2py.ast_tree import Markup"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Markup",
        "href": "api/src/pyconverter/xml2py/ast_tree/Markup.html#import-detail",
        "title": "Markup > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import Markup"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Imageobject",
        "href": "api/src/pyconverter/xml2py/ast_tree/Imageobject.html#imageobject",
        "title": "Imageobject",
        "section": "Imageobject",
        "text": "Bases: Element\nProvides the base element.\nfrom src.pyconverter.xml2py.ast_tree import Imageobject"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Imageobject",
        "href": "api/src/pyconverter/xml2py/ast_tree/Imageobject.html#import-detail",
        "title": "Imageobject > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import Imageobject"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Figure",
        "href": "api/src/pyconverter/xml2py/ast_tree/Figure.html#figure",
        "title": "Figure",
        "section": "Figure",
        "text": "Bases: Element\nProvides the figure element.\nto_rst\nReturn a string to enable converting the element to an RST format.\ntitle\nFirst title element found in the figure element.\ngraphic\nFirst graphic element found in the figure element.\nFirst title element found in the figure element.\nFirst graphic element found in the figure element.\nReturn a string to enable converting the element to an RST format.\nfrom src.pyconverter.xml2py.ast_tree import Figure"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Figure",
        "href": "api/src/pyconverter/xml2py/ast_tree/Figure.html#overview",
        "title": "Figure > Overview",
        "section": "Overview",
        "text": "to_rst\nReturn a string to enable converting the element to an RST format.\ntitle\nFirst title element found in the figure element.\ngraphic\nFirst graphic element found in the figure element."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Figure",
        "href": "api/src/pyconverter/xml2py/ast_tree/Figure.html#import-detail",
        "title": "Figure > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import Figure"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Figure",
        "href": "api/src/pyconverter/xml2py/ast_tree/Figure.html#property-detail",
        "title": "Figure > Property detail",
        "section": "Property detail",
        "text": "First title element found in the figure element.\nFirst graphic element found in the figure element."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Figure",
        "href": "api/src/pyconverter/xml2py/ast_tree/Figure.html#method-detail",
        "title": "Figure > Method detail",
        "section": "Method detail",
        "text": "Return a string to enable converting the element to an RST format."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/InformalFigure",
        "href": "api/src/pyconverter/xml2py/ast_tree/InformalFigure.html#informalfigure",
        "title": "InformalFigure",
        "section": "InformalFigure",
        "text": "Bases: Element\nProvides the base element.\nfrom src.pyconverter.xml2py.ast_tree import InformalFigure"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/InformalFigure",
        "href": "api/src/pyconverter/xml2py/ast_tree/InformalFigure.html#import-detail",
        "title": "InformalFigure > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import InformalFigure"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refsect3",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refsect3.html#refsect3",
        "title": "Refsect3",
        "section": "Refsect3",
        "text": "Bases: Element\nProvides the base element.\nfrom src.pyconverter.xml2py.ast_tree import Refsect3"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refsect3",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refsect3.html#import-detail",
        "title": "Refsect3 > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import Refsect3"
    },
    {
        "objectID": "user_guide/source_code",
        "href": "user_guide/source_code.html#source-code-generation",
        "title": "Source code generation",
        "section": "Source code generation",
        "text": "Source code is automatically generated from the name of the commands\nand the parameters defined in the documentation.\nHere are the initial command and then the default Python code that\nthis command generates:\nThe converter can handle code generation for functions that require a\ncustomized code. To specify the folder containing these files, you must\nbe specified the -f or --func-path arguments in the command for\ngenerating the code:\nIn this configuration, the provided code is used for the conversion.\nAdditionally, any Returns and Examples sections are taken\ninto account and added to the Python docstring:\nACEL,ACEL_X,ACEL_Y,ACEL_Z\ndef acel(self, acel_x=\"\", acel_y=\"\", acel_z=\"\", **kwargs):\n    command = f\"ACEL,{acel_x},{acel_y},{acel_z}\"\n    return self.run(command, **kwargs)\npyconverter-xml2py package -x XML_directory_path -f customized_function_directory_path\nL2ANG,NL1,NL2,ANG1,ANG2,PHIT1,PHIT2\nimport parse\n\n\ndef l2ang(self, nl1=\"\", nl2=\"\", ang1=\"\", ang2=\"\", phit1=\"\", phit2=\"\", **kwargs) -> int:\n    \"\"\"Generates a line at an angle with two existing lines.\n\n    APDL Command: L2ANG\n\n    Generates a straight line (PHIT1-PHIT2) at an angle (ANG1)\n    with an existing line NL1 (P1-P2) and which is also at an\n    angle (ANG2) with another existing line NL2 (P3-P4).  If the\n    angles are zero the generated line is tangent to the two\n    lines.  The PHIT1 and PHIT2 locations on the lines are\n    automatically calculated.  Line P1-P2 becomes P1-PHIT1, P3-P4\n    becomes P3-PHIT2, and new lines PHIT1-P2, PHIT2-P4, and\n    PHIT1-PHIT2 are generated.  Line divisions are set to zero\n    (use LESIZE, etc. to modify).\n\n    Parameters\n    ----------\n    nl1\n        Number of the first line to be hit (touched by the end of\n        the new line).  If negative, assume P1 (see below) is the\n        second keypoint of the line instead of the first.\n\n    nl2\n        Number of the second line to be hit.  If negative, assume\n        P3 is the second keypoint of the line instead of the\n        first.\n\n    ang1\n        Angle of intersection (usually zero or 180) of generated\n        line with tangent to first line.\n\n    ang2\n        Angle of intersection (usually zero or 180) of generated\n        line with tangent to second line.\n\n    phit1\n        Number to be assigned to keypoint generated at hit\n        location on first line (defaults to lowest available\n        keypoint number [NUMSTR]).\n\n    phit2\n        Number to be assigned to keypoint generated at hit\n        location on second line (defaults to lowest available\n        keypoint number [NUMSTR]).\n\n    Returns\n    -------\n    int\n        Line number of the generated line.\n\n    Examples\n    --------\n    Create two circles and join them with a line.\n\n    >>> k0 = mapdl.k(\"\", 0, 0, 0)\n    >>> k1 = mapdl.k(\"\", 0, 0, 1)\n    >>> k2 = mapdl.k(\"\", 0, 0, 0.5)\n    >>> carc0 = mapdl.circle(k0, 1, k1)\n    >>> carc1 = mapdl.circle(k2, 1, k1)\n    >>> lnum = mapdl.l2ang(carc0[0], carc1[0], 90, 90)\n    >>> lnum\n    9\n\n    \"\"\"\n    command = f\"L2ANG,{nl1},{nl2},{ang1},{ang2},{phit1},{phit2}\"\n    msg = self.run(command, **kwargs)\n    if msg:\n        return parse.parse_line_no(msg)\nimport parse\n\n\ndef l2ang(self, nl1=\"\", nl2=\"\", ang1=\"\", ang2=\"\", phit1=\"\", phit2=\"\", **kwargs):\n    r\"\"\"Generates a line at an angle with two existing lines.\n\n    Mechanical APDL Command: L2ANG <https://ansyshelp.ansys.com/Views/Secured/corp/v231/en//ans_cmd/Hlp_C_L2ANG.html>`_\n\n    Parameters\n    ----------\n    nl1: str\n        Number of the first line to be hit (touched by the end of the new line). If negative, assume ``P1`` (see below) is the second keypoint of the line instead of the first\n    nl2: str\n        Number of the second line to be hit. If negative, assume ``P3`` is the second keypoint of the line instead of the first.\n\n    ang1: str\n        Angle of intersection (usually zero or 180) of generated line with tangent to first line.\n\n    ang2: str\n        Angle of intersection (usually zero or 180) of generated line with tangent to second line.\n\n    phit1: str\n        Number to be assigned to keypoint generated at hit location on first line (defaults to lowest available keypoint number ( :ref:`numstr` )).\n\n    phit2: str\n        Number to be assigned to keypoint generated at hit location on second line (defaults to lowest available keypoint number ( :ref:`numstr` )).\n\n    Returns\n    -------\n    int\n    Line number of the generated line.\n\n    Notes\n    -----\n    Generates a straight line ( ``PHIT1`` - ``PHIT2`` ) at an angle ( ``ANG1`` ) with an existing line ``NL1`` ( ``P1`` - ``P2`` ) and which is also at an angle ( ``ANG2`` ) with another existing line ``NL2`` ( ``P3`` - ``P4`` ). If the angles are zero the generated line is tangent to the two lines. The ``PHIT1`` and ``PHIT2`` locations on the lines are automatically calculated. Line ``P1`` - ``P2`` becomes ``P1`` - ``PHIT1``, ``P3`` - ``P4`` becomes ``P3`` - ``PHIT2``, and new lines ``PHIT1`` - ``P2``, ``PHIT2`` - ``P4``, and ``PHIT1`` - ``PHIT2`` are generated. Line divisions are set to zero (use :ref:`lesize`, etc. to modify).\n\n    Examples\n    --------\n    Create two circles and join them with a line.\n\n    >>> k0 = mapdl.k(\"\", 0, 0, 0)\n    >>> k1 = mapdl.k(\"\", 0, 0, 1)\n    >>> k2 = mapdl.k(\"\", 0, 0, 0.5)\n    >>> carc0 = mapdl.circle(k0, 1, k1)\n    >>> carc1 = mapdl.circle(k2, 1, k1)\n    >>> lnum = mapdl.l2ang(carc0[0], carc1[0], 90, 90)\n    >>> lnum\n    9\n    \"\"\"\n    command = f\"L2ANG,{nl1},{nl2},{ang1},{ang2},{phit1},{phit2}\"\n    msg = self.run(command, **kwargs)\n    if msg:\n        return parse.parse_line_no(msg)"
    },
    {
        "objectID": "user_guide/source_code",
        "href": "user_guide/source_code.html#customized-functions",
        "title": "Source code generation > Customized functions",
        "section": "Customized functions",
        "text": "The converter can handle code generation for functions that require a\ncustomized code. To specify the folder containing these files, you must\nbe specified the -f or --func-path arguments in the command for\ngenerating the code:\nIn this configuration, the provided code is used for the conversion.\nAdditionally, any Returns and Examples sections are taken\ninto account and added to the Python docstring:\npyconverter-xml2py package -x XML_directory_path -f customized_function_directory_path\nL2ANG,NL1,NL2,ANG1,ANG2,PHIT1,PHIT2\nimport parse\n\n\ndef l2ang(self, nl1=\"\", nl2=\"\", ang1=\"\", ang2=\"\", phit1=\"\", phit2=\"\", **kwargs) -> int:\n    \"\"\"Generates a line at an angle with two existing lines.\n\n    APDL Command: L2ANG\n\n    Generates a straight line (PHIT1-PHIT2) at an angle (ANG1)\n    with an existing line NL1 (P1-P2) and which is also at an\n    angle (ANG2) with another existing line NL2 (P3-P4).  If the\n    angles are zero the generated line is tangent to the two\n    lines.  The PHIT1 and PHIT2 locations on the lines are\n    automatically calculated.  Line P1-P2 becomes P1-PHIT1, P3-P4\n    becomes P3-PHIT2, and new lines PHIT1-P2, PHIT2-P4, and\n    PHIT1-PHIT2 are generated.  Line divisions are set to zero\n    (use LESIZE, etc. to modify).\n\n    Parameters\n    ----------\n    nl1\n        Number of the first line to be hit (touched by the end of\n        the new line).  If negative, assume P1 (see below) is the\n        second keypoint of the line instead of the first.\n\n    nl2\n        Number of the second line to be hit.  If negative, assume\n        P3 is the second keypoint of the line instead of the\n        first.\n\n    ang1\n        Angle of intersection (usually zero or 180) of generated\n        line with tangent to first line.\n\n    ang2\n        Angle of intersection (usually zero or 180) of generated\n        line with tangent to second line.\n\n    phit1\n        Number to be assigned to keypoint generated at hit\n        location on first line (defaults to lowest available\n        keypoint number [NUMSTR]).\n\n    phit2\n        Number to be assigned to keypoint generated at hit\n        location on second line (defaults to lowest available\n        keypoint number [NUMSTR]).\n\n    Returns\n    -------\n    int\n        Line number of the generated line.\n\n    Examples\n    --------\n    Create two circles and join them with a line.\n\n    >>> k0 = mapdl.k(\"\", 0, 0, 0)\n    >>> k1 = mapdl.k(\"\", 0, 0, 1)\n    >>> k2 = mapdl.k(\"\", 0, 0, 0.5)\n    >>> carc0 = mapdl.circle(k0, 1, k1)\n    >>> carc1 = mapdl.circle(k2, 1, k1)\n    >>> lnum = mapdl.l2ang(carc0[0], carc1[0], 90, 90)\n    >>> lnum\n    9\n\n    \"\"\"\n    command = f\"L2ANG,{nl1},{nl2},{ang1},{ang2},{phit1},{phit2}\"\n    msg = self.run(command, **kwargs)\n    if msg:\n        return parse.parse_line_no(msg)\nimport parse\n\n\ndef l2ang(self, nl1=\"\", nl2=\"\", ang1=\"\", ang2=\"\", phit1=\"\", phit2=\"\", **kwargs):\n    r\"\"\"Generates a line at an angle with two existing lines.\n\n    Mechanical APDL Command: L2ANG <https://ansyshelp.ansys.com/Views/Secured/corp/v231/en//ans_cmd/Hlp_C_L2ANG.html>`_\n\n    Parameters\n    ----------\n    nl1: str\n        Number of the first line to be hit (touched by the end of the new line). If negative, assume ``P1`` (see below) is the second keypoint of the line instead of the first\n    nl2: str\n        Number of the second line to be hit. If negative, assume ``P3`` is the second keypoint of the line instead of the first.\n\n    ang1: str\n        Angle of intersection (usually zero or 180) of generated line with tangent to first line.\n\n    ang2: str\n        Angle of intersection (usually zero or 180) of generated line with tangent to second line.\n\n    phit1: str\n        Number to be assigned to keypoint generated at hit location on first line (defaults to lowest available keypoint number ( :ref:`numstr` )).\n\n    phit2: str\n        Number to be assigned to keypoint generated at hit location on second line (defaults to lowest available keypoint number ( :ref:`numstr` )).\n\n    Returns\n    -------\n    int\n    Line number of the generated line.\n\n    Notes\n    -----\n    Generates a straight line ( ``PHIT1`` - ``PHIT2`` ) at an angle ( ``ANG1`` ) with an existing line ``NL1`` ( ``P1`` - ``P2`` ) and which is also at an angle ( ``ANG2`` ) with another existing line ``NL2`` ( ``P3`` - ``P4`` ). If the angles are zero the generated line is tangent to the two lines. The ``PHIT1`` and ``PHIT2`` locations on the lines are automatically calculated. Line ``P1`` - ``P2`` becomes ``P1`` - ``PHIT1``, ``P3`` - ``P4`` becomes ``P3`` - ``PHIT2``, and new lines ``PHIT1`` - ``P2``, ``PHIT2`` - ``P4``, and ``PHIT1`` - ``PHIT2`` are generated. Line divisions are set to zero (use :ref:`lesize`, etc. to modify).\n\n    Examples\n    --------\n    Create two circles and join them with a line.\n\n    >>> k0 = mapdl.k(\"\", 0, 0, 0)\n    >>> k1 = mapdl.k(\"\", 0, 0, 1)\n    >>> k2 = mapdl.k(\"\", 0, 0, 0.5)\n    >>> carc0 = mapdl.circle(k0, 1, k1)\n    >>> carc1 = mapdl.circle(k2, 1, k1)\n    >>> lnum = mapdl.l2ang(carc0[0], carc1[0], 90, 90)\n    >>> lnum\n    9\n    \"\"\"\n    command = f\"L2ANG,{nl1},{nl2},{ang1},{ang2},{phit1},{phit2}\"\n    msg = self.run(command, **kwargs)\n    if msg:\n        return parse.parse_line_no(msg)"
    },
    {
        "objectID": "index",
        "href": "index.html#pyconverter-xml2py",
        "title": "PyConverter-XML2Py",
        "section": "PyConverter-XML2Py",
        "text": "PyConverter-XML2Py is a Python library for converting technical Docbook XML documentation into\nPython source code so that Sphinx documentation can be generated.\n<svg version=\"4.0.0.63c5cb3\" width=\"48.0px\" height=\"48.0px\" class=\"sd-material-icon sd-material-icon-start\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><rect fill=\"none\" height=\"24\" width=\"24\"></rect><path d=\"M14.59,7.41L18.17,11H6v2h12.17l-3.59,3.59L16,18l6-6l-6-6L14.59,7.41z M2,6v12h2V6H2z\"></path></svg>\nExplains how to start using PyConverter-XML2Py.\n   Getting started\n<svg version=\"4.0.0.63c5cb3\" width=\"48.0px\" height=\"48.0px\" class=\"sd-material-icon sd-material-icon-book\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M0 0h24v24H0z\" fill=\"none\"></path><path d=\"M18 2H6c-1.1 0-2 .9-2 2v16c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM6 4h5v8l-2.5-1.5L6 12V4z\"></path></svg>\nPresents in-depth information on the\nkey concepts of PyConverter-XML2Py.\n   User guide\n<svg version=\"4.0.0.63c5cb3\" width=\"48.0px\" height=\"48.0px\" class=\"sd-material-icon sd-material-icon-code\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M0 0h24v24H0V0z\" fill=\"none\"></path><path d=\"M9.4 16.6L4.8 12l4.6-4.6L8 6l-6 6 6 6 1.4-1.4zm5.2 0l4.6-4.6-4.6-4.6L16 6l6 6-6 6-1.4-1.4z\"></path></svg>\nDescribes members of the the PyConverter-XML2Py API.\n   API reference\n<svg version=\"4.0.0.63c5cb3\" width=\"48.0px\" height=\"48.0px\" class=\"sd-material-icon sd-material-icon-people\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M0 0h24v24H0z\" fill=\"none\"></path><path d=\"M16 11c1.66 0 2.99-1.34 2.99-3S17.66 5 16 5c-1.66 0-3 1.34-3 3s1.34 3 3 3zm-8 0c1.66 0 2.99-1.34 2.99-3S9.66 5 8 5C6.34 5 5 6.34 5 8s1.34 3 3 3zm0 2c-2.33 0-7 1.17-7 3.5V19h14v-2.5c0-2.33-4.67-3.5-7-3.5zm8 0c-.29 0-.62.02-.97.05 1.16.84 1.97 1.97 1.97 3.45V19h6v-2.5c0-2.33-4.67-3.5-7-3.5z\"></path></svg>\nProvides guidelines for contributing to the\ncodebase and documentation.\n   Contribute"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Command",
        "href": "api/src/pyconverter/xml2py/ast_tree/Command.html#command",
        "title": "Command",
        "section": "Command",
        "text": "Bases: Element\nProvides the command element.\nto_rst\nReturn a string to enable converting the element to an RST format.\ncommand\nName of the command.\ntail_no_args\nTail of the element after removing all its arguments.\nhas_args\nReturn whether the element has arguments.\nargs\nAny terms immediately following the command.\npy_args\nString containing the arguments of the element.\npy_cmd\nPythonic name of the command.\nsphinx_cmd\nString to refer to the Python command with Sphinx.\n__repr__\nName of the command.\nTail of the element after removing all its arguments.\nReturn whether the element has arguments.\nAny terms immediately following the command.\nString containing the arguments of the element.\nPythonic name of the command.\nString to refer to the Python command with Sphinx.\nReturn a string to enable converting the element to an RST format.\nfrom src.pyconverter.xml2py.ast_tree import Command"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Command",
        "href": "api/src/pyconverter/xml2py/ast_tree/Command.html#overview",
        "title": "Command > Overview",
        "section": "Overview",
        "text": "to_rst\nReturn a string to enable converting the element to an RST format.\ncommand\nName of the command.\ntail_no_args\nTail of the element after removing all its arguments.\nhas_args\nReturn whether the element has arguments.\nargs\nAny terms immediately following the command.\npy_args\nString containing the arguments of the element.\npy_cmd\nPythonic name of the command.\nsphinx_cmd\nString to refer to the Python command with Sphinx.\n__repr__"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Command",
        "href": "api/src/pyconverter/xml2py/ast_tree/Command.html#import-detail",
        "title": "Command > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import Command"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Command",
        "href": "api/src/pyconverter/xml2py/ast_tree/Command.html#property-detail",
        "title": "Command > Property detail",
        "section": "Property detail",
        "text": "Name of the command.\nTail of the element after removing all its arguments.\nReturn whether the element has arguments.\nAny terms immediately following the command.\nString containing the arguments of the element.\nPythonic name of the command.\nString to refer to the Python command with Sphinx."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Command",
        "href": "api/src/pyconverter/xml2py/ast_tree/Command.html#method-detail",
        "title": "Command > Method detail",
        "section": "Method detail",
        "text": "Return a string to enable converting the element to an RST format."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/version_variables/index",
        "href": "api/src/pyconverter/xml2py/version_variables/index.html#the-version_variablespy-module",
        "title": "The version_variables.py module",
        "section": "The version_variables.py module",
        "text": "Autogenerateddirectory\nContains the version variables of the XML documentation."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/version_variables/index",
        "href": "api/src/pyconverter/xml2py/version_variables/index.html#summary",
        "title": "The version_variables.py module > Summary",
        "section": "Summary",
        "text": "Autogenerateddirectory\nContains the version variables of the XML documentation."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/GuiMenuItem",
        "href": "api/src/pyconverter/xml2py/ast_tree/GuiMenuItem.html#guimenuitem",
        "title": "GuiMenuItem",
        "section": "GuiMenuItem",
        "text": "Bases: Element\nProvides the GUI menu item element.\nfrom src.pyconverter.xml2py.ast_tree import GuiMenuItem"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/GuiMenuItem",
        "href": "api/src/pyconverter/xml2py/ast_tree/GuiMenuItem.html#import-detail",
        "title": "GuiMenuItem > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import GuiMenuItem"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Paragraph",
        "href": "api/src/pyconverter/xml2py/ast_tree/Paragraph.html#paragraph",
        "title": "Paragraph",
        "section": "Paragraph",
        "text": "Bases: Element\nProvides the paragraph element.\nto_rst\nReturn a string to enable converting the element to an RST format.\n__repr__\nReturn a string to enable converting the element to an RST format.\nfrom src.pyconverter.xml2py.ast_tree import Paragraph"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Paragraph",
        "href": "api/src/pyconverter/xml2py/ast_tree/Paragraph.html#overview",
        "title": "Paragraph > Overview",
        "section": "Overview",
        "text": "to_rst\nReturn a string to enable converting the element to an RST format.\n__repr__"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Paragraph",
        "href": "api/src/pyconverter/xml2py/ast_tree/Paragraph.html#import-detail",
        "title": "Paragraph > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import Paragraph"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Paragraph",
        "href": "api/src/pyconverter/xml2py/ast_tree/Paragraph.html#method-detail",
        "title": "Paragraph > Method detail",
        "section": "Method detail",
        "text": "Return a string to enable converting the element to an RST format."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/cli/index",
        "href": "api/src/pyconverter/xml2py/cli/index.html#the-clipy-module",
        "title": "The cli.py module",
        "section": "The cli.py module",
        "text": "create_package\nCreate Python package based on a XML documentation.\nmain\nA Python wrapper to convert XML documentation into Python source code\nversion\nDisplay current version.\npackage\nCreate a Python package from your XML documentation.\nCommand Line Interface for PyConverter-XML2Py.\nCreate Python package based on a XML documentation.\nPath to the directory that contains the XML documentation to convert.\nPath to the directory where you want to create the autogenerated package.\nThe default value is the current working directory.\nPath for the template to use. If no path is provided, the default template is used.\nThe default value is the _package directory accessible in the\nPyConverter-XML2Py GitHub repository.\nPath to the directory that contains the functions that need to be customized.\nThe default value is None.\nWhether to run black CLI on the autogenerated package source code.\nThe default value is False.\nMaximum length of the generated docstrings.\nThe default is 100.\nA Python wrapper to convert XML documentation into Python source code\nwith its related Sphinx documentation.\nDisplay current version.\nCreate a Python package from your XML documentation."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/cli/index",
        "href": "api/src/pyconverter/xml2py/cli/index.html#summary",
        "title": "The cli.py module > Summary",
        "section": "Summary",
        "text": "create_package\nCreate Python package based on a XML documentation.\nmain\nA Python wrapper to convert XML documentation into Python source code\nversion\nDisplay current version.\npackage\nCreate a Python package from your XML documentation."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/cli/index",
        "href": "api/src/pyconverter/xml2py/cli/index.html#description",
        "title": "The cli.py module > Description",
        "section": "Description",
        "text": "Command Line Interface for PyConverter-XML2Py."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/cli/index",
        "href": "api/src/pyconverter/xml2py/cli/index.html#module-detail",
        "title": "The cli.py module > Module detail",
        "section": "Module detail",
        "text": "Create Python package based on a XML documentation.\nPath to the directory that contains the XML documentation to convert.\nPath to the directory where you want to create the autogenerated package.\nThe default value is the current working directory.\nPath for the template to use. If no path is provided, the default template is used.\nThe default value is the _package directory accessible in the\nPyConverter-XML2Py GitHub repository.\nPath to the directory that contains the functions that need to be customized.\nThe default value is None.\nWhether to run black CLI on the autogenerated package source code.\nThe default value is False.\nMaximum length of the generated docstrings.\nThe default is 100.\nA Python wrapper to convert XML documentation into Python source code\nwith its related Sphinx documentation.\nDisplay current version.\nCreate a Python package from your XML documentation."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/LiteralLayout",
        "href": "api/src/pyconverter/xml2py/ast_tree/LiteralLayout.html#literallayout",
        "title": "LiteralLayout",
        "section": "LiteralLayout",
        "text": "Bases: Element\nProvides the base element.\nfrom src.pyconverter.xml2py.ast_tree import LiteralLayout"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/LiteralLayout",
        "href": "api/src/pyconverter/xml2py/ast_tree/LiteralLayout.html#import-detail",
        "title": "LiteralLayout > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import LiteralLayout"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/OLink",
        "href": "api/src/pyconverter/xml2py/ast_tree/OLink.html#olink",
        "title": "OLink",
        "section": "OLink",
        "text": "Bases: Element\nProvides the external link element.\nto_rst\nReturn a string to enable converting the element to an RST format.\ntargetptr\nValue for the targetptr contained in the OLink element.\ntargetdoc\nValue for the targetdoc parameter contained in the OLink element.\nValue for the targetptr contained in the OLink element.\nValue for the targetdoc parameter contained in the OLink element.\nReturn a string to enable converting the element to an RST format.\nfrom src.pyconverter.xml2py.ast_tree import OLink"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/OLink",
        "href": "api/src/pyconverter/xml2py/ast_tree/OLink.html#overview",
        "title": "OLink > Overview",
        "section": "Overview",
        "text": "to_rst\nReturn a string to enable converting the element to an RST format.\ntargetptr\nValue for the targetptr contained in the OLink element.\ntargetdoc\nValue for the targetdoc parameter contained in the OLink element."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/OLink",
        "href": "api/src/pyconverter/xml2py/ast_tree/OLink.html#import-detail",
        "title": "OLink > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import OLink"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/OLink",
        "href": "api/src/pyconverter/xml2py/ast_tree/OLink.html#property-detail",
        "title": "OLink > Property detail",
        "section": "Property detail",
        "text": "Value for the targetptr contained in the OLink element.\nValue for the targetdoc parameter contained in the OLink element."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/OLink",
        "href": "api/src/pyconverter/xml2py/ast_tree/OLink.html#method-detail",
        "title": "OLink > Method detail",
        "section": "Method detail",
        "text": "Return a string to enable converting the element to an RST format."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Mediaobject",
        "href": "api/src/pyconverter/xml2py/ast_tree/Mediaobject.html#mediaobject",
        "title": "Mediaobject",
        "section": "Mediaobject",
        "text": "Bases: Element\nProvides the base element.\nfrom src.pyconverter.xml2py.ast_tree import Mediaobject"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Mediaobject",
        "href": "api/src/pyconverter/xml2py/ast_tree/Mediaobject.html#import-detail",
        "title": "Mediaobject > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import Mediaobject"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/CiteTitle",
        "href": "api/src/pyconverter/xml2py/ast_tree/CiteTitle.html#citetitle",
        "title": "CiteTitle",
        "section": "CiteTitle",
        "text": "Bases: Element\nProvides the base element.\nfrom src.pyconverter.xml2py.ast_tree import CiteTitle"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/CiteTitle",
        "href": "api/src/pyconverter/xml2py/ast_tree/CiteTitle.html#import-detail",
        "title": "CiteTitle > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import CiteTitle"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ComputerOutput",
        "href": "api/src/pyconverter/xml2py/ast_tree/ComputerOutput.html#computeroutput",
        "title": "ComputerOutput",
        "section": "ComputerOutput",
        "text": "Bases: Element\nProvides the computer output element.\nto_rst\nReturn a string to enable converting the element to an RST format.\nReturn a string to enable converting the element to an RST format.\nfrom src.pyconverter.xml2py.ast_tree import ComputerOutput"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ComputerOutput",
        "href": "api/src/pyconverter/xml2py/ast_tree/ComputerOutput.html#overview",
        "title": "ComputerOutput > Overview",
        "section": "Overview",
        "text": "to_rst\nReturn a string to enable converting the element to an RST format."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ComputerOutput",
        "href": "api/src/pyconverter/xml2py/ast_tree/ComputerOutput.html#import-detail",
        "title": "ComputerOutput > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import ComputerOutput"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ComputerOutput",
        "href": "api/src/pyconverter/xml2py/ast_tree/ComputerOutput.html#method-detail",
        "title": "ComputerOutput > Method detail",
        "section": "Method detail",
        "text": "Return a string to enable converting the element to an RST format."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Envar",
        "href": "api/src/pyconverter/xml2py/ast_tree/Envar.html#envar",
        "title": "Envar",
        "section": "Envar",
        "text": "Bases: Element\nProvides the base element.\nfrom src.pyconverter.xml2py.ast_tree import Envar"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Envar",
        "href": "api/src/pyconverter/xml2py/ast_tree/Envar.html#import-detail",
        "title": "Envar > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import Envar"
    },
    {
        "objectID": "user_guide/index",
        "href": "user_guide/index.html#user-guide",
        "title": "User guide",
        "section": "User guide",
        "text": "This section provides some guidelines for using PyConverter-XML2Py.\nYou can modify each step as needed to convert your own Docbook XML documentation.\nThe conversion is based on a predefined XML directory format that you\nshould follow:\nThe _package directory is the template that the autogenerated package\nfollows.\nOnce the XML_directory is correctly organized, you can use this command\nto run the converter:\nIf you need to customize some functions, you can specify the path containing the\nPython files:\nFor more information, see ref_source_code.\nAfter the converter runs, you can generate Sphinx documentation. This code renders\nthe documentation as HTML from Windows:\nThe Sphinx documentation is contained in the autogenerated package\ndirectory by default. This diagram presents the format of the\npackage directory:\npyconverter-xml2py package -x XML_directory_path\npyconverter-xml2py package -x XML_directory_path -f customized_function_directory_path\ncd package\npip install -e .[doc] # The use of a virtual environment is recommended.\n.\\doc\\make.bat html"
    },
    {
        "objectID": "user_guide/index",
        "href": "user_guide/index.html#predefined-format",
        "title": "User guide > Predefined format",
        "section": "Predefined format",
        "text": "The conversion is based on a predefined XML directory format that you\nshould follow:"
    },
    {
        "objectID": "user_guide/index",
        "href": "user_guide/index.html#template-directory",
        "title": "User guide > Template directory",
        "section": "Template directory",
        "text": "The _package directory is the template that the autogenerated package\nfollows."
    },
    {
        "objectID": "user_guide/index",
        "href": "user_guide/index.html#convert-an-xml-directory",
        "title": "User guide > Convert an XML directory",
        "section": "Convert an XML directory",
        "text": "Once the XML_directory is correctly organized, you can use this command\nto run the converter:\nIf you need to customize some functions, you can specify the path containing the\nPython files:\nFor more information, see ref_source_code.\nAfter the converter runs, you can generate Sphinx documentation. This code renders\nthe documentation as HTML from Windows:\npyconverter-xml2py package -x XML_directory_path\npyconverter-xml2py package -x XML_directory_path -f customized_function_directory_path\ncd package\npip install -e .[doc] # The use of a virtual environment is recommended.\n.\\doc\\make.bat html"
    },
    {
        "objectID": "user_guide/index",
        "href": "user_guide/index.html#autogenerated-package",
        "title": "User guide > Autogenerated package",
        "section": "Autogenerated package",
        "text": "The Sphinx documentation is contained in the autogenerated package\ndirectory by default. This diagram presents the format of the\npackage directory:"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Graphic",
        "href": "api/src/pyconverter/xml2py/ast_tree/Graphic.html#graphic",
        "title": "Graphic",
        "section": "Graphic",
        "text": "Bases: Element\nProvides the graphic element.\nto_rst\nReturn a string to enable converting the element to an RST format.\nentityref\nValue of the entityref parameter contained in the graphic element.\nValue of the entityref parameter contained in the graphic element.\nReturn a string to enable converting the element to an RST format.\nfrom src.pyconverter.xml2py.ast_tree import Graphic"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Graphic",
        "href": "api/src/pyconverter/xml2py/ast_tree/Graphic.html#overview",
        "title": "Graphic > Overview",
        "section": "Overview",
        "text": "to_rst\nReturn a string to enable converting the element to an RST format.\nentityref\nValue of the entityref parameter contained in the graphic element."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Graphic",
        "href": "api/src/pyconverter/xml2py/ast_tree/Graphic.html#import-detail",
        "title": "Graphic > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import Graphic"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Graphic",
        "href": "api/src/pyconverter/xml2py/ast_tree/Graphic.html#property-detail",
        "title": "Graphic > Property detail",
        "section": "Property detail",
        "text": "Value of the entityref parameter contained in the graphic element."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Graphic",
        "href": "api/src/pyconverter/xml2py/ast_tree/Graphic.html#method-detail",
        "title": "Graphic > Method detail",
        "section": "Method detail",
        "text": "Return a string to enable converting the element to an RST format."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Function",
        "href": "api/src/pyconverter/xml2py/ast_tree/Function.html#function",
        "title": "Function",
        "section": "Function",
        "text": "Bases: Element\nProvides the function element.\nfrom src.pyconverter.xml2py.ast_tree import Function"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Function",
        "href": "api/src/pyconverter/xml2py/ast_tree/Function.html#import-detail",
        "title": "Function > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import Function"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Glossterm",
        "href": "api/src/pyconverter/xml2py/ast_tree/Glossterm.html#glossterm",
        "title": "Glossterm",
        "section": "Glossterm",
        "text": "Bases: Element\nProvides the base element.\nfrom src.pyconverter.xml2py.ast_tree import Glossterm"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Glossterm",
        "href": "api/src/pyconverter/xml2py/ast_tree/Glossterm.html#import-detail",
        "title": "Glossterm > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import Glossterm"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/OxygenXmlTree",
        "href": "api/src/pyconverter/xml2py/ast_tree/OxygenXmlTree.html#oxygenxmltree",
        "title": "OxygenXmlTree",
        "section": "OxygenXmlTree",
        "text": "Bases: Element\nProvides for loading an XML file as an AST (abstract syntax tree).\nxml_filename\nSource filename of the command.\nroot\nSource filename of the command.\nfrom src.pyconverter.xml2py.ast_tree import OxygenXmlTree"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/OxygenXmlTree",
        "href": "api/src/pyconverter/xml2py/ast_tree/OxygenXmlTree.html#overview",
        "title": "OxygenXmlTree > Overview",
        "section": "Overview",
        "text": "xml_filename\nSource filename of the command.\nroot"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/OxygenXmlTree",
        "href": "api/src/pyconverter/xml2py/ast_tree/OxygenXmlTree.html#import-detail",
        "title": "OxygenXmlTree > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import OxygenXmlTree"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/OxygenXmlTree",
        "href": "api/src/pyconverter/xml2py/ast_tree/OxygenXmlTree.html#property-detail",
        "title": "OxygenXmlTree > Property detail",
        "section": "Property detail",
        "text": "Source filename of the command."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/OxygenXmlTree",
        "href": "api/src/pyconverter/xml2py/ast_tree/OxygenXmlTree.html#attribute-detail",
        "title": "OxygenXmlTree > Attribute detail",
        "section": "Attribute detail",
        "text": ""
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/InlineEquation",
        "href": "api/src/pyconverter/xml2py/ast_tree/InlineEquation.html#inlineequation",
        "title": "InlineEquation",
        "section": "InlineEquation",
        "text": "Bases: _Math\nProvides the inline equation element.\nto_rst\nReturn a string to enable converting the element to an RST format.\ntail\nReturn the tail of the element as a string.\nReturn the tail of the element as a string.\nReturn a string to enable converting the element to an RST format.\nfrom src.pyconverter.xml2py.ast_tree import InlineEquation"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/InlineEquation",
        "href": "api/src/pyconverter/xml2py/ast_tree/InlineEquation.html#overview",
        "title": "InlineEquation > Overview",
        "section": "Overview",
        "text": "to_rst\nReturn a string to enable converting the element to an RST format.\ntail\nReturn the tail of the element as a string."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/InlineEquation",
        "href": "api/src/pyconverter/xml2py/ast_tree/InlineEquation.html#import-detail",
        "title": "InlineEquation > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import InlineEquation"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/InlineEquation",
        "href": "api/src/pyconverter/xml2py/ast_tree/InlineEquation.html#property-detail",
        "title": "InlineEquation > Property detail",
        "section": "Property detail",
        "text": "Return the tail of the element as a string."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/InlineEquation",
        "href": "api/src/pyconverter/xml2py/ast_tree/InlineEquation.html#method-detail",
        "title": "InlineEquation > Method detail",
        "section": "Method detail",
        "text": "Return a string to enable converting the element to an RST format."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Application",
        "href": "api/src/pyconverter/xml2py/ast_tree/Application.html#application",
        "title": "Application",
        "section": "Application",
        "text": "Bases: Element\nProvides the base element.\nfrom src.pyconverter.xml2py.ast_tree import Application"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Application",
        "href": "api/src/pyconverter/xml2py/ast_tree/Application.html#import-detail",
        "title": "Application > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import Application"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Literal",
        "href": "api/src/pyconverter/xml2py/ast_tree/Literal.html#literal",
        "title": "Literal",
        "section": "Literal",
        "text": "Bases: Element\nProvides the literal output element.\nto_rst\nReturn a string to enable converting the element to an RST format.\nReturn a string to enable converting the element to an RST format.\nfrom src.pyconverter.xml2py.ast_tree import Literal"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Literal",
        "href": "api/src/pyconverter/xml2py/ast_tree/Literal.html#overview",
        "title": "Literal > Overview",
        "section": "Overview",
        "text": "to_rst\nReturn a string to enable converting the element to an RST format."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Literal",
        "href": "api/src/pyconverter/xml2py/ast_tree/Literal.html#import-detail",
        "title": "Literal > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import Literal"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Literal",
        "href": "api/src/pyconverter/xml2py/ast_tree/Literal.html#method-detail",
        "title": "Literal > Method detail",
        "section": "Method detail",
        "text": "Return a string to enable converting the element to an RST format."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/InlineGraphic",
        "href": "api/src/pyconverter/xml2py/ast_tree/InlineGraphic.html#inlinegraphic",
        "title": "InlineGraphic",
        "section": "InlineGraphic",
        "text": "Bases: Element\nProvides the inline graphic element.\nfileref\nFile reference.\nFile reference.\nfrom src.pyconverter.xml2py.ast_tree import InlineGraphic"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/InlineGraphic",
        "href": "api/src/pyconverter/xml2py/ast_tree/InlineGraphic.html#overview",
        "title": "InlineGraphic > Overview",
        "section": "Overview",
        "text": "fileref\nFile reference."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/InlineGraphic",
        "href": "api/src/pyconverter/xml2py/ast_tree/InlineGraphic.html#import-detail",
        "title": "InlineGraphic > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import InlineGraphic"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/InlineGraphic",
        "href": "api/src/pyconverter/xml2py/ast_tree/InlineGraphic.html#method-detail",
        "title": "InlineGraphic > Method detail",
        "section": "Method detail",
        "text": "File reference."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ColSpec",
        "href": "api/src/pyconverter/xml2py/ast_tree/ColSpec.html#colspec",
        "title": "ColSpec",
        "section": "ColSpec",
        "text": "Bases: Element\nProvides the base element.\nfrom src.pyconverter.xml2py.ast_tree import ColSpec"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ColSpec",
        "href": "api/src/pyconverter/xml2py/ast_tree/ColSpec.html#import-detail",
        "title": "ColSpec > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import ColSpec"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/SubScript",
        "href": "api/src/pyconverter/xml2py/ast_tree/SubScript.html#subscript",
        "title": "SubScript",
        "section": "SubScript",
        "text": "Bases: Element\nProvides the subscript element.\nfrom src.pyconverter.xml2py.ast_tree import SubScript"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/SubScript",
        "href": "api/src/pyconverter/xml2py/ast_tree/SubScript.html#import-detail",
        "title": "SubScript > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import SubScript"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Formalpara",
        "href": "api/src/pyconverter/xml2py/ast_tree/Formalpara.html#formalpara",
        "title": "Formalpara",
        "section": "Formalpara",
        "text": "Bases: Element\nProvides the base element.\nfrom src.pyconverter.xml2py.ast_tree import Formalpara"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Formalpara",
        "href": "api/src/pyconverter/xml2py/ast_tree/Formalpara.html#import-detail",
        "title": "Formalpara > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import Formalpara"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Screen",
        "href": "api/src/pyconverter/xml2py/ast_tree/Screen.html#screen",
        "title": "Screen",
        "section": "Screen",
        "text": "Bases: Element\nProvides the screen element.\nfrom src.pyconverter.xml2py.ast_tree import Screen"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Screen",
        "href": "api/src/pyconverter/xml2py/ast_tree/Screen.html#import-detail",
        "title": "Screen > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import Screen"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/custom_functions/CustomFunctions",
        "href": "api/src/pyconverter/xml2py/custom_functions/CustomFunctions.html#customfunctions",
        "title": "CustomFunctions",
        "section": "CustomFunctions",
        "text": "Provides for creating customized functions.\npath\nPath object where the customized function files are located.\npy_names\nList with all customized functions located in the folder.\npy_returns\nDictionary containing the Returns section if any.\npy_examples\nDictionary containing the Examples section if any.\npy_code\nDictionary containing the customized source code.\nlib_import\nDictionary containing the needed libraries if any.\nPath object where the customized function files are located.\nList with all customized functions located in the folder.\nDictionary containing the Returns section if any.\nDictionary containing the Examples section if any.\nDictionary containing the customized source code.\nDictionary containing the needed libraries if any.\nfrom src.pyconverter.xml2py.custom_functions import CustomFunctions"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/custom_functions/CustomFunctions",
        "href": "api/src/pyconverter/xml2py/custom_functions/CustomFunctions.html#overview",
        "title": "CustomFunctions > Overview",
        "section": "Overview",
        "text": "path\nPath object where the customized function files are located.\npy_names\nList with all customized functions located in the folder.\npy_returns\nDictionary containing the Returns section if any.\npy_examples\nDictionary containing the Examples section if any.\npy_code\nDictionary containing the customized source code.\nlib_import\nDictionary containing the needed libraries if any."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/custom_functions/CustomFunctions",
        "href": "api/src/pyconverter/xml2py/custom_functions/CustomFunctions.html#import-detail",
        "title": "CustomFunctions > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.custom_functions import CustomFunctions"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/custom_functions/CustomFunctions",
        "href": "api/src/pyconverter/xml2py/custom_functions/CustomFunctions.html#property-detail",
        "title": "CustomFunctions > Property detail",
        "section": "Property detail",
        "text": "Path object where the customized function files are located.\nList with all customized functions located in the folder.\nDictionary containing the Returns section if any.\nDictionary containing the Examples section if any.\nDictionary containing the customized source code.\nDictionary containing the needed libraries if any."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refnamediv",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refnamediv.html#refnamediv",
        "title": "Refnamediv",
        "section": "Refnamediv",
        "text": "Bases: Element\nProvides the refnamediv element, which contains the name,\npurpose, and classification of a reference.\nterms\nTerms of the element.\nrefname\nRefname of the element.\npurpose\nRefpurpose of the element.\nTerms of the element.\nRefname of the element.\nRefpurpose of the element.\nfrom src.pyconverter.xml2py.ast_tree import Refnamediv"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refnamediv",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refnamediv.html#overview",
        "title": "Refnamediv > Overview",
        "section": "Overview",
        "text": "terms\nTerms of the element.\nrefname\nRefname of the element.\npurpose\nRefpurpose of the element."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refnamediv",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refnamediv.html#import-detail",
        "title": "Refnamediv > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import Refnamediv"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refnamediv",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refnamediv.html#property-detail",
        "title": "Refnamediv > Property detail",
        "section": "Property detail",
        "text": "Terms of the element.\nRefname of the element.\nRefpurpose of the element."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ItemizedList",
        "href": "api/src/pyconverter/xml2py/ast_tree/ItemizedList.html#itemizedlist",
        "title": "ItemizedList",
        "section": "ItemizedList",
        "text": "Bases: Element\nProvides the itemized list element.\nto_rst\nReturn a string to enable converting the element to an RST format.\n__repr__\nReturn a string to enable converting the element to an RST format.\nfrom src.pyconverter.xml2py.ast_tree import ItemizedList"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ItemizedList",
        "href": "api/src/pyconverter/xml2py/ast_tree/ItemizedList.html#overview",
        "title": "ItemizedList > Overview",
        "section": "Overview",
        "text": "to_rst\nReturn a string to enable converting the element to an RST format.\n__repr__"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ItemizedList",
        "href": "api/src/pyconverter/xml2py/ast_tree/ItemizedList.html#import-detail",
        "title": "ItemizedList > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import ItemizedList"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ItemizedList",
        "href": "api/src/pyconverter/xml2py/ast_tree/ItemizedList.html#method-detail",
        "title": "ItemizedList > Method detail",
        "section": "Method detail",
        "text": "Return a string to enable converting the element to an RST format."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/GuiButton",
        "href": "api/src/pyconverter/xml2py/ast_tree/GuiButton.html#guibutton",
        "title": "GuiButton",
        "section": "GuiButton",
        "text": "Bases: Element\nProvides the base element.\nfrom src.pyconverter.xml2py.ast_tree import GuiButton"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/GuiButton",
        "href": "api/src/pyconverter/xml2py/ast_tree/GuiButton.html#import-detail",
        "title": "GuiButton > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import GuiButton"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refname",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refname.html#refname",
        "title": "Refname",
        "section": "Refname",
        "text": "Bases: Element\nProvides the refname element which contains\nthe name of a reference.\nterms\nTerms of the element.\nraw_args\nRaws containing the command arguments.\nargs\nCommand arguments.\nTerms of the element.\nRaws containing the command arguments.\nCommand arguments.\nfrom src.pyconverter.xml2py.ast_tree import Refname"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refname",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refname.html#overview",
        "title": "Refname > Overview",
        "section": "Overview",
        "text": "terms\nTerms of the element.\nraw_args\nRaws containing the command arguments.\nargs\nCommand arguments."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refname",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refname.html#import-detail",
        "title": "Refname > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import Refname"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refname",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refname.html#property-detail",
        "title": "Refname > Property detail",
        "section": "Property detail",
        "text": "Terms of the element.\nRaws containing the command arguments.\nCommand arguments."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refpurpose",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refpurpose.html#refpurpose",
        "title": "Refpurpose",
        "section": "Refpurpose",
        "text": "Bases: Element\nProvides the refpurpose element, which contains\na short synopsis of a reference.\n__repr__\nfrom src.pyconverter.xml2py.ast_tree import Refpurpose"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refpurpose",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refpurpose.html#overview",
        "title": "Refpurpose > Overview",
        "section": "Overview",
        "text": "__repr__"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refpurpose",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refpurpose.html#import-detail",
        "title": "Refpurpose > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import Refpurpose"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refpurpose",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refpurpose.html#method-detail",
        "title": "Refpurpose > Method detail",
        "section": "Method detail",
        "text": ""
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Option",
        "href": "api/src/pyconverter/xml2py/ast_tree/Option.html#option",
        "title": "Option",
        "section": "Option",
        "text": "Bases: Element\nProvides the base element.\nfrom src.pyconverter.xml2py.ast_tree import Option"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Option",
        "href": "api/src/pyconverter/xml2py/ast_tree/Option.html#import-detail",
        "title": "Option > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import Option"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Replaceable",
        "href": "api/src/pyconverter/xml2py/ast_tree/Replaceable.html#replaceable",
        "title": "Replaceable",
        "section": "Replaceable",
        "text": "Bases: Element\nProvides the replaceable element.\nto_rst\nReturn a string to enable converting the element to an RST format.\nis_equals\nReplaceable equals something.\ncontent_equals\nContent of the element after handling the ‘=’ sign.\nReplaceable equals something.\nContent of the element after handling the ‘=’ sign.\nReturn a string to enable converting the element to an RST format.\nfrom src.pyconverter.xml2py.ast_tree import Replaceable"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Replaceable",
        "href": "api/src/pyconverter/xml2py/ast_tree/Replaceable.html#overview",
        "title": "Replaceable > Overview",
        "section": "Overview",
        "text": "to_rst\nReturn a string to enable converting the element to an RST format.\nis_equals\nReplaceable equals something.\ncontent_equals\nContent of the element after handling the ‘=’ sign."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Replaceable",
        "href": "api/src/pyconverter/xml2py/ast_tree/Replaceable.html#import-detail",
        "title": "Replaceable > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import Replaceable"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Replaceable",
        "href": "api/src/pyconverter/xml2py/ast_tree/Replaceable.html#property-detail",
        "title": "Replaceable > Property detail",
        "section": "Property detail",
        "text": "Replaceable equals something.\nContent of the element after handling the ‘=’ sign."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Replaceable",
        "href": "api/src/pyconverter/xml2py/ast_tree/Replaceable.html#method-detail",
        "title": "Replaceable > Method detail",
        "section": "Method detail",
        "text": "Return a string to enable converting the element to an RST format."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/SimpleList",
        "href": "api/src/pyconverter/xml2py/ast_tree/SimpleList.html#simplelist",
        "title": "SimpleList",
        "section": "SimpleList",
        "text": "Bases: ItemizedList\nProvides the simple itemized list element.\n__repr__\nfrom src.pyconverter.xml2py.ast_tree import SimpleList"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/SimpleList",
        "href": "api/src/pyconverter/xml2py/ast_tree/SimpleList.html#overview",
        "title": "SimpleList > Overview",
        "section": "Overview",
        "text": "__repr__"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/SimpleList",
        "href": "api/src/pyconverter/xml2py/ast_tree/SimpleList.html#import-detail",
        "title": "SimpleList > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import SimpleList"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/SimpleList",
        "href": "api/src/pyconverter/xml2py/ast_tree/SimpleList.html#method-detail",
        "title": "SimpleList > Method detail",
        "section": "Method detail",
        "text": ""
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Caution",
        "href": "api/src/pyconverter/xml2py/ast_tree/Caution.html#caution",
        "title": "Caution",
        "section": "Caution",
        "text": "Bases: Element\nProvides the caution element.\nto_rst\nReturn a string to enable converting the element to an RST format.\nReturn a string to enable converting the element to an RST format.\nfrom src.pyconverter.xml2py.ast_tree import Caution"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Caution",
        "href": "api/src/pyconverter/xml2py/ast_tree/Caution.html#overview",
        "title": "Caution > Overview",
        "section": "Overview",
        "text": "to_rst\nReturn a string to enable converting the element to an RST format."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Caution",
        "href": "api/src/pyconverter/xml2py/ast_tree/Caution.html#import-detail",
        "title": "Caution > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import Caution"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Caution",
        "href": "api/src/pyconverter/xml2py/ast_tree/Caution.html#method-detail",
        "title": "Caution > Method detail",
        "section": "Method detail",
        "text": "Return a string to enable converting the element to an RST format."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Argument",
        "href": "api/src/pyconverter/xml2py/ast_tree/Argument.html#argument",
        "title": "Argument",
        "section": "Argument",
        "text": "Argument object.\nrec_find\nFind the first type matching a given type string recursively.\nstr_types\nString representation of the parameter types.\nresized_description\nResize the description to a maximum length.\nto_py_docstring\nReturn a list of string to enable converting the element to an RST format.\nto_py_signature\nReturn the Python signature of the argument.\npy_arg_name\nPython-compatible term.\nis_arg_elipsis\nCheck if the argument is an elipsis.\nmultiple_args\ntypes\nOne or more parameter types.\nPython-compatible term.\nCheck if the argument is an elipsis.\nTrue if the argument is an elipsis, False otherwise.\nOne or more parameter types.\nThis is guessed from any subvarlists. If unavailable, then it’s guessed\nfrom the description of the variable.\nThis is either a string, float, or integer (or some combination thereof).\nFind the first type matching a given type string recursively.\nString representation of the parameter types.\nResize the description to a maximum length.\nReturn a list of string to enable converting the element to an RST format.\nReturn the Python signature of the argument.\nfrom src.pyconverter.xml2py.ast_tree import Argument"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Argument",
        "href": "api/src/pyconverter/xml2py/ast_tree/Argument.html#overview",
        "title": "Argument > Overview",
        "section": "Overview",
        "text": "rec_find\nFind the first type matching a given type string recursively.\nstr_types\nString representation of the parameter types.\nresized_description\nResize the description to a maximum length.\nto_py_docstring\nReturn a list of string to enable converting the element to an RST format.\nto_py_signature\nReturn the Python signature of the argument.\npy_arg_name\nPython-compatible term.\nis_arg_elipsis\nCheck if the argument is an elipsis.\nmultiple_args\ntypes\nOne or more parameter types."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Argument",
        "href": "api/src/pyconverter/xml2py/ast_tree/Argument.html#import-detail",
        "title": "Argument > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import Argument"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Argument",
        "href": "api/src/pyconverter/xml2py/ast_tree/Argument.html#property-detail",
        "title": "Argument > Property detail",
        "section": "Property detail",
        "text": "Python-compatible term.\nCheck if the argument is an elipsis.\nTrue if the argument is an elipsis, False otherwise.\nOne or more parameter types.\nThis is guessed from any subvarlists. If unavailable, then it’s guessed\nfrom the description of the variable.\nThis is either a string, float, or integer (or some combination thereof)."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Argument",
        "href": "api/src/pyconverter/xml2py/ast_tree/Argument.html#method-detail",
        "title": "Argument > Method detail",
        "section": "Method detail",
        "text": "Find the first type matching a given type string recursively.\nString representation of the parameter types.\nResize the description to a maximum length.\nReturn a list of string to enable converting the element to an RST format.\nReturn the Python signature of the argument."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ImageData",
        "href": "api/src/pyconverter/xml2py/ast_tree/ImageData.html#imagedata",
        "title": "ImageData",
        "section": "ImageData",
        "text": "Bases: Element\nProvides the base element.\nfrom src.pyconverter.xml2py.ast_tree import ImageData"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ImageData",
        "href": "api/src/pyconverter/xml2py/ast_tree/ImageData.html#import-detail",
        "title": "ImageData > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import ImageData"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Interface",
        "href": "api/src/pyconverter/xml2py/ast_tree/Interface.html#interface",
        "title": "Interface",
        "section": "Interface",
        "text": "Bases: Element\nProvides the base element.\nfrom src.pyconverter.xml2py.ast_tree import Interface"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Interface",
        "href": "api/src/pyconverter/xml2py/ast_tree/Interface.html#import-detail",
        "title": "Interface > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import Interface"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Footnote",
        "href": "api/src/pyconverter/xml2py/ast_tree/Footnote.html#footnote",
        "title": "Footnote",
        "section": "Footnote",
        "text": "Bases: Element\nProvides the base element.\nfrom src.pyconverter.xml2py.ast_tree import Footnote"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Footnote",
        "href": "api/src/pyconverter/xml2py/ast_tree/Footnote.html#import-detail",
        "title": "Footnote > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import Footnote"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Note",
        "href": "api/src/pyconverter/xml2py/ast_tree/Note.html#note",
        "title": "Note",
        "section": "Note",
        "text": "Bases: Element\nProvides the note element.\nfrom src.pyconverter.xml2py.ast_tree import Note"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Note",
        "href": "api/src/pyconverter/xml2py/ast_tree/Note.html#import-detail",
        "title": "Note > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import Note"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/index",
        "href": "api/src/pyconverter/xml2py/ast_tree/index.html#the-ast_treepy-module",
        "title": "The ast_tree.py module",
        "section": "The ast_tree.py module",
        "text": "NameMap\nElement\nProvides the base element.\nItemizedList\nProvides the itemized list element.\nSimpleList\nProvides the simple itemized list element.\nMember\nProvides the member element for a simple itemized list.\nOrderedList\nProvides the ordered list element.\nListItem\nProvides the list item element.\nFileName\nProvides the filename element.\nOLink\nProvides the external link element.\nParagraph\nProvides the paragraph element.\nPhrase\nProvides the phrase element.\nStructname\nProvides the structure name element.\nTitle\nProvides the title element.\nEmphasis\nProvides the emphasis element.\nExample\nProvides the example element.\nInformalExample\nProvides the informal example element.\nGuiMenu\nProvides the GUI menu element.\nReplaceable\nProvides the replaceable element.\nProgramListing\nProvides the program listing element.\nVariablelist\nProvides the variable list.\nRefSection\nProvides the reference section element.\nVarlistEntry\nProvides the variable list entry element.\nTerm\nProvides the term element.\nGuiLabel\nProvides the GUI label element.\nGuiMenuItem\nProvides the GUI menu item element.\nSuperScript\nProvides the superscript element.\nCode\nProvides the code element.\nMath\nProvides the math element.\nInlineEquation\nProvides the inline equation element.\nSubScript\nProvides the subscript element.\nInlineGraphic\nProvides the inline graphic element.\nQuote\nProvides the quote element.\nLink\nProvides the link element.\nXRef\nProvides the cross reference element.\nUserInput\nProvides the user input element.\nScreen\nProvides the screen element.\nLiteral\nProvides the literal output element.\nCaution\nProvides the caution element.\nGraphic\nProvides the graphic element.\nFunction\nProvides the function element.\nNote\nProvides the note element.\nBlockQuote\nProvides the block quote element.\nRefMeta\nProvides the reference metadata element.\nIndexTerm\nProvides the index term element.\nPrimary\nProvides the primary element.\nTGroup\nProvides the tgroup element, which contains the header and body rows of a table.\nTable\nProvides the table element\nRefentrytitle\nProvides the title of the reference entry.\nRefnamediv\nProvides the refnamediv element, which contains the name,\nRefname\nProvides the refname element which contains\nRefpurpose\nProvides the refpurpose element, which contains\nRefclass\nProvides the base element.\nApplication\nProvides the base element.\nRefsect1\nProvides the base element.\nCommand\nProvides the command element.\nComputerOutput\nProvides the computer output element.\nFigure\nProvides the figure element.\nFootnote\nProvides the base element.\nFootnoteref\nProvides the base element.\nFormalpara\nProvides the base element.\nGlossterm\nProvides the base element.\nGuiButton\nProvides the base element.\nGuiIcon\nProvides the base element.\nHighlights\nProvides the base element.\nImportant\nProvides the base element.\nInformalEquation\nProvides the base element.\nInterface\nProvides the base element.\nMarkup\nProvides the base element.\nMediaobject\nProvides the base element.\nOption\nProvides the base element.\nRefsect3\nProvides the base element.\nRefsynopsisdiv\nProvides the base element.\nSidebar\nProvides the base element.\nXMLType\nProvides the base element.\nXMLWarning\nProvides the base element.\nClassName\nProvides the base element.\nImageobject\nProvides the base element.\nInformalFigure\nProvides the base element.\nEnvar\nProvides the base element.\nImageData\nProvides the base element.\nColSpec\nProvides the base element.\nTBody\nProvides the tbody element.\nEntry\nProvides the entry element.\nRow\nProvides the row element.\nTHead\nProvides the thead element.\nRemark\nProvides the base element.\nLiteralLayout\nProvides the base element.\nCiteTitle\nProvides the base element.\nULink\nProvides the base element.\nSegTitle\nProvides the base element.\nChapter\nProvides the chapter element.\nSection1\nProvides the base element.\nProductName\nProvides the base element.\nArgumentList\nArgument\nArgument object.\nXMLCommand\nProvides the XML command from the documentation.\nInformalTable\nProvides the informal table element.\nOxygenXmlTree\nProvides for loading an XML file as an AST (abstract syntax tree).\nto_py_name\nConvert to a Python-compatible name.\nget_iter_values\nGet the values of an iterator.\nget_quant_iter_pos\nGet the values of a quantity iterator.\nto_py_arg_name\nPython-compatible term\nget_complete_args_from_initial_arg\nis_elipsis\nCheck if a name is an elipsis.\nresize_length\nResize the length of a text.\nponctuaction_whitespace\nresize_element_list\nparse_element\nParse a single element.\nparse_children\nParse the children of an element.\nparse_text\nParse a paragraph element.\nget_parser\nsuperlatif\nparsers\nitem_needing_links_base_url\nitem_needing_fcache\nitem_needing_all\nCONV_EQN\nCONST\nCLEANUP\nPY_ARG_CLEANUP\nNAME_MAP_GLOB\nSKIP\nNO_RESIZE_LIST\nConvert to a Python-compatible name.\nGet the values of an iterator.\nGet the values of a quantity iterator.\nName of the parameter containing the iterator.\nTuple containing the iteration value and the position of the iterator.\nPython-compatible term\nCheck if a name is an elipsis.\nTrue if the argument is an elipsis, False otherwise.\nResize the length of a text.\nParse a single element.\nParse the children of an element.\nList of the children of the element.\nParse a paragraph element."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/index",
        "href": "api/src/pyconverter/xml2py/ast_tree/index.html#summary",
        "title": "The ast_tree.py module > Summary",
        "section": "Summary",
        "text": "NameMap\nElement\nProvides the base element.\nItemizedList\nProvides the itemized list element.\nSimpleList\nProvides the simple itemized list element.\nMember\nProvides the member element for a simple itemized list.\nOrderedList\nProvides the ordered list element.\nListItem\nProvides the list item element.\nFileName\nProvides the filename element.\nOLink\nProvides the external link element.\nParagraph\nProvides the paragraph element.\nPhrase\nProvides the phrase element.\nStructname\nProvides the structure name element.\nTitle\nProvides the title element.\nEmphasis\nProvides the emphasis element.\nExample\nProvides the example element.\nInformalExample\nProvides the informal example element.\nGuiMenu\nProvides the GUI menu element.\nReplaceable\nProvides the replaceable element.\nProgramListing\nProvides the program listing element.\nVariablelist\nProvides the variable list.\nRefSection\nProvides the reference section element.\nVarlistEntry\nProvides the variable list entry element.\nTerm\nProvides the term element.\nGuiLabel\nProvides the GUI label element.\nGuiMenuItem\nProvides the GUI menu item element.\nSuperScript\nProvides the superscript element.\nCode\nProvides the code element.\nMath\nProvides the math element.\nInlineEquation\nProvides the inline equation element.\nSubScript\nProvides the subscript element.\nInlineGraphic\nProvides the inline graphic element.\nQuote\nProvides the quote element.\nLink\nProvides the link element.\nXRef\nProvides the cross reference element.\nUserInput\nProvides the user input element.\nScreen\nProvides the screen element.\nLiteral\nProvides the literal output element.\nCaution\nProvides the caution element.\nGraphic\nProvides the graphic element.\nFunction\nProvides the function element.\nNote\nProvides the note element.\nBlockQuote\nProvides the block quote element.\nRefMeta\nProvides the reference metadata element.\nIndexTerm\nProvides the index term element.\nPrimary\nProvides the primary element.\nTGroup\nProvides the tgroup element, which contains the header and body rows of a table.\nTable\nProvides the table element\nRefentrytitle\nProvides the title of the reference entry.\nRefnamediv\nProvides the refnamediv element, which contains the name,\nRefname\nProvides the refname element which contains\nRefpurpose\nProvides the refpurpose element, which contains\nRefclass\nProvides the base element.\nApplication\nProvides the base element.\nRefsect1\nProvides the base element.\nCommand\nProvides the command element.\nComputerOutput\nProvides the computer output element.\nFigure\nProvides the figure element.\nFootnote\nProvides the base element.\nFootnoteref\nProvides the base element.\nFormalpara\nProvides the base element.\nGlossterm\nProvides the base element.\nGuiButton\nProvides the base element.\nGuiIcon\nProvides the base element.\nHighlights\nProvides the base element.\nImportant\nProvides the base element.\nInformalEquation\nProvides the base element.\nInterface\nProvides the base element.\nMarkup\nProvides the base element.\nMediaobject\nProvides the base element.\nOption\nProvides the base element.\nRefsect3\nProvides the base element.\nRefsynopsisdiv\nProvides the base element.\nSidebar\nProvides the base element.\nXMLType\nProvides the base element.\nXMLWarning\nProvides the base element.\nClassName\nProvides the base element.\nImageobject\nProvides the base element.\nInformalFigure\nProvides the base element.\nEnvar\nProvides the base element.\nImageData\nProvides the base element.\nColSpec\nProvides the base element.\nTBody\nProvides the tbody element.\nEntry\nProvides the entry element.\nRow\nProvides the row element.\nTHead\nProvides the thead element.\nRemark\nProvides the base element.\nLiteralLayout\nProvides the base element.\nCiteTitle\nProvides the base element.\nULink\nProvides the base element.\nSegTitle\nProvides the base element.\nChapter\nProvides the chapter element.\nSection1\nProvides the base element.\nProductName\nProvides the base element.\nArgumentList\nArgument\nArgument object.\nXMLCommand\nProvides the XML command from the documentation.\nInformalTable\nProvides the informal table element.\nOxygenXmlTree\nProvides for loading an XML file as an AST (abstract syntax tree).\nto_py_name\nConvert to a Python-compatible name.\nget_iter_values\nGet the values of an iterator.\nget_quant_iter_pos\nGet the values of a quantity iterator.\nto_py_arg_name\nPython-compatible term\nget_complete_args_from_initial_arg\nis_elipsis\nCheck if a name is an elipsis.\nresize_length\nResize the length of a text.\nponctuaction_whitespace\nresize_element_list\nparse_element\nParse a single element.\nparse_children\nParse the children of an element.\nparse_text\nParse a paragraph element.\nget_parser\nsuperlatif\nparsers\nitem_needing_links_base_url\nitem_needing_fcache\nitem_needing_all\nCONV_EQN\nCONST\nCLEANUP\nPY_ARG_CLEANUP\nNAME_MAP_GLOB\nSKIP\nNO_RESIZE_LIST"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/index",
        "href": "api/src/pyconverter/xml2py/ast_tree/index.html#module-detail",
        "title": "The ast_tree.py module > Module detail",
        "section": "Module detail",
        "text": "Convert to a Python-compatible name.\nGet the values of an iterator.\nGet the values of a quantity iterator.\nName of the parameter containing the iterator.\nTuple containing the iteration value and the position of the iterator.\nPython-compatible term\nCheck if a name is an elipsis.\nTrue if the argument is an elipsis, False otherwise.\nResize the length of a text.\nParse a single element.\nParse the children of an element.\nList of the children of the element.\nParse a paragraph element."
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#getting-started",
        "title": "Getting started",
        "section": "Getting started",
        "text": "Two installation modes of the pyconverter-xml2py package are provided: user and developer.\nInstall the latest release for use with this command:\nInstalling the pyconverter-xml2py package in developer mode allows you to modify the source and enhance it.\nFor contribution guidelines, see Contribute.\nUse the PyConverter-XML2Py Issues page to submit questions,\nreport bug, and request new features. When possible, use these issue templates:\nBug, problem, error:\nFor filing a bug report\nDocumentation issue:\nFor requesting modifications to the documentation\nAdding an example:\nFor proposing a new example\nNew feature:\nFor requesting enhancements to the code\nIf your issue does not fit into one of these categories, create your own issue.\nTo reach the PyAnsys support team, email pyansys.core@ansys.com.\npython -m pip install pyconverter-xml2py"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#installation",
        "title": "Getting started > Installation",
        "section": "Installation",
        "text": "Two installation modes of the pyconverter-xml2py package are provided: user and developer.\nInstall the latest release for use with this command:\nInstalling the pyconverter-xml2py package in developer mode allows you to modify the source and enhance it.\nFor contribution guidelines, see Contribute.\npython -m pip install pyconverter-xml2py"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#user-installation",
        "title": "Getting started > User installation",
        "section": "User installation",
        "text": "Install the latest release for use with this command:\npython -m pip install pyconverter-xml2py"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#for-developers",
        "title": "Getting started > For developers",
        "section": "For developers",
        "text": "Installing the pyconverter-xml2py package in developer mode allows you to modify the source and enhance it.\nFor contribution guidelines, see Contribute."
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#post-issues",
        "title": "Getting started > Post issues",
        "section": "Post issues",
        "text": "Use the PyConverter-XML2Py Issues page to submit questions,\nreport bug, and request new features. When possible, use these issue templates:\nBug, problem, error:\nFor filing a bug report\nDocumentation issue:\nFor requesting modifications to the documentation\nAdding an example:\nFor proposing a new example\nNew feature:\nFor requesting enhancements to the code\nIf your issue does not fit into one of these categories, create your own issue.\nTo reach the PyAnsys support team, email pyansys.core@ansys.com."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ProductName",
        "href": "api/src/pyconverter/xml2py/ast_tree/ProductName.html#productname",
        "title": "ProductName",
        "section": "ProductName",
        "text": "Bases: Element\nProvides the base element.\nfrom src.pyconverter.xml2py.ast_tree import ProductName"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ProductName",
        "href": "api/src/pyconverter/xml2py/ast_tree/ProductName.html#import-detail",
        "title": "ProductName > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import ProductName"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/index",
        "href": "api/src/pyconverter/xml2py/index.html#the-srcpyconverterxml2py-library",
        "title": "The src.pyconverter.xml2py library",
        "section": "The src.pyconverter.xml2py library",
        "text": "utils\nast_tree\ncli\nCommand Line Interface for PyConverter-XML2Py.\ncustom_functions\ndirectory_format\ndownload\nFunctions to download template datasets from the pyconverter-xml2py repository.\nformatter\nThis module contains the functions to format the generated docstrings with\nload_xml_doc\nversion_variables\nwriter\n__version__\npyconverter.xml2py version.\npyconverter.xml2py\npyconverter.xml2py version."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/index",
        "href": "api/src/pyconverter/xml2py/index.html#summary",
        "title": "The src.pyconverter.xml2py library > Summary",
        "section": "Summary",
        "text": "utils\nast_tree\ncli\nCommand Line Interface for PyConverter-XML2Py.\ncustom_functions\ndirectory_format\ndownload\nFunctions to download template datasets from the pyconverter-xml2py repository.\nformatter\nThis module contains the functions to format the generated docstrings with\nload_xml_doc\nversion_variables\nwriter\n__version__\npyconverter.xml2py version."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/index",
        "href": "api/src/pyconverter/xml2py/index.html#description",
        "title": "The src.pyconverter.xml2py library > Description",
        "section": "Description",
        "text": "pyconverter.xml2py"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/index",
        "href": "api/src/pyconverter/xml2py/index.html#module-detail",
        "title": "The src.pyconverter.xml2py library > Module detail",
        "section": "Module detail",
        "text": "pyconverter.xml2py version."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Variablelist",
        "href": "api/src/pyconverter/xml2py/ast_tree/Variablelist.html#variablelist",
        "title": "Variablelist",
        "section": "Variablelist",
        "text": "Bases: Element\nProvides the variable list.\nto_rst\nReturn a string to enable converting the element to an RST format.\nterms\nList containing the terms of the element.\nList containing the terms of the element.\nReturn a string to enable converting the element to an RST format.\nfrom src.pyconverter.xml2py.ast_tree import Variablelist"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Variablelist",
        "href": "api/src/pyconverter/xml2py/ast_tree/Variablelist.html#overview",
        "title": "Variablelist > Overview",
        "section": "Overview",
        "text": "to_rst\nReturn a string to enable converting the element to an RST format.\nterms\nList containing the terms of the element."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Variablelist",
        "href": "api/src/pyconverter/xml2py/ast_tree/Variablelist.html#import-detail",
        "title": "Variablelist > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import Variablelist"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Variablelist",
        "href": "api/src/pyconverter/xml2py/ast_tree/Variablelist.html#property-detail",
        "title": "Variablelist > Property detail",
        "section": "Property detail",
        "text": "List containing the terms of the element."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Variablelist",
        "href": "api/src/pyconverter/xml2py/ast_tree/Variablelist.html#method-detail",
        "title": "Variablelist > Method detail",
        "section": "Method detail",
        "text": "Return a string to enable converting the element to an RST format."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Structname",
        "href": "api/src/pyconverter/xml2py/ast_tree/Structname.html#structname",
        "title": "Structname",
        "section": "Structname",
        "text": "Bases: Element\nProvides the structure name element.\nfrom src.pyconverter.xml2py.ast_tree import Structname"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Structname",
        "href": "api/src/pyconverter/xml2py/ast_tree/Structname.html#import-detail",
        "title": "Structname > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import Structname"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/GuiLabel",
        "href": "api/src/pyconverter/xml2py/ast_tree/GuiLabel.html#guilabel",
        "title": "GuiLabel",
        "section": "GuiLabel",
        "text": "Bases: Element\nProvides the GUI label element.\nfrom src.pyconverter.xml2py.ast_tree import GuiLabel"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/GuiLabel",
        "href": "api/src/pyconverter/xml2py/ast_tree/GuiLabel.html#import-detail",
        "title": "GuiLabel > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import GuiLabel"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/formatter/index",
        "href": "api/src/pyconverter/xml2py/formatter/index.html#the-formatterpy-module",
        "title": "The formatter.py module",
        "section": "The formatter.py module",
        "text": "run_black\nRun Black on the autogenerated package.\nThis module contains the functions to format the generated docstrings with\nBlack.\nRun Black on the autogenerated package."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/formatter/index",
        "href": "api/src/pyconverter/xml2py/formatter/index.html#summary",
        "title": "The formatter.py module > Summary",
        "section": "Summary",
        "text": "run_black\nRun Black on the autogenerated package."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/formatter/index",
        "href": "api/src/pyconverter/xml2py/formatter/index.html#description",
        "title": "The formatter.py module > Description",
        "section": "Description",
        "text": "This module contains the functions to format the generated docstrings with\nBlack."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/formatter/index",
        "href": "api/src/pyconverter/xml2py/formatter/index.html#module-detail",
        "title": "The formatter.py module > Module detail",
        "section": "Module detail",
        "text": "Run Black on the autogenerated package."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/utils/utils/index",
        "href": "api/src/pyconverter/xml2py/utils/utils/index.html#the-utilspy-module",
        "title": "The utils.py module",
        "section": "The utils.py module",
        "text": "parse_yaml\nParse a YAML file.\nget_config_data_value\nReturn the value of a specific key in the YAML file.\ncreate_name_map\nCreate a mapping between the initial command name and the Python function name.\nimport_handler\nHandle the imports in the Python file.\nsplit_trail_alpha\nSplit a string based on the last tailing non-alphanumeric character.\nis_numeric\nReturn True when a string is numeric.\nget_refentry\nGet the reference entry from an XML file.\nParse a YAML file.\nPath object of the YAML file.\nDictionary with the content of the YAML file.\nReturn the value of a specific key in the YAML file.\nPath object of the YAML file.\nKey to search for in the YAML file.\nCreate a mapping between the initial command name and the Python function name.\nList of command names.\nPath object of the YAML file.\nDictionary with the following format: {\"initial_command_name\": \"python_name\"}.\nHandle the imports in the Python file.\nPath object of the Python file.\nAdditional content to add to the Python file.\nString before the function definition.\nSplit a string based on the last tailing non-alphanumeric character.\nString to split.\nReturn True when a string is numeric.\nString to check.\nTrue if the string is numeric.\nGet the reference entry from an XML file.\nPath object of an XML file."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/utils/utils/index",
        "href": "api/src/pyconverter/xml2py/utils/utils/index.html#summary",
        "title": "The utils.py module > Summary",
        "section": "Summary",
        "text": "parse_yaml\nParse a YAML file.\nget_config_data_value\nReturn the value of a specific key in the YAML file.\ncreate_name_map\nCreate a mapping between the initial command name and the Python function name.\nimport_handler\nHandle the imports in the Python file.\nsplit_trail_alpha\nSplit a string based on the last tailing non-alphanumeric character.\nis_numeric\nReturn True when a string is numeric.\nget_refentry\nGet the reference entry from an XML file."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/utils/utils/index",
        "href": "api/src/pyconverter/xml2py/utils/utils/index.html#module-detail",
        "title": "The utils.py module > Module detail",
        "section": "Module detail",
        "text": "Parse a YAML file.\nPath object of the YAML file.\nDictionary with the content of the YAML file.\nReturn the value of a specific key in the YAML file.\nPath object of the YAML file.\nKey to search for in the YAML file.\nCreate a mapping between the initial command name and the Python function name.\nList of command names.\nPath object of the YAML file.\nDictionary with the following format: {\"initial_command_name\": \"python_name\"}.\nHandle the imports in the Python file.\nPath object of the Python file.\nAdditional content to add to the Python file.\nString before the function definition.\nSplit a string based on the last tailing non-alphanumeric character.\nString to split.\nReturn True when a string is numeric.\nString to check.\nTrue if the string is numeric.\nGet the reference entry from an XML file.\nPath object of an XML file."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/download/index",
        "href": "api/src/pyconverter/xml2py/download/index.html#the-downloadpy-module",
        "title": "The download.py module",
        "section": "The download.py module",
        "text": "download\nThis function initially comes from the following GitHub repository:\ndownload_folder\nThis function initially comes from the following GitHub repository:\ndownload_template\nDownload the templage package provided by default.\nFunctions to download template datasets from the pyconverter-xml2py repository.\nThis function initially comes from the following GitHub repository:\nhttps://github.com/Nordgaren/Github-Folder-Downloader\nThis function initially comes from the following GitHub repository:\nhttps://github.com/Nordgaren/Github-Folder-Downloader\nDownload the templage package provided by default."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/download/index",
        "href": "api/src/pyconverter/xml2py/download/index.html#summary",
        "title": "The download.py module > Summary",
        "section": "Summary",
        "text": "download\nThis function initially comes from the following GitHub repository:\ndownload_folder\nThis function initially comes from the following GitHub repository:\ndownload_template\nDownload the templage package provided by default."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/download/index",
        "href": "api/src/pyconverter/xml2py/download/index.html#description",
        "title": "The download.py module > Description",
        "section": "Description",
        "text": "Functions to download template datasets from the pyconverter-xml2py repository."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/download/index",
        "href": "api/src/pyconverter/xml2py/download/index.html#module-detail",
        "title": "The download.py module > Module detail",
        "section": "Module detail",
        "text": "This function initially comes from the following GitHub repository:\nhttps://github.com/Nordgaren/Github-Folder-Downloader\nThis function initially comes from the following GitHub repository:\nhttps://github.com/Nordgaren/Github-Folder-Downloader\nDownload the templage package provided by default."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refclass",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refclass.html#refclass",
        "title": "Refclass",
        "section": "Refclass",
        "text": "Bases: Element\nProvides the base element.\nfrom src.pyconverter.xml2py.ast_tree import Refclass"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refclass",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refclass.html#import-detail",
        "title": "Refclass > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import Refclass"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/OrderedList",
        "href": "api/src/pyconverter/xml2py/ast_tree/OrderedList.html#orderedlist",
        "title": "OrderedList",
        "section": "OrderedList",
        "text": "Bases: Element\nProvides the ordered list element.\nto_rst\nReturn a string to enable converting the element to an RST format.\nReturn a string to enable converting the element to an RST format.\nfrom src.pyconverter.xml2py.ast_tree import OrderedList"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/OrderedList",
        "href": "api/src/pyconverter/xml2py/ast_tree/OrderedList.html#overview",
        "title": "OrderedList > Overview",
        "section": "Overview",
        "text": "to_rst\nReturn a string to enable converting the element to an RST format."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/OrderedList",
        "href": "api/src/pyconverter/xml2py/ast_tree/OrderedList.html#import-detail",
        "title": "OrderedList > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import OrderedList"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/OrderedList",
        "href": "api/src/pyconverter/xml2py/ast_tree/OrderedList.html#method-detail",
        "title": "OrderedList > Method detail",
        "section": "Method detail",
        "text": "Return a string to enable converting the element to an RST format."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ArgumentList",
        "href": "api/src/pyconverter/xml2py/ast_tree/ArgumentList.html#argumentlist",
        "title": "ArgumentList",
        "section": "ArgumentList",
        "text": "arguments\ninitial_args\npy_arg_names\n__iadd__\nfrom src.pyconverter.xml2py.ast_tree import ArgumentList"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ArgumentList",
        "href": "api/src/pyconverter/xml2py/ast_tree/ArgumentList.html#overview",
        "title": "ArgumentList > Overview",
        "section": "Overview",
        "text": "arguments\ninitial_args\npy_arg_names\n__iadd__"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ArgumentList",
        "href": "api/src/pyconverter/xml2py/ast_tree/ArgumentList.html#import-detail",
        "title": "ArgumentList > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import ArgumentList"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ArgumentList",
        "href": "api/src/pyconverter/xml2py/ast_tree/ArgumentList.html#property-detail",
        "title": "ArgumentList > Property detail",
        "section": "Property detail",
        "text": ""
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ArgumentList",
        "href": "api/src/pyconverter/xml2py/ast_tree/ArgumentList.html#method-detail",
        "title": "ArgumentList > Method detail",
        "section": "Method detail",
        "text": ""
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/InformalEquation",
        "href": "api/src/pyconverter/xml2py/ast_tree/InformalEquation.html#informalequation",
        "title": "InformalEquation",
        "section": "InformalEquation",
        "text": "Bases: Element\nProvides the base element.\nfrom src.pyconverter.xml2py.ast_tree import InformalEquation"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/InformalEquation",
        "href": "api/src/pyconverter/xml2py/ast_tree/InformalEquation.html#import-detail",
        "title": "InformalEquation > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import InformalEquation"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ULink",
        "href": "api/src/pyconverter/xml2py/ast_tree/ULink.html#ulink",
        "title": "ULink",
        "section": "ULink",
        "text": "Bases: Element\nProvides the base element.\nfrom src.pyconverter.xml2py.ast_tree import ULink"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ULink",
        "href": "api/src/pyconverter/xml2py/ast_tree/ULink.html#import-detail",
        "title": "ULink > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import ULink"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/RefMeta",
        "href": "api/src/pyconverter/xml2py/ast_tree/RefMeta.html#refmeta",
        "title": "RefMeta",
        "section": "RefMeta",
        "text": "Bases: Element\nProvides the reference metadata element.\nrefentry_title\nTitle of the referency entry.\nTitle of the referency entry.\nfrom src.pyconverter.xml2py.ast_tree import RefMeta"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/RefMeta",
        "href": "api/src/pyconverter/xml2py/ast_tree/RefMeta.html#overview",
        "title": "RefMeta > Overview",
        "section": "Overview",
        "text": "refentry_title\nTitle of the referency entry."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/RefMeta",
        "href": "api/src/pyconverter/xml2py/ast_tree/RefMeta.html#import-detail",
        "title": "RefMeta > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import RefMeta"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/RefMeta",
        "href": "api/src/pyconverter/xml2py/ast_tree/RefMeta.html#property-detail",
        "title": "RefMeta > Property detail",
        "section": "Property detail",
        "text": "Title of the referency entry."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Remark",
        "href": "api/src/pyconverter/xml2py/ast_tree/Remark.html#remark",
        "title": "Remark",
        "section": "Remark",
        "text": "Bases: Element\nProvides the base element.\nfrom src.pyconverter.xml2py.ast_tree import Remark"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Remark",
        "href": "api/src/pyconverter/xml2py/ast_tree/Remark.html#import-detail",
        "title": "Remark > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import Remark"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/VarlistEntry",
        "href": "api/src/pyconverter/xml2py/ast_tree/VarlistEntry.html#varlistentry",
        "title": "VarlistEntry",
        "section": "VarlistEntry",
        "text": "Bases: Element\nProvides the variable list entry element.\npy_term\nPython-compatible term.\npy_text\nRemove mention of graphical interaction.\nto_rst\nReturn a string to enable converting the element to an RST format.\nparm_types\nOne or more parameter types.\nterm\nTerm of the element.\ntext\nText of the element.\nactive\nReturn if this argument is active.\nis_arg\nReturn True when this variable list is for an argument.\n__repr__\nOne or more parameter types.\nThis is guessed from any subvarlists. If unavailable, then it’s guessed\nfrom the description of the variable.\nThis is either a string, float, or integer (or some combination thereof).\nTerm of the element.\nText of the element.\nReturn if this argument is active.\nReturn True when this variable list is for an argument.\nPython-compatible term.\nRemove mention of graphical interaction.\nReturn a string to enable converting the element to an RST format.\nfrom src.pyconverter.xml2py.ast_tree import VarlistEntry"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/VarlistEntry",
        "href": "api/src/pyconverter/xml2py/ast_tree/VarlistEntry.html#overview",
        "title": "VarlistEntry > Overview",
        "section": "Overview",
        "text": "py_term\nPython-compatible term.\npy_text\nRemove mention of graphical interaction.\nto_rst\nReturn a string to enable converting the element to an RST format.\nparm_types\nOne or more parameter types.\nterm\nTerm of the element.\ntext\nText of the element.\nactive\nReturn if this argument is active.\nis_arg\nReturn True when this variable list is for an argument.\n__repr__"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/VarlistEntry",
        "href": "api/src/pyconverter/xml2py/ast_tree/VarlistEntry.html#import-detail",
        "title": "VarlistEntry > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import VarlistEntry"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/VarlistEntry",
        "href": "api/src/pyconverter/xml2py/ast_tree/VarlistEntry.html#property-detail",
        "title": "VarlistEntry > Property detail",
        "section": "Property detail",
        "text": "One or more parameter types.\nThis is guessed from any subvarlists. If unavailable, then it’s guessed\nfrom the description of the variable.\nThis is either a string, float, or integer (or some combination thereof).\nTerm of the element.\nText of the element.\nReturn if this argument is active.\nReturn True when this variable list is for an argument."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/VarlistEntry",
        "href": "api/src/pyconverter/xml2py/ast_tree/VarlistEntry.html#method-detail",
        "title": "VarlistEntry > Method detail",
        "section": "Method detail",
        "text": "Python-compatible term.\nRemove mention of graphical interaction.\nReturn a string to enable converting the element to an RST format."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/UserInput",
        "href": "api/src/pyconverter/xml2py/ast_tree/UserInput.html#userinput",
        "title": "UserInput",
        "section": "UserInput",
        "text": "Bases: Element\nProvides the user input element.\nfrom src.pyconverter.xml2py.ast_tree import UserInput"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/UserInput",
        "href": "api/src/pyconverter/xml2py/ast_tree/UserInput.html#import-detail",
        "title": "UserInput > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import UserInput"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Code",
        "href": "api/src/pyconverter/xml2py/ast_tree/Code.html#code",
        "title": "Code",
        "section": "Code",
        "text": "Bases: Element\nProvides the code element.\nfrom src.pyconverter.xml2py.ast_tree import Code"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Code",
        "href": "api/src/pyconverter/xml2py/ast_tree/Code.html#import-detail",
        "title": "Code > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import Code"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Link",
        "href": "api/src/pyconverter/xml2py/ast_tree/Link.html#link",
        "title": "Link",
        "section": "Link",
        "text": "Bases: Element\nProvides the link element.\nto_rst\nReturn a string to enable converting the element to an RST format.\nlinkend\nLink.\n__repr__\nLink.\nReturn a string to enable converting the element to an RST format.\nfrom src.pyconverter.xml2py.ast_tree import Link"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Link",
        "href": "api/src/pyconverter/xml2py/ast_tree/Link.html#overview",
        "title": "Link > Overview",
        "section": "Overview",
        "text": "to_rst\nReturn a string to enable converting the element to an RST format.\nlinkend\nLink.\n__repr__"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Link",
        "href": "api/src/pyconverter/xml2py/ast_tree/Link.html#import-detail",
        "title": "Link > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import Link"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Link",
        "href": "api/src/pyconverter/xml2py/ast_tree/Link.html#property-detail",
        "title": "Link > Property detail",
        "section": "Property detail",
        "text": "Link."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Link",
        "href": "api/src/pyconverter/xml2py/ast_tree/Link.html#method-detail",
        "title": "Link > Method detail",
        "section": "Method detail",
        "text": "Return a string to enable converting the element to an RST format."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/utils/index",
        "href": "api/src/pyconverter/xml2py/utils/index.html#the-utils-package",
        "title": "The utils package",
        "section": "The utils package",
        "text": "regex_pattern\nutils"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/utils/index",
        "href": "api/src/pyconverter/xml2py/utils/index.html#summary",
        "title": "The utils package > Summary",
        "section": "Summary",
        "text": "regex_pattern\nutils"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/GuiMenu",
        "href": "api/src/pyconverter/xml2py/ast_tree/GuiMenu.html#guimenu",
        "title": "GuiMenu",
        "section": "GuiMenu",
        "text": "Bases: Element\nProvides the GUI menu element.\nfrom src.pyconverter.xml2py.ast_tree import GuiMenu"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/GuiMenu",
        "href": "api/src/pyconverter/xml2py/ast_tree/GuiMenu.html#import-detail",
        "title": "GuiMenu > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import GuiMenu"
    },
    {
        "objectID": "api/index",
        "href": "api/index.html#api-reference",
        "title": "API reference",
        "section": "API reference",
        "text": "This section describes pyconverter-xml2py endpoints, their capabilities, and how\nto interact with them programmatically."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/FileName",
        "href": "api/src/pyconverter/xml2py/ast_tree/FileName.html#filename",
        "title": "FileName",
        "section": "FileName",
        "text": "Bases: Element\nProvides the filename element.\nto_rst\nReturn a string to enable converting the element to an RST format.\nReturn a string to enable converting the element to an RST format.\nfrom src.pyconverter.xml2py.ast_tree import FileName"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/FileName",
        "href": "api/src/pyconverter/xml2py/ast_tree/FileName.html#overview",
        "title": "FileName > Overview",
        "section": "Overview",
        "text": "to_rst\nReturn a string to enable converting the element to an RST format."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/FileName",
        "href": "api/src/pyconverter/xml2py/ast_tree/FileName.html#import-detail",
        "title": "FileName > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import FileName"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/FileName",
        "href": "api/src/pyconverter/xml2py/ast_tree/FileName.html#method-detail",
        "title": "FileName > Method detail",
        "section": "Method detail",
        "text": "Return a string to enable converting the element to an RST format."
    },
    {
        "objectID": "user_guide/objects",
        "href": "user_guide/objects.html#xml-objects",
        "title": "XML objects",
        "section": "XML objects",
        "text": "This section describes common objects handled by the converter. It is not\nan exhaustive list. For more information, see the API reference section.\nImages are copied from the given image path to package/doc/source/images/.\nThe images are then included in the ReStructured Text (RST) files with this\ncommand:\nImages present in the Parameters section do not render correctly.\nThis is due to an incompatibility with Python docstrings.\nTables are rendered correctly in the documentation. They do not need to have\na specific format because the converter uses flat-tables.\nInternal and external links are both rendered correctly.\n.. image:: image_path"
    },
    {
        "objectID": "user_guide/objects",
        "href": "user_guide/objects.html#images",
        "title": "XML objects > Images",
        "section": "Images",
        "text": "Images are copied from the given image path to package/doc/source/images/.\nThe images are then included in the ReStructured Text (RST) files with this\ncommand:\nImages present in the Parameters section do not render correctly.\nThis is due to an incompatibility with Python docstrings.\n.. image:: image_path"
    },
    {
        "objectID": "user_guide/objects",
        "href": "user_guide/objects.html#tables",
        "title": "XML objects > Tables",
        "section": "Tables",
        "text": "Tables are rendered correctly in the documentation. They do not need to have\na specific format because the converter uses flat-tables."
    },
    {
        "objectID": "user_guide/objects",
        "href": "user_guide/objects.html#links",
        "title": "XML objects > Links",
        "section": "Links",
        "text": "Internal and external links are both rendered correctly."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/InformalTable",
        "href": "api/src/pyconverter/xml2py/ast_tree/InformalTable.html#informaltable",
        "title": "InformalTable",
        "section": "InformalTable",
        "text": "Bases: Element\nProvides the informal table element.\nto_rst\nReturn a string to enable converting the element to an RST format.\nReturn a string to enable converting the element to an RST format.\nfrom src.pyconverter.xml2py.ast_tree import InformalTable"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/InformalTable",
        "href": "api/src/pyconverter/xml2py/ast_tree/InformalTable.html#overview",
        "title": "InformalTable > Overview",
        "section": "Overview",
        "text": "to_rst\nReturn a string to enable converting the element to an RST format."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/InformalTable",
        "href": "api/src/pyconverter/xml2py/ast_tree/InformalTable.html#import-detail",
        "title": "InformalTable > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import InformalTable"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/InformalTable",
        "href": "api/src/pyconverter/xml2py/ast_tree/InformalTable.html#method-detail",
        "title": "InformalTable > Method detail",
        "section": "Method detail",
        "text": "Return a string to enable converting the element to an RST format."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Sidebar",
        "href": "api/src/pyconverter/xml2py/ast_tree/Sidebar.html#sidebar",
        "title": "Sidebar",
        "section": "Sidebar",
        "text": "Bases: Element\nProvides the base element.\nfrom src.pyconverter.xml2py.ast_tree import Sidebar"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Sidebar",
        "href": "api/src/pyconverter/xml2py/ast_tree/Sidebar.html#import-detail",
        "title": "Sidebar > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import Sidebar"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/directory_format/index",
        "href": "api/src/pyconverter/xml2py/directory_format/index.html#the-directory_formatpy-module",
        "title": "The directory_format.py module",
        "section": "The directory_format.py module",
        "text": "get_paths\nGet the paths to the directories needed for the conversion.\nGet the paths to the directories needed for the conversion.\nPath object of the directory with the predefined format.\nPath object of the directory containing the graphics. The default is None,\nin which case the XML predefined directory format is used.\nPath object of the directory containing the links. The default is None,\nin which case the XML predefined directory format is used.\nPath object of the directory containing the terms. The default is None,\nin which case the XML predefined directory format is used.\nPath object of the directory containing the XML files. The default is None,\nin which case the XML predefined directory format is used.\nPath object of the directory containing the graphics.\nPath object of the directory containing the links.\nPath object of the directory containing the terms.\nPath object of the directory containing the XML files."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/directory_format/index",
        "href": "api/src/pyconverter/xml2py/directory_format/index.html#summary",
        "title": "The directory_format.py module > Summary",
        "section": "Summary",
        "text": "get_paths\nGet the paths to the directories needed for the conversion."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/directory_format/index",
        "href": "api/src/pyconverter/xml2py/directory_format/index.html#module-detail",
        "title": "The directory_format.py module > Module detail",
        "section": "Module detail",
        "text": "Get the paths to the directories needed for the conversion.\nPath object of the directory with the predefined format.\nPath object of the directory containing the graphics. The default is None,\nin which case the XML predefined directory format is used.\nPath object of the directory containing the links. The default is None,\nin which case the XML predefined directory format is used.\nPath object of the directory containing the terms. The default is None,\nin which case the XML predefined directory format is used.\nPath object of the directory containing the XML files. The default is None,\nin which case the XML predefined directory format is used.\nPath object of the directory containing the graphics.\nPath object of the directory containing the links.\nPath object of the directory containing the terms.\nPath object of the directory containing the XML files."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Primary",
        "href": "api/src/pyconverter/xml2py/ast_tree/Primary.html#primary",
        "title": "Primary",
        "section": "Primary",
        "text": "Bases: Element\nProvides the primary element.\nfrom src.pyconverter.xml2py.ast_tree import Primary"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Primary",
        "href": "api/src/pyconverter/xml2py/ast_tree/Primary.html#import-detail",
        "title": "Primary > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import Primary"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/utils/regex_pattern/index",
        "href": "api/src/pyconverter/xml2py/utils/regex_pattern/index.html#the-regex_patternpy-module",
        "title": "The regex_pattern.py module",
        "section": "The regex_pattern.py module",
        "text": "BEFORE_DEF\nGET_GROUP\nGET_CLASSNAME\nGET_TYPENAME_1OPT\nGET_TYPENAME_2OPT\nGET_IMPORTS"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/utils/regex_pattern/index",
        "href": "api/src/pyconverter/xml2py/utils/regex_pattern/index.html#summary",
        "title": "The regex_pattern.py module > Summary",
        "section": "Summary",
        "text": "BEFORE_DEF\nGET_GROUP\nGET_CLASSNAME\nGET_TYPENAME_1OPT\nGET_TYPENAME_2OPT\nGET_IMPORTS"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/utils/regex_pattern/index",
        "href": "api/src/pyconverter/xml2py/utils/regex_pattern/index.html#module-detail",
        "title": "The regex_pattern.py module > Module detail",
        "section": "Module detail",
        "text": ""
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ProgramListing",
        "href": "api/src/pyconverter/xml2py/ast_tree/ProgramListing.html#programlisting",
        "title": "ProgramListing",
        "section": "ProgramListing",
        "text": "Bases: Element\nProvides the program listing element.\nto_rst\nReturn a string to enable converting the element to an RST format.\nsource\nReturn the source value.\nReturn the source value.\nReturn a string to enable converting the element to an RST format.\nfrom src.pyconverter.xml2py.ast_tree import ProgramListing"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ProgramListing",
        "href": "api/src/pyconverter/xml2py/ast_tree/ProgramListing.html#overview",
        "title": "ProgramListing > Overview",
        "section": "Overview",
        "text": "to_rst\nReturn a string to enable converting the element to an RST format.\nsource\nReturn the source value."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ProgramListing",
        "href": "api/src/pyconverter/xml2py/ast_tree/ProgramListing.html#import-detail",
        "title": "ProgramListing > Import detail",
        "section": "Import detail",
        "text": "from src.pyconverter.xml2py.ast_tree import ProgramListing"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ProgramListing",
        "href": "api/src/pyconverter/xml2py/ast_tree/ProgramListing.html#property-detail",
        "title": "ProgramListing > Property detail",
        "section": "Property detail",
        "text": "Return the source value."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ProgramListing",
        "href": "api/src/pyconverter/xml2py/ast_tree/ProgramListing.html#method-detail",
        "title": "ProgramListing > Method detail",
        "section": "Method detail",
        "text": "Return a string to enable converting the element to an RST format."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/writer/index",
        "href": "api/src/pyconverter/xml2py/writer/index.html#the-writerpy-module",
        "title": "The writer.py module",
        "section": "The writer.py module",
        "text": "convert\nConvert an XML directory into an RST dictionary.\ncopy_template_package\nAdd files and directory from a template directory path to a new path.\nwrite_global__init__file\nWrite the __init__.py file for the package generated.\nwrite__init__file\n“\nget_library_path\nGet the desired library path with the following format:\nget_module_info\nGet the module name, class name, and module path from command\nget_class_info\nGet the class name, file name, and file path from the initial class name.\nwrite_source\nWrite out XML commands as Python source files.\nwrite_docs\nOutput to the autogenerated package directory.\nCONST\nSKIP_XML\nConvert an XML directory into an RST dictionary.\nPath to the directory containing the XML files to convert.\nDictionary with the following format: {\"command_name\": command_object}.\nDictionary with the following format: {\"initial_command_name\": \"python_name\"}.\nAdd files and directory from a template directory path to a new path.\nPath object containing the directory to copy.\nPath object containing the directory where the new files and directorys are to be added.\nWhether the directories in the path for the new package must be cleared before adding\nnew files. The default value is False.\nPath object containing the source files of the created\nxml-commands package.\nWrite the __init__.py file for the package generated.\nPath object of the directory containing the generated package.\n”\nWrite the __init__.py file within each module directory.\nPath object of the directory containing the generated package.\nGet the desired library path with the following format:\nnew_package_path/library_structure.\nFor instance, if library_name_structured in the config.yaml file is\n[\"pyconverter\", \"generatedcommands\"], the function returns\nnew_package_path/pyconverter/generatedcommands.\nPath objecy of the new package directory.\nPath to the configuration file.\nPath object of the new library structure.\nGet the module name, class name, and module path from command\ninformation.\nPath object to the library directory.\nCommand object.\nModule where the command is stored.\nClass where the command is stored.\nPath object of the module directory\nGet the class name, file name, and file path from the initial class name.\nInitial class name.\nPath object of the module directory.\nClass name.\nFile name.\nFile path.\nWrite out XML commands as Python source files.\nDictionary with the following format: {\"initial_command_name\": command_obj}.\nDictionary with the following format: {\"initial_command_name\": \"python_name\"}.\nPath object containing the XML directory to convert.\nPath object to generate the new package to.\nPath object containing the customized functions. The default value is None.\nPath object of the template to use. If no path is provided, the default template is used.\nPath object of the configuration file. The default value is Path(config.yaml).`.\nWhether the directories in the new package path must be cleared before adding\nnew files. The default value is True.\nWhether the package should be structured. The default value is True.\nWhether the structure map must be checked. The default value is False.\nWhether the files must be checked. The default value is False.\nList of module names created.\nDictionary with the following format:\n{'python_module_name': [{'python_class_name': python_names_list}]}.\nOutput to the autogenerated package directory.\nPath object of the new package folder.\nDictionary with the following format:\n{'python_module_name': [{'python_class_name': python_names_list}]}.\nPath object of the configuration file. The default value is Path(config.yaml).\nPath to the new document page."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/writer/index",
        "href": "api/src/pyconverter/xml2py/writer/index.html#summary",
        "title": "The writer.py module > Summary",
        "section": "Summary",
        "text": "convert\nConvert an XML directory into an RST dictionary.\ncopy_template_package\nAdd files and directory from a template directory path to a new path.\nwrite_global__init__file\nWrite the __init__.py file for the package generated.\nwrite__init__file\n“\nget_library_path\nGet the desired library path with the following format:\nget_module_info\nGet the module name, class name, and module path from command\nget_class_info\nGet the class name, file name, and file path from the initial class name.\nwrite_source\nWrite out XML commands as Python source files.\nwrite_docs\nOutput to the autogenerated package directory.\nCONST\nSKIP_XML"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/writer/index",
        "href": "api/src/pyconverter/xml2py/writer/index.html#module-detail",
        "title": "The writer.py module > Module detail",
        "section": "Module detail",
        "text": "Convert an XML directory into an RST dictionary.\nPath to the directory containing the XML files to convert.\nDictionary with the following format: {\"command_name\": command_object}.\nDictionary with the following format: {\"initial_command_name\": \"python_name\"}.\nAdd files and directory from a template directory path to a new path.\nPath object containing the directory to copy.\nPath object containing the directory where the new files and directorys are to be added.\nWhether the directories in the path for the new package must be cleared before adding\nnew files. The default value is False.\nPath object containing the source files of the created\nxml-commands package.\nWrite the __init__.py file for the package generated.\nPath object of the directory containing the generated package.\n”\nWrite the __init__.py file within each module directory.\nPath object of the directory containing the generated package.\nGet the desired library path with the following format:\nnew_package_path/library_structure.\nFor instance, if library_name_structured in the config.yaml file is\n[\"pyconverter\", \"generatedcommands\"], the function returns\nnew_package_path/pyconverter/generatedcommands.\nPath objecy of the new package directory.\nPath to the configuration file.\nPath object of the new library structure.\nGet the module name, class name, and module path from command\ninformation.\nPath object to the library directory.\nCommand object.\nModule where the command is stored.\nClass where the command is stored.\nPath object of the module directory\nGet the class name, file name, and file path from the initial class name.\nInitial class name.\nPath object of the module directory.\nClass name.\nFile name.\nFile path.\nWrite out XML commands as Python source files.\nDictionary with the following format: {\"initial_command_name\": command_obj}.\nDictionary with the following format: {\"initial_command_name\": \"python_name\"}.\nPath object containing the XML directory to convert.\nPath object to generate the new package to.\nPath object containing the customized functions. The default value is None.\nPath object of the template to use. If no path is provided, the default template is used.\nPath object of the configuration file. The default value is Path(config.yaml).`.\nWhether the directories in the new package path must be cleared before adding\nnew files. The default value is True.\nWhether the package should be structured. The default value is True.\nWhether the structure map must be checked. The default value is False.\nWhether the files must be checked. The default value is False.\nList of module names created.\nDictionary with the following format:\n{'python_module_name': [{'python_class_name': python_names_list}]}.\nOutput to the autogenerated package directory.\nPath object of the new package folder.\nDictionary with the following format:\n{'python_module_name': [{'python_class_name': python_names_list}]}.\nPath object of the configuration file. The default value is Path(config.yaml).\nPath to the new document page."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/load_xml_doc/index",
        "href": "api/src/pyconverter/xml2py/load_xml_doc/index.html#the-load_xml_docpy-module",
        "title": "The load_xml_doc.py module",
        "section": "The load_xml_doc.py module",
        "text": "load_links\nLoad all links.\nload_fcache\nLoad all graphics and cache the base name without the extension.\nload_docu_global\nLoad all global documents.\nload_terms\nLoad all needed terms.\nLoad all links.\nPath to the links directory.\nDictionary containing the link names and the needed information to render the links.\nLoad all graphics and cache the base name without the extension.\nPath object of the graphic directory.\nDictionary containing the base names of the graphics and their path.\nLoad all global documents.\nPath object of the terms directory.\nDictionary containing the entity names from the documentation and their path.\nLoad all needed terms.\nPath object of the terms directory.\nDictionary containing the entity names from the documentation and their path.\nDictionary containing the link names and the needed information to render the links.\nDictionary containing the base names of the graphics and their path.\nName of the file containing the variable terms to import.\nThe default value is \"build_variables.ent\".\nName of the file containing the global terms to import.\nThe default is \"terms_global.ent\".\nName of the file containing the manual entities to import.\nThe default is \"manuals.ent\".\nName of the directory containg the entities for the special characters.\nThe default is \"ent\".\nDictionary containing the entity names and their values.\nObject containing the version variables of the XML documentation."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/load_xml_doc/index",
        "href": "api/src/pyconverter/xml2py/load_xml_doc/index.html#summary",
        "title": "The load_xml_doc.py module > Summary",
        "section": "Summary",
        "text": "load_links\nLoad all links.\nload_fcache\nLoad all graphics and cache the base name without the extension.\nload_docu_global\nLoad all global documents.\nload_terms\nLoad all needed terms."
    },
    {
        "objectID": "api/src/pyconverter/xml2py/load_xml_doc/index",
        "href": "api/src/pyconverter/xml2py/load_xml_doc/index.html#module-detail",
        "title": "The load_xml_doc.py module > Module detail",
        "section": "Module detail",
        "text": "Load all links.\nPath to the links directory.\nDictionary containing the link names and the needed information to render the links.\nLoad all graphics and cache the base name without the extension.\nPath object of the graphic directory.\nDictionary containing the base names of the graphics and their path.\nLoad all global documents.\nPath object of the terms directory.\nDictionary containing the entity names from the documentation and their path.\nLoad all needed terms.\nPath object of the terms directory.\nDictionary containing the entity names from the documentation and their path.\nDictionary containing the link names and the needed information to render the links.\nDictionary containing the base names of the graphics and their path.\nName of the file containing the variable terms to import.\nThe default value is \"build_variables.ent\".\nName of the file containing the global terms to import.\nThe default is \"terms_global.ent\".\nName of the file containing the manual entities to import.\nThe default is \"manuals.ent\".\nName of the directory containg the entities for the special characters.\nThe default is \"ent\".\nDictionary containing the entity names and their values.\nObject containing the version variables of the XML documentation."
    }
]