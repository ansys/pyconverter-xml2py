





The ``load_xml_doc.py`` module
==============================

.. py:module:: src.pyconverter.xml2py.load_xml_doc


Summary
-------








.. py:currentmodule:: load_xml_doc
.. tab-set::







    .. tab-item:: Functions

        .. list-table::
          :header-rows: 0
          :widths: auto


          * - :py:obj:`~load_links`
            - Load all links.


          * - :py:obj:`~load_fcache`
            - Load all graphics and cache the base name without the extension.


          * - :py:obj:`~load_docu_global`
            - Load all global documents.


          * - :py:obj:`~load_terms`
            - Load all needed terms.























Module detail
-------------

.. py:function:: load_links(link_path: pathlib.Path) -> dict

   
   Load all links.


   :Parameters:

       **link_path: Path**
           Path to the links directory.



   :Returns:

       :class:`python:dict`
           Dictionary containing the link names and the needed information to render the links.











   ..
       !! processed by numpydoc !!

.. py:function:: load_fcache(graph_path: pathlib.Path) -> dict

   
   Load all graphics and cache the base name without the extension.


   :Parameters:

       **graph_path: Path**
           Path object of the graphic directory.



   :Returns:

       :class:`python:dict`
           Dictionary containing the base names of the graphics and their path.











   ..
       !! processed by numpydoc !!

.. py:function:: load_docu_global(term_path: pathlib.Path) -> dict

   
   Load all global documents.


   :Parameters:

       **term_path: Path**
           Path object of the terms directory.



   :Returns:

       :class:`python:dict`
           Dictionary containing the entity names from the documentation and their path.











   ..
       !! processed by numpydoc !!

.. py:function:: load_terms(term_path: pathlib.Path, docu_global: dict, links: dict, fcache: dict, variable_file: str = 'build_variables.ent', global_terms_file: str = 'terms_global.ent', manual_file: str = 'manuals.ent', group_code_file: str = '../xml/ansys.groupcodes.commands.ent', character_directory: str = 'ent') -> Tuple[dict, pyconverter.xml2py.version_variables.Autogenerateddirectory]

   
   Load all needed terms.


   :Parameters:

       **term_path: Path**
           Path object of the terms directory.

       **docu_global: dict**
           Dictionary containing the entity names from the documentation and their path.

       **links: dict**
           Dictionary containing the link names and the needed information to render the links.

       **fcache: dict**
           Dictionary containing the base names of the graphics and their path.

       **variable_file: str, optional**
           Name of the file containing the variable terms to import.
           The default value is ``"build_variables.ent"``.

       **global_terms_file: str, optional**
           Name of the file containing the global terms to import.
           The default is ``"terms_global.ent"``.

       **manual_file: str, optional**
           Name of the file containing the manual entities to import.
           The default is ``"manuals.ent"``.

       **character_directory: str, optional**
           Name of the directory containg the entities for the special characters.
           The default is ``"ent"``.



   :Returns:

       :class:`python:dict`
           Dictionary containing the entity names and their values.

       :obj:`Autogenerateddirectory`
           Object containing the version variables of the XML documentation.











   ..
       !! processed by numpydoc !!



