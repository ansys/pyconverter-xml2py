[{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Chapter.html#chapter","title":"Chapter","text":"Chapter\n\n\n\nclass src.pyconverter.xml2py.ast_tree.Chapter(element, parse_children=True)\n\nBases: Element\n\nProvides the chapter element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Chapter.html#overview","title":"Chapter > Overview","text":"Overview\n\nProperties\n\n\n\n\n\nhelpstring\n\nValue for the helpstring parameter contained in the chapter element.\n\nSpecial methods\n\n\n\n\n\n__repr__\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Chapter.html#import-detail","title":"Chapter > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Chapter.html#property-detail","title":"Chapter > Property detail","text":"Property detail\n\n\n\nproperty Chapter.helpstring\n\nValue for the helpstring parameter contained in the chapter element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Chapter.html#method-detail","title":"Chapter > Method detail","text":"Method detail\n\n\n\nChapter.__repr__()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/InformalFigure.html#informalfigure","title":"InformalFigure","text":"InformalFigure\n\n\n\nclass src.pyconverter.xml2py.ast_tree.InformalFigure(element, parse_children=True)\n\nBases: Element\n\nProvides the base element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/InformalFigure.html#import-detail","title":"InformalFigure > Import detail","text":"Import detail\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/ItemizedList.html#itemizedlist","title":"ItemizedList","text":"ItemizedList\n\n\n\nclass src.pyconverter.xml2py.ast_tree.ItemizedList(element, parse_children=True)\n\nBases: Element\n\nProvides the itemized list element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/ItemizedList.html#overview","title":"ItemizedList > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nto_rst\n\nReturn a string to enable converting the element to an RST format.\n\nSpecial methods\n\n\n\n\n\n__repr__\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/ItemizedList.html#import-detail","title":"ItemizedList > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/ItemizedList.html#method-detail","title":"ItemizedList > Method detail","text":"Method detail\n\n\n\nItemizedList.__repr__()\n\n\n\n\n\nItemizedList.to_rst(indent='', max_length=100, links=None, base_url=None, fcache=None)\n\nReturn a string to enable converting the element to an RST format.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/CiteTitle.html#citetitle","title":"CiteTitle","text":"CiteTitle\n\n\n\nclass src.pyconverter.xml2py.ast_tree.CiteTitle(element, parse_children=True)\n\nBases: Element\n\nProvides the base element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/CiteTitle.html#import-detail","title":"CiteTitle > Import detail","text":"Import detail\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Phrase.html#phrase","title":"Phrase","text":"Phrase\n\n\n\nclass src.pyconverter.xml2py.ast_tree.Phrase(element, parse_children=True)\n\nBases: Paragraph\n\nProvides the phrase element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Phrase.html#overview","title":"Phrase > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nto_rst\n\nReturn a string to enable converting the element to an RST format.\n\nSpecial methods\n\n\n\n\n\n__repr__\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Phrase.html#import-detail","title":"Phrase > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Phrase.html#method-detail","title":"Phrase > Method detail","text":"Method detail\n\n\n\nPhrase.__repr__()\n\n\n\n\n\nPhrase.to_rst(indent='', max_length=100, links=None, base_url=None, fcache=None)\n\nReturn a string to enable converting the element to an RST format.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/GuiButton.html#guibutton","title":"GuiButton","text":"GuiButton\n\n\n\nclass src.pyconverter.xml2py.ast_tree.GuiButton(element, parse_children=True)\n\nBases: Element\n\nProvides the base element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/GuiButton.html#import-detail","title":"GuiButton > Import detail","text":"Import detail\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Note.html#note","title":"Note","text":"Note\n\n\n\nclass src.pyconverter.xml2py.ast_tree.Note(element, parse_children=True)\n\nBases: Element\n\nProvides the note element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Note.html#import-detail","title":"Note > Import detail","text":"Import detail\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Sidebar.html#sidebar","title":"Sidebar","text":"Sidebar\n\n\n\nclass src.pyconverter.xml2py.ast_tree.Sidebar(element, parse_children=True)\n\nBases: Element\n\nProvides the base element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Sidebar.html#import-detail","title":"Sidebar > Import detail","text":"Import detail\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Envar.html#envar","title":"Envar","text":"Envar\n\n\n\nclass src.pyconverter.xml2py.ast_tree.Envar(element, parse_children=True)\n\nBases: Element\n\nProvides the base element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Envar.html#import-detail","title":"Envar > Import detail","text":"Import detail\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Interface.html#interface","title":"Interface","text":"Interface\n\n\n\nclass src.pyconverter.xml2py.ast_tree.Interface(element, parse_children=True)\n\nBases: Element\n\nProvides the base element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Interface.html#import-detail","title":"Interface > Import detail","text":"Import detail\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Emphasis.html#emphasis","title":"Emphasis","text":"Emphasis\n\n\n\nclass src.pyconverter.xml2py.ast_tree.Emphasis(element, parse_children=True)\n\nBases: Element\n\nProvides the emphasis element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Emphasis.html#overview","title":"Emphasis > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nto_rst\n\nReturn a string to enable converting the element to an RST format.\n\nProperties\n\n\n\n\n\nrole\n\nReturn the role parameter value contained in the Emphasis element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Emphasis.html#import-detail","title":"Emphasis > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Emphasis.html#property-detail","title":"Emphasis > Property detail","text":"Property detail\n\n\n\nproperty Emphasis.role\n\nReturn the role parameter value contained in the Emphasis element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Emphasis.html#method-detail","title":"Emphasis > Method detail","text":"Method detail\n\n\n\nEmphasis.to_rst(indent='', max_length=100, links=None, base_url=None)\n\nReturn a string to enable converting the element to an RST format.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Paragraph.html#paragraph","title":"Paragraph","text":"Paragraph\n\n\n\nclass src.pyconverter.xml2py.ast_tree.Paragraph(element, parse_children=True)\n\nBases: Element\n\nProvides the paragraph element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Paragraph.html#overview","title":"Paragraph > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nto_rst\n\nReturn a string to enable converting the element to an RST format.\n\nProperties\n\n\n\n\n\nrevisionflag\n\nReturn the revision flag.\n\nSpecial methods\n\n\n\n\n\n__repr__\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Paragraph.html#import-detail","title":"Paragraph > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Paragraph.html#property-detail","title":"Paragraph > Property detail","text":"Property detail\n\n\n\nproperty Paragraph.revisionflag\n\nReturn the revision flag."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Paragraph.html#method-detail","title":"Paragraph > Method detail","text":"Method detail\n\n\n\nParagraph.__repr__()\n\n\n\n\n\nParagraph.to_rst(indent='', max_length=100, links=None, base_url=None, fcache=None)\n\nReturn a string to enable converting the element to an RST format.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Command.html#command","title":"Command","text":"Command\n\n\n\nclass src.pyconverter.xml2py.ast_tree.Command(element, parse_children=True)\n\nBases: Element\n\nProvides the command element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Command.html#overview","title":"Command > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nto_rst\n\nReturn a string to enable converting the element to an RST format.\n\nProperties\n\n\n\n\n\ncommand\n\nName of the command.\n\ntail_no_args\n\nTail of the element after removing all its arguments.\n\nhas_args\n\nReturn whether the element has arguments.\n\nargs\n\nAny terms immediately following the command.\n\npy_args\n\nString containing the arguments of the element.\n\npy_cmd\n\nPythonic name of the command.\n\nsphinx_cmd\n\nString to refer to the Python command with Sphinx.\n\nSpecial methods\n\n\n\n\n\n__repr__\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Command.html#import-detail","title":"Command > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Command.html#property-detail","title":"Command > Property detail","text":"Property detail\n\n\n\nproperty Command.command\n\nName of the command.\n\n\n\nproperty Command.tail_no_args\n\nTail of the element after removing all its arguments.\n\n\n\nproperty Command.has_args\n\nReturn whether the element has arguments.\n\n\n\nproperty Command.args\n\nAny terms immediately following the command.\n\n\n\nproperty Command.py_args\n\nString containing the arguments of the element.\n\n\n\nproperty Command.py_cmd\n\nPythonic name of the command.\n\n\n\nproperty Command.sphinx_cmd\n\nString to refer to the Python command with Sphinx."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Command.html#method-detail","title":"Command > Method detail","text":"Method detail\n\n\n\nCommand.__repr__()\n\n\n\n\n\nCommand.to_rst(indent='', max_length=100)\n\nReturn a string to enable converting the element to an RST format.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/InformalExample.html#informalexample","title":"InformalExample","text":"InformalExample\n\n\n\nclass src.pyconverter.xml2py.ast_tree.InformalExample(element, parse_children=True)\n\nBases: Element\n\nProvides the informal example element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/InformalExample.html#overview","title":"InformalExample > Overview","text":"Overview\n\nSpecial methods\n\n\n\n\n\n__repr__\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/InformalExample.html#import-detail","title":"InformalExample > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/InformalExample.html#method-detail","title":"InformalExample > Method detail","text":"Method detail\n\n\n\nInformalExample.__repr__()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/IndexTerm.html#indexterm","title":"IndexTerm","text":"IndexTerm\n\n\n\nclass src.pyconverter.xml2py.ast_tree.IndexTerm(element, parse_children=True)\n\nBases: Element\n\nProvides the index term element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/IndexTerm.html#import-detail","title":"IndexTerm > Import detail","text":"Import detail\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Imageobject.html#imageobject","title":"Imageobject","text":"Imageobject\n\n\n\nclass src.pyconverter.xml2py.ast_tree.Imageobject(element, parse_children=True)\n\nBases: Element\n\nProvides the base element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Imageobject.html#import-detail","title":"Imageobject > Import detail","text":"Import detail\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Refsect3.html#refsect3","title":"Refsect3","text":"Refsect3\n\n\n\nclass src.pyconverter.xml2py.ast_tree.Refsect3(element, parse_children=True)\n\nBases: Element\n\nProvides the base element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Refsect3.html#import-detail","title":"Refsect3 > Import detail","text":"Import detail\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Section1.html#section1","title":"Section1","text":"Section1\n\n\n\nclass src.pyconverter.xml2py.ast_tree.Section1(element, parse_children=True)\n\nBases: Element\n\nProvides the base element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Section1.html#import-detail","title":"Section1 > Import detail","text":"Import detail\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/UserInput.html#userinput","title":"UserInput","text":"UserInput\n\n\n\nclass src.pyconverter.xml2py.ast_tree.UserInput(element, parse_children=True)\n\nBases: ProgramListing\n\nProvides the user input element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/UserInput.html#import-detail","title":"UserInput > Import detail","text":"Import detail\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/ComputerOutput.html#computeroutput","title":"ComputerOutput","text":"ComputerOutput\n\n\n\nclass src.pyconverter.xml2py.ast_tree.ComputerOutput(element, parse_children=True)\n\nBases: Element\n\nProvides the computer output element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/ComputerOutput.html#overview","title":"ComputerOutput > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nto_rst\n\nReturn a string to enable converting the element to an RST format."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/ComputerOutput.html#import-detail","title":"ComputerOutput > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/ComputerOutput.html#method-detail","title":"ComputerOutput > Method detail","text":"Method detail\n\n\n\nComputerOutput.to_rst(indent='', max_length=100)\n\nReturn a string to enable converting the element to an RST format.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/ArgumentList.html#argumentlist","title":"ArgumentList","text":"ArgumentList\n\n\n\nclass src.pyconverter.xml2py.ast_tree.ArgumentList(py_name: str, url: str, terms: dict, list_entry: VarlistEntry, args: List)\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/ArgumentList.html#overview","title":"ArgumentList > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nremove_last_arg\n\n\n\nProperties\n\n\n\n\n\narguments\n\nReturn a list of Argument objects.\n\npy_name\n\n\n\ninitial_args\n\n\n\npy_arg_names\n\n\n\nadditional_args\n\n\n\nSpecial methods\n\n\n\n\n\n__iadd__\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/ArgumentList.html#import-detail","title":"ArgumentList > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/ArgumentList.html#property-detail","title":"ArgumentList > Property detail","text":"Property detail\n\n\n\nproperty ArgumentList.arguments: List[Argument]\n\nReturn a list of Argument objects.\n\n\n\nproperty ArgumentList.py_name\n\n\n\n\n\nproperty ArgumentList.initial_args\n\n\n\n\n\nproperty ArgumentList.py_arg_names\n\n\n\n\n\nproperty ArgumentList.additional_args\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/ArgumentList.html#method-detail","title":"ArgumentList > Method detail","text":"Method detail\n\n\n\nArgumentList.__iadd__(argument_list)\n\n\n\n\n\nArgumentList.remove_last_arg()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/writer/index.html#the-writerpy-module","title":"The writer.py module","text":"The writer.py module\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/writer/index.html#summary","title":"The writer.py module > Summary","text":"Summary\n\nFunctions\n\n\n\n\n\nconvert\n\nConvert an XML directory into an RST dictionary.\n\ncopy_template_package\n\nAdd files and directory from a template directory path to a new path.\n\nwrite_global__init__file\n\nWrite the __init__.py file for the package generated.\n\nwrite__init__file\n\n“\n\nget_module_info\n\nGet the module name, class name, and module path from command\n\nget_class_info\n\nGet the class name, file name, and file path from the initial class name.\n\nwrite_source\n\nWrite out XML commands as Python source files.\n\nwrite_docs\n\nOutput to the autogenerated package directory.\n\nConstants\n\n\n\n\n\nCONST\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/writer/index.html#module-detail","title":"The writer.py module > Module detail","text":"Module detail\n\n\n\nwriter.convert(directory_path)\n\nConvert an XML directory into an RST dictionary.\n\nParameters\n\ndirectory_path: Path\n\nPath to the directory containing the XML files to convert.\n\nReturns\n\npython:dict\n\nDictionary with the following format: {\"command_name\": command_object}.\n\npython:dict\n\nDictionary with the following format: {\"initial_command_name\": \"python_name\"}.\n\n\n\nwriter.copy_template_package(template_path: pathlib.Path, new_package_path: pathlib.Path, clean: bool = False) -> pathlib.Path\n\nAdd files and directory from a template directory path to a new path.\n\nParameters\n\ntemplate_path: Path\n\nPath object containing the directory to copy.\n\nnew_package_path: Path\n\nPath object containing the directory where the new files and directorys are to be added.\n\nclean: bool, optional\n\nWhether the directories in the path for the new package must be cleared before adding\nnew files. The default value is False.\n\nReturns\n\nPath\n\nPath object containing the source files of the created\nxml-commands package.\n\n\n\nwriter.write_global__init__file(library_path: pathlib.Path, config_path: pathlib.Path) -> None\n\nWrite the __init__.py file for the package generated.\n\nParameters\n\nlibrary_path: Path\n\nPath object of the directory containing the generated package.\n\n\n\nwriter.write__init__file(library_path: pathlib.Path) -> None\n\n”\nWrite the __init__.py file within each module directory.\n\nParameters\n\nlibrary_path: Path\n\nPath object of the directory containing the generated package.\n\n\n\nwriter.get_module_info(library_path: pathlib.Path, command: pyconverter.xml2py.ast_tree.XMLCommand) -> Tuple[str, str, pathlib.Path]\n\nGet the module name, class name, and module path from command\ninformation.\n\nParameters\n\nlibrary_path: Path\n\nPath object to the library directory.\n\ncommand: ast.XMLCommand\n\nCommand object.\n\nReturns\n\npython:str\n\nModule where the command is stored.\n\npython:str\n\nClass where the command is stored.\n\nPath\n\nPath object of the module directory\n\n\n\nwriter.get_class_info(initial_class_name: str, module_path: pathlib.Path) -> Tuple[str, str, pathlib.Path]\n\nGet the class name, file name, and file path from the initial class name.\n\nParameters\n\ninitial_class_name: str\n\nInitial class name.\n\nmodule_path: Path\n\nPath object of the module directory.\n\nReturns\n\npython:str\n\nClass name.\n\npython:str\n\nFile name.\n\nPath\n\nFile path.\n\n\n\nwriter.write_source(command_map: dict, name_map: dict, xml_doc_path: pathlib.Path, target_path: pathlib.Path, path_custom_functions: pathlib.Path | None = None, template_path: pathlib.Path | None = None, config_path: pathlib.Path = Path('config.yaml'), clean: bool = True, structured: bool = True, check_structure_map: bool = False, check_files: bool = True) -> Tuple[list, dict]\n\nWrite out XML commands as Python source files.\n\nParameters\n\ncommand_map: dict\n\nDictionary with the following format: {\"initial_command_name\": command_obj}.\n\nname_map: dict\n\nDictionary with the following format: {\"initial_command_name\": \"python_name\"}.\n\nxml_doc_path: Path\n\nPath object containing the XML directory to convert.\n\ntarget_path: Path\n\nPath object to generate the new package to.\n\npath_custom_functions: Path, optional\n\nPath object containing the customized functions. The default value is None.\n\ntemplate_path: Path, optional\n\nPath object of the template to use. If no path is provided, the default template is used.\n\nconfig_path: Path, optional\n\nPath object of the configuration file. The default value is Path(config.yaml).`.\n\nclean: bool, optional\n\nWhether the directories in the new package path must be cleared before adding\nnew files. The default value is True.\n\nstructured: bool, optional\n\nWhether the package should be structured. The default value is True.\n\ncheck_structure_map: bool, optional\n\nWhether the structure map must be checked. The default value is False.\n\ncheck_files: bool, optional\n\nWhether the files must be checked. The default value is False.\n\nReturns\n\npython:list\n\nList of module names created.\n\npython:dict\n\nDictionary with the following format:\n{'python_module_name': [{'python_class_name': python_names_list}]}.\n\n\n\nwriter.write_docs(package_path: pathlib.Path, package_structure: dict = None, config_path: pathlib.Path = Path('config.yaml')) -> pathlib.Path\n\nOutput to the autogenerated package directory.\n\nParameters\n\npackage_path: Path\n\nPath object of the new package folder.\n\npackage_structure: dict, optional\n\nDictionary with the following format:\n{'python_module_name': [{'python_class_name': python_names_list}]}.\n\nconfig_path: Path, optional\n\nPath object of the configuration file. The default value is Path(config.yaml).\n\nReturns\n\nPath\n\nPath to the new document page.\n\n\n\nwriter.CONST\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/XMLCommand.html#xmlcommand","title":"XMLCommand","text":"XMLCommand\n\n\n\nclass src.pyconverter.xml2py.ast_tree.XMLCommand(filename, refentry, terms, docu_global, version_variables, links, fcache, meta_only=False)\n\nBases: Element\n\nProvides the XML command from the documentation."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/XMLCommand.html#overview","title":"XMLCommand > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nset_notes_and_other_parameters\n\nSet the notes and other parameters of the command.\n\npy_signature\n\nBeginning of the Python command’s definition.\n\ncustom_notes\n\nCustomized notes for the command.\n\npy_docstring\n\nPython docstring of the command.\n\npy_notes\n\nPython-formatted notes string.\n\npy_parm\n\nPython parameter’s string.\n\npy_source\n\nReturn the Python source.\n\nto_python\n\nReturn the complete Python definition of the command.\n\nProperties\n\n\n\n\n\nxml_filename\n\nSource filename of the command.\n\npy_name\n\nPython-compatible name.\n\nargs\n\nCommand arguments.\n\ndefault\n\nCommand default.\n\narg_desc\n\nArgument object list of the command.\n\nshort_desc\n\nShort description of the command.\n\nname\n\nName of the XML command.\n\npy_args\n\n\n\nis_archived\n\nFlag indicating if the command is archived.\n\ngroup\n\nGroup of the command.\n\nother_parameters\n\nOther parameters of the command.\n\nnotes\n\nNotes of the command.\n\nurl\n\nURL to the Ansys command documentation.\n\nfilename\n\nCommand filename\n\nSpecial methods\n\n\n\n\n\n__repr__\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/XMLCommand.html#import-detail","title":"XMLCommand > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/XMLCommand.html#property-detail","title":"XMLCommand > Property detail","text":"Property detail\n\n\n\nproperty XMLCommand.xml_filename\n\nSource filename of the command.\n\n\n\nproperty XMLCommand.py_name\n\nPython-compatible name.\n\n\n\nproperty XMLCommand.args\n\nCommand arguments.\n\n\n\nproperty XMLCommand.default\n\nCommand default.\n\n\n\nproperty XMLCommand.arg_desc: List[Argument]\n\nArgument object list of the command.\n\n\n\nproperty XMLCommand.short_desc\n\nShort description of the command.\n\n\n\nproperty XMLCommand.name\n\nName of the XML command.\n\n\n\nproperty XMLCommand.py_args\n\n\n\n\n\nproperty XMLCommand.is_archived\n\nFlag indicating if the command is archived.\n\n\n\nproperty XMLCommand.group\n\nGroup of the command.\n\n\n\nproperty XMLCommand.other_parameters\n\nOther parameters of the command.\n\n\n\nproperty XMLCommand.notes\n\nNotes of the command.\n\n\n\nproperty XMLCommand.url\n\nURL to the Ansys command documentation.\n\n\n\nproperty XMLCommand.filename\n\nCommand filename"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/XMLCommand.html#method-detail","title":"XMLCommand > Method detail","text":"Method detail\n\n\n\nXMLCommand.set_notes_and_other_parameters()\n\nSet the notes and other parameters of the command.\n\n\n\nXMLCommand.py_signature(custom_functions: pyconverter.xml2py.custom_functions.CustomFunctions, indent='') -> str\n\nBeginning of the Python command’s definition.\n\n\n\nXMLCommand.custom_notes(custom_functions: pyconverter.xml2py.custom_functions.CustomFunctions = None, automated_notes: List[str] = None) -> List[str]\n\nCustomized notes for the command.\n\n\n\nXMLCommand.py_docstring(custom_functions: pyconverter.xml2py.custom_functions.CustomFunctions, comment_command_dict: dict = None) -> str\n\nPython docstring of the command.\n\nParameters\n\ncustom_functions\n\nCustomFunctions\n\nCustom functions object.\n\ncomment_command_dict: dict, optional\n\nDictionary of commands associated to a list of comments with the\nfollowing format: {\"command\": [[\"message_type\", \"message\"]}.\nThe default is None.\n\n\n\nXMLCommand.py_notes(note_elem_list, section_title)\n\nPython-formatted notes string.\n\n\n\nXMLCommand.__repr__()\n\n\n\n\n\nXMLCommand.py_parm(custom_functions=None, links=None, base_url=None, fcache=None)\n\nPython parameter’s string.\n\n\n\nXMLCommand.py_source(custom_functions=None, indent='')\n\nReturn the Python source.\n\nParameters\n\ncustom_functions: CustomFunctions, optional\n\nCustom functions to add to the command. The default is None.\n\n\n\nXMLCommand.to_python(custom_functions=None, comment_command_dict=None, indent='', image_folder_path: pathlib.Path = None)\n\nReturn the complete Python definition of the command.\n\nParameters\n\ncustom_functions: CustomFunctions, optional\n\nCustom functions to add to the command.\nThe default is None.\n\ncomment_command_dict: dict, optional\n\nDictionary of commands associated to a list of comments with the\nfollowing format: {\"command\": [[\"message_type\", \"message\"]}.\nThe default is None.\n\nindent: str, optional\n\nIndentation of the Python function. The default is \"\".\n\nReturns\n\npython:str\n\nPython function of the command including the converted docstring.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/VarlistEntry.html#varlistentry","title":"VarlistEntry","text":"VarlistEntry\n\n\n\nclass src.pyconverter.xml2py.ast_tree.VarlistEntry(element, parse_children=True)\n\nBases: Element\n\nProvides the variable list entry element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/VarlistEntry.html#overview","title":"VarlistEntry > Overview","text":"Overview\n\nMethods\n\n\n\n\n\npy_term\n\nPython-compatible term.\n\npy_text\n\nRemove mention of graphical interaction.\n\nto_rst\n\nReturn a string to enable converting the element to an RST format.\n\nProperties\n\n\n\n\n\nparm_types\n\nOne or more parameter types.\n\nterm\n\nTerm of the element.\n\ntext\n\nText of the element.\n\nactive\n\nReturn if this argument is active.\n\nis_arg\n\nReturn True when this variable list is for an argument.\n\nSpecial methods\n\n\n\n\n\n__repr__\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/VarlistEntry.html#import-detail","title":"VarlistEntry > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/VarlistEntry.html#property-detail","title":"VarlistEntry > Property detail","text":"Property detail\n\n\n\nproperty VarlistEntry.parm_types\n\nOne or more parameter types.\n\nThis is guessed from any subvarlists. If unavailable, then it’s guessed\nfrom the description of the variable.\n\nThis is either a string, float, or integer (or some combination thereof).\n\n\n\nproperty VarlistEntry.term\n\nTerm of the element.\n\n\n\nproperty VarlistEntry.text\n\nText of the element.\n\n\n\nproperty VarlistEntry.active\n\nReturn if this argument is active.\n\n\n\nproperty VarlistEntry.is_arg\n\nReturn True when this variable list is for an argument."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/VarlistEntry.html#method-detail","title":"VarlistEntry > Method detail","text":"Method detail\n\n\n\nVarlistEntry.py_term(links=None, base_url=None)\n\nPython-compatible term.\n\n\n\nVarlistEntry.__repr__()\n\n\n\n\n\nVarlistEntry.py_text(links=None, base_url=None, fcache=None)\n\nRemove mention of graphical interaction.\n\n\n\nVarlistEntry.to_rst(indent='', max_length=100, links=None, base_url=None, fcache=None)\n\nReturn a string to enable converting the element to an RST format.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/TGroup.html#tgroup","title":"TGroup","text":"TGroup\n\n\n\nclass src.pyconverter.xml2py.ast_tree.TGroup(element, parse_children=True)\n\nBases: Element\n\nProvides the tgroup element, which contains the header and body rows of a table."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/TGroup.html#overview","title":"TGroup > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nto_rst\n\nReturn a string to enable converting the element to an RST format.\n\nProperties\n\n\n\n\n\nn_col\n\nNumber of columns.\n\nthead\n\nTHead.\n\ntbody\n\nTBody.\n\nrow_in_tbody\n\nList of the rows in the TBody."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/TGroup.html#import-detail","title":"TGroup > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/TGroup.html#property-detail","title":"TGroup > Property detail","text":"Property detail\n\n\n\nproperty TGroup.n_col\n\nNumber of columns.\n\n\n\nproperty TGroup.thead\n\nTHead.\n\n\n\nproperty TGroup.tbody\n\nTBody.\n\n\n\nproperty TGroup.row_in_tbody\n\nList of the rows in the TBody."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/TGroup.html#method-detail","title":"TGroup > Method detail","text":"Method detail\n\n\n\nTGroup.to_rst(indent='', links=None, base_url=None)\n\nReturn a string to enable converting the element to an RST format.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Figure.html#figure","title":"Figure","text":"Figure\n\n\n\nclass src.pyconverter.xml2py.ast_tree.Figure(element, parse_children=True)\n\nBases: Element\n\nProvides the figure element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Figure.html#overview","title":"Figure > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nto_rst\n\nReturn a string to enable converting the element to an RST format.\n\nProperties\n\n\n\n\n\ntitle\n\nFirst title element found in the figure element.\n\ngraphic\n\nFirst graphic element found in the figure element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Figure.html#import-detail","title":"Figure > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Figure.html#property-detail","title":"Figure > Property detail","text":"Property detail\n\n\n\nproperty Figure.title\n\nFirst title element found in the figure element.\n\n\n\nproperty Figure.graphic\n\nFirst graphic element found in the figure element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Figure.html#method-detail","title":"Figure > Method detail","text":"Method detail\n\n\n\nFigure.to_rst(indent='', max_length=100, fcache=None)\n\nReturn a string to enable converting the element to an RST format.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/download/index.html#the-downloadpy-module","title":"The download.py module","text":"The download.py module\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/download/index.html#summary","title":"The download.py module > Summary","text":"Summary\n\nFunctions\n\n\n\n\n\ndownload\n\nThis function initially comes from the following GitHub repository:\n\ndownload_folder\n\nThis function initially comes from the following GitHub repository:\n\ndownload_template\n\nDownload the templage package provided by default."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/download/index.html#description","title":"The download.py module > Description","text":"Description\n\nFunctions to download template datasets from the pyconverter-xml2py repository."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/download/index.html#module-detail","title":"The download.py module > Module detail","text":"Module detail\n\n\n\ndownload.download(c: github.ContentFile, out: pathlib.Path) -> None\n\nThis function initially comes from the following GitHub repository:\nhttps://github.com/Nordgaren/Github-Folder-Downloader\n\n\n\ndownload.download_folder(repo: github.Repository, folder: str, out: str, recursive: bool) -> None\n\nThis function initially comes from the following GitHub repository:\nhttps://github.com/Nordgaren/Github-Folder-Downloader\n\n\n\ndownload.download_template() -> None\n\nDownload the templage package provided by default.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/ProductName.html#productname","title":"ProductName","text":"ProductName\n\n\n\nclass src.pyconverter.xml2py.ast_tree.ProductName(element, parse_children=True)\n\nBases: Element\n\nProvides the base element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/ProductName.html#import-detail","title":"ProductName > Import detail","text":"Import detail\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"user_guide/objects.html#xml-objects","title":"XML objects","text":"XML objects\n\nThis section describes common objects handled by the converter. It is not\nan exhaustive list. For more information, see the API reference section."},{"objectID":"Home","href":"user_guide/objects.html#images","title":"XML objects > Images","text":"Images\n\nImages are copied from the given image path to package/doc/source/images/.\nThe images are then included in the ReStructured Text (RST) files with this\ncommand:\n\nImages present in the Parameters section do not render correctly.\nThis is due to an incompatibility with Python docstrings."},{"objectID":"Home","href":"user_guide/objects.html#tables","title":"XML objects > Tables","text":"Tables\n\nTables are rendered correctly in the documentation. They do not need to have\na specific format because the converter uses flat-tables."},{"objectID":"Home","href":"user_guide/objects.html#links","title":"XML objects > Links","text":"Links\n\nInternal and external links are both rendered correctly.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"user_guide/index.html#user-guide","title":"User guide","text":"User guide\n\nThis section provides some guidelines for using PyConverter-XML2Py.\nYou can modify each step as needed to convert your own Docbook XML documentation."},{"objectID":"Home","href":"user_guide/index.html#predefined-format","title":"User guide > Predefined format","text":"Predefined format\n\nThe conversion is based on a predefined XML directory format that you\nshould follow:"},{"objectID":"Home","href":"user_guide/index.html#template-directory","title":"User guide > Template directory","text":"Template directory\n\nThe _package directory is the template that the autogenerated package\nfollows."},{"objectID":"Home","href":"user_guide/index.html#convert-an-xml-directory","title":"User guide > Convert an XML directory","text":"Convert an XML directory\n\nOnce the XML_directory is correctly organized, you can use this command\nto run the converter:\n\nIf you need to customize some functions, you can specify the path containing the\nPython files:\n\nFor more information, see ref_source_code.\n\nAfter the converter runs, you can generate Sphinx documentation. This code renders\nthe documentation as HTML from Windows:"},{"objectID":"Home","href":"user_guide/index.html#autogenerated-package","title":"User guide > Autogenerated package","text":"Autogenerated package\n\nThe Sphinx documentation is contained in the autogenerated package\ndirectory by default. This diagram presents the format of the\npackage directory:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Argument.html#argument","title":"Argument","text":"Argument\n\n\n\nclass src.pyconverter.xml2py.ast_tree.Argument(terms, element: str | Element, initial_arguments: List, description: Element | str | None = None)\n\nArgument object."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Argument.html#overview","title":"Argument > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nresized_description\n\nResize the description to a maximum length.\n\nto_py_docstring\n\nReturn a list of string to enable converting the element to an RST format.\n\nProperties\n\n\n\n\n\npy_arg_name\n\nPython-compatible term.\n\ndescription\n\nDescription of the argument.\n\nis_arg_elipsis\n\nCheck if the argument is an elipsis.\n\nmultiple_args\n\n\n\ntypes\n\nOne or more parameter types."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Argument.html#import-detail","title":"Argument > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Argument.html#property-detail","title":"Argument > Property detail","text":"Property detail\n\n\n\nproperty Argument.py_arg_name: str\n\nPython-compatible term.\n\n\n\nproperty Argument.description: str\n\nDescription of the argument.\n\n\n\nproperty Argument.is_arg_elipsis\n\nCheck if the argument is an elipsis.\n\nReturns\n\nbool\n\nTrue if the argument is an elipsis, False otherwise.\n\n\n\nproperty Argument.multiple_args\n\n\n\n\n\nproperty Argument.types: List[type]\n\nOne or more parameter types.\n\nThis is guessed from any subvarlists. If unavailable, then it’s guessed\nfrom the description of the variable.\n\nThis is either a string, float, or integer (or some combination thereof)."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Argument.html#method-detail","title":"Argument > Method detail","text":"Method detail\n\n\n\nArgument.resized_description(description: str | None = None, max_length: int = 100, indent: str = '') -> List[str]\n\nResize the description to a maximum length.\n\n\n\nArgument.to_py_docstring(max_length=100, links=None, base_url=None, fcache=None) -> List[str]\n\nReturn a list of string to enable converting the element to an RST format.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Code.html#code","title":"Code","text":"Code\n\n\n\nclass src.pyconverter.xml2py.ast_tree.Code(element, parse_children=True)\n\nBases: Element\n\nProvides the code element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Code.html#import-detail","title":"Code > Import detail","text":"Import detail\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Structname.html#structname","title":"Structname","text":"Structname\n\n\n\nclass src.pyconverter.xml2py.ast_tree.Structname(element, parse_children=True)\n\nBases: Element\n\nProvides the structure name element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Structname.html#overview","title":"Structname > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nto_rst\n\nReturn a string to enable converting the element to an RST format."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Structname.html#import-detail","title":"Structname > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Structname.html#method-detail","title":"Structname > Method detail","text":"Method detail\n\n\n\nStructname.to_rst(indent='', max_length=100, links=None, base_url=None, fcache=None)\n\nReturn a string to enable converting the element to an RST format.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/BridgeHead.html#bridgehead","title":"BridgeHead","text":"BridgeHead\n\n\n\nclass src.pyconverter.xml2py.ast_tree.BridgeHead(element, parse_children=True)\n\nBases: Element\n\nProvides the bridgehead element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/BridgeHead.html#overview","title":"BridgeHead > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nto_rst\n\nReturn a string to enable converting the element to an RST format."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/BridgeHead.html#import-detail","title":"BridgeHead > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/BridgeHead.html#method-detail","title":"BridgeHead > Method detail","text":"Method detail\n\n\n\nBridgeHead.to_rst(indent='', max_length=100)\n\nReturn a string to enable converting the element to an RST format.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/utils/utils/index.html#the-utilspy-module","title":"The utils.py module","text":"The utils.py module\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/utils/utils/index.html#summary","title":"The utils.py module > Summary","text":"Summary\n\nFunctions\n\n\n\n\n\nparse_yaml\n\nParse a YAML file.\n\nget_config_data_value\n\nReturn the value of a specific key in the YAML file.\n\nget_library_path\n\nGet the desired library path with the following format:\n\nget_comment_command_dict\n\nGet a dictionnary of messages to be added as warning, note, or info at the beginning of\n\ncreate_name_map\n\nCreate a mapping between the initial command name and the Python function name.\n\nimport_handler\n\nHandle the imports in the Python file.\n\nsplit_trail_alpha\n\nSplit a string based on the last tailing non-alphanumeric character.\n\nis_numeric\n\nReturn True when a string is numeric.\n\nget_refentry\n\nGet the reference entry from an XML file.\n\nis_valid_method\n\nCheck if a method is valid Python code.\n\nAttributes\n\n\n\n\n\nlogger\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/utils/utils/index.html#module-detail","title":"The utils.py module > Module detail","text":"Module detail\n\n\n\nutils.parse_yaml(yaml_path: pathlib.Path) -> dict\n\nParse a YAML file.\n\nParameters\n\nyaml_path: Path\n\nPath object of the YAML file.\n\nReturns\n\npython:dict\n\nDictionary with the content of the YAML file.\n\n\n\nutils.get_config_data_value(yaml_path: pathlib.Path, value: str) -> str | dict | list | None\n\nReturn the value of a specific key in the YAML file.\n\nParameters\n\nyaml_path: Path\n\nPath object of the YAML file.\n\nvalue: str\n\nKey to search for in the YAML file.\n\n\n\nutils.get_library_path(new_package_path: pathlib.Path, config_path: pathlib.Path, subfolder: bool = True) -> pathlib.Path\n\nGet the desired library path with the following format:\nnew_package_path/library_structure.\n\nFor instance, if library_name_structured in the config.yaml file is\n[\"pyconverter\", \"generatedcommands\"], the function returns\nnew_package_path/pyconverter/generatedcommands.\n\nParameters\n\nnew_package_path: Path\n\nPath object of the new package directory.\n\nconfig_path: str\n\nPath to the configuration file.\n\nReturns\n\nPath\n\nPath object of the new library structure.\n\n\n\nutils.get_comment_command_dict(yaml_path: pathlib.Path) -> dict\n\nGet a dictionnary of messages to be added as warning, note, or info at the beginning of\na command documentation.\n\nParameters\n\nyaml_path: Path\n\nPath object of the YAML file.\n\nReturns\n\npython:dict\n\nDictionary of comment to be added with the following format:\n{\"command\": [[\"message_type\", \"message\"]}.\n\n\n\nutils.create_name_map(meta_command: list[str], yaml_file_path: pathlib.Path) -> dict\n\nCreate a mapping between the initial command name and the Python function name.\n\nParameters\n\nmeta_command: list[str]\n\nList of command names.\n\nyaml_file_path: Path\n\nPath object of the YAML file.\n\nReturns\n\npython:dict\n\nDictionary with the following format: {\"initial_command_name\": \"python_name\"}.\n\n\n\nutils.import_handler(filename: pathlib.Path, additional_content: str, str_before_def: str) -> None\n\nHandle the imports in the Python file.\n\nParameters\n\nfilename: Path\n\nPath object of the Python file.\n\nadditional_content: str\n\nAdditional content to add to the Python file.\n\nstr_before_def: str\n\nString before the function definition.\n\n\n\nutils.split_trail_alpha(text: str) -> Tuple[str, str]\n\nSplit a string based on the last tailing non-alphanumeric character.\n\nParameters\n\ntext: str\n\nString to split.\n\n\n\nutils.is_numeric(text: str) -> bool\n\nReturn True when a string is numeric.\n\nParameters\n\ntext: str\n\nString to check.\n\nReturns\n\nbool\n\nTrue if the string is numeric.\n\n\n\nutils.get_refentry(filename: pathlib.Path) -> list\n\nGet the reference entry from an XML file.\n\nParameters\n\nfilename: Path\n\nPath object of an XML file.\n\n\n\nutils.is_valid_method(method: str) -> bool\n\nCheck if a method is valid Python code.\n\nParameters\n\nmethod: str\n\nThe method source code as a string.\nIt needs to be already indented for class context.\n\nReturns\n\nbool\n\nTrue if the method is valid Python code, False otherwise.\n\n\n\nutils.logger\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Graphic.html#graphic","title":"Graphic","text":"Graphic\n\n\n\nclass src.pyconverter.xml2py.ast_tree.Graphic(element, parse_children=True)\n\nBases: Element\n\nProvides the graphic element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Graphic.html#overview","title":"Graphic > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nto_rst\n\nReturn a string to enable converting the element to an RST format.\n\nProperties\n\n\n\n\n\nentityref\n\nValue of the entityref parameter contained in the graphic element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Graphic.html#import-detail","title":"Graphic > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Graphic.html#property-detail","title":"Graphic > Property detail","text":"Property detail\n\n\n\nproperty Graphic.entityref\n\nValue of the entityref parameter contained in the graphic element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Graphic.html#method-detail","title":"Graphic > Method detail","text":"Method detail\n\n\n\nGraphic.to_rst(indent='', max_length=100, fcache=None, image_folder_path=None)\n\nReturn a string to enable converting the element to an RST format.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Highlights.html#highlights","title":"Highlights","text":"Highlights\n\n\n\nclass src.pyconverter.xml2py.ast_tree.Highlights(element, parse_children=True)\n\nBases: Element\n\nProvides the base element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Highlights.html#import-detail","title":"Highlights > Import detail","text":"Import detail\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/FileName.html#filename","title":"FileName","text":"FileName\n\n\n\nclass src.pyconverter.xml2py.ast_tree.FileName(element, parse_children=True)\n\nBases: Element\n\nProvides the filename element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/FileName.html#overview","title":"FileName > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nget_filename\n\nGet the filename.\n\nto_rst\n\nReturn a string to enable converting the element to an RST format."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/FileName.html#import-detail","title":"FileName > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/FileName.html#method-detail","title":"FileName > Method detail","text":"Method detail\n\n\n\nFileName.get_filename()\n\nGet the filename.\n\n\n\nFileName.to_rst(indent='', max_length=100)\n\nReturn a string to enable converting the element to an RST format.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Table.html#table","title":"Table","text":"Table\n\n\n\nclass src.pyconverter.xml2py.ast_tree.Table(element, parse_children=True)\n\nBases: Element\n\nProvides the table element"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Table.html#overview","title":"Table > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nto_rst\n\nReturn a string to enable converting the element to an RST format.\n\nProperties\n\n\n\n\n\ntitle\n\nTable title.\n\ntgroup\n\nTGroup.\n\nSpecial methods\n\n\n\n\n\n__repr__\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Table.html#import-detail","title":"Table > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Table.html#property-detail","title":"Table > Property detail","text":"Property detail\n\n\n\nproperty Table.title\n\nTable title.\n\n\n\nproperty Table.tgroup\n\nTGroup."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Table.html#method-detail","title":"Table > Method detail","text":"Method detail\n\n\n\nTable.to_rst(indent='', max_length=100, links=None, base_url=None)\n\nReturn a string to enable converting the element to an RST format.\n\n\n\nTable.__repr__()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/custom_functions/CustomFunctions.html#customfunctions","title":"CustomFunctions","text":"CustomFunctions\n\n\n\nclass src.pyconverter.xml2py.custom_functions.CustomFunctions\n\nProvides for creating customized functions."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/custom_functions/CustomFunctions.html#overview","title":"CustomFunctions > Overview","text":"Overview\n\nProperties\n\n\n\n\n\npath\n\nPath object where the customized function files are located.\n\npy_names\n\nList with all customized functions located in the folder.\n\npy_args\n\nDictionary containing the python arguments if any.\n\npy_params\n\nDictionary containing the Parameters section if any.\n\npy_returns\n\nDictionary containing the Returns section if any.\n\npy_examples\n\nDictionary containing the Examples section if any.\n\npy_notes\n\nDictionary containing the Notes section if any.\n\npy_code\n\nDictionary containing the customized source code.\n\nlib_import\n\nDictionary containing the needed libraries if any."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/custom_functions/CustomFunctions.html#import-detail","title":"CustomFunctions > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/custom_functions/CustomFunctions.html#property-detail","title":"CustomFunctions > Property detail","text":"Property detail\n\n\n\nproperty CustomFunctions.path: pathlib.Path\n\nPath object where the customized function files are located.\n\n\n\nproperty CustomFunctions.py_names: list\n\nList with all customized functions located in the folder.\n\n\n\nproperty CustomFunctions.py_args: dict\n\nDictionary containing the python arguments if any.\n\n\n\nproperty CustomFunctions.py_params: dict\n\nDictionary containing the Parameters section if any.\n\n\n\nproperty CustomFunctions.py_returns: dict\n\nDictionary containing the Returns section if any.\n\n\n\nproperty CustomFunctions.py_examples: dict\n\nDictionary containing the Examples section if any.\n\n\n\nproperty CustomFunctions.py_notes: dict\n\nDictionary containing the Notes section if any.\n\n\n\nproperty CustomFunctions.py_code: dict\n\nDictionary containing the customized source code.\n\n\n\nproperty CustomFunctions.lib_import: dict\n\nDictionary containing the needed libraries if any.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Application.html#application","title":"Application","text":"Application\n\n\n\nclass src.pyconverter.xml2py.ast_tree.Application(element, parse_children=True)\n\nBases: Element\n\nProvides the base element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Application.html#import-detail","title":"Application > Import detail","text":"Import detail\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Refpurpose.html#refpurpose","title":"Refpurpose","text":"Refpurpose\n\n\n\nclass src.pyconverter.xml2py.ast_tree.Refpurpose(element, parse_children=True)\n\nBases: Element\n\nProvides the refpurpose element, which contains\na short synopsis of a reference."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Refpurpose.html#overview","title":"Refpurpose > Overview","text":"Overview\n\nSpecial methods\n\n\n\n\n\n__repr__\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Refpurpose.html#import-detail","title":"Refpurpose > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Refpurpose.html#method-detail","title":"Refpurpose > Method detail","text":"Method detail\n\n\n\nRefpurpose.__repr__()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/GuiMenu.html#guimenu","title":"GuiMenu","text":"GuiMenu\n\n\n\nclass src.pyconverter.xml2py.ast_tree.GuiMenu(element, parse_children=True)\n\nBases: Element\n\nProvides the GUI menu element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/GuiMenu.html#import-detail","title":"GuiMenu > Import detail","text":"Import detail\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/XMLType.html#xmltype","title":"XMLType","text":"XMLType\n\n\n\nclass src.pyconverter.xml2py.ast_tree.XMLType(element, parse_children=True)\n\nBases: Element\n\nProvides the base element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/XMLType.html#import-detail","title":"XMLType > Import detail","text":"Import detail\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/RefMeta.html#refmeta","title":"RefMeta","text":"RefMeta\n\n\n\nclass src.pyconverter.xml2py.ast_tree.RefMeta(element, parse_children=True)\n\nBases: Element\n\nProvides the reference metadata element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/RefMeta.html#overview","title":"RefMeta > Overview","text":"Overview\n\nProperties\n\n\n\n\n\nrefentry_title\n\nTitle of the referency entry."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/RefMeta.html#import-detail","title":"RefMeta > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/RefMeta.html#property-detail","title":"RefMeta > Property detail","text":"Property detail\n\n\n\nproperty RefMeta.refentry_title\n\nTitle of the referency entry.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/NameMap.html#namemap","title":"NameMap","text":"NameMap\n\n\n\nclass src.pyconverter.xml2py.ast_tree.NameMap(name_map)\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/NameMap.html#overview","title":"NameMap > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\nname_map\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/NameMap.html#import-detail","title":"NameMap > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/NameMap.html#attribute-detail","title":"NameMap > Attribute detail","text":"Attribute detail\n\n\n\nNameMap.name_map\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"index.html#pyconverter-xml2py","title":"PyConverter-XML2Py","text":"PyConverter-XML2Py\n\nPyConverter-XML2Py is a Python library for converting technical Docbook XML documentation into\nPython source code so that Sphinx documentation can be generated.\n\nGetting started\n\n\n\nExplains how to start using PyConverter-XML2Py.\n\n   Getting started\n\nUser guide\n\n\n\nPresents in-depth information on the\nkey concepts of PyConverter-XML2Py.\n\n   User guide\n\nAPI reference\n\n\n\nDescribes members of the the PyConverter-XML2Py API.\n\n   API reference\n\nContribute\n\n\n\nProvides guidelines for contributing to the\ncodebase and documentation.\n\n   Contribute\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/index.html#api-reference","title":"API reference","text":"API reference\n\nThis section describes pyconverter-xml2py endpoints, their capabilities, and how\nto interact with them programmatically.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Caution.html#caution","title":"Caution","text":"Caution\n\n\n\nclass src.pyconverter.xml2py.ast_tree.Caution(element, parse_children=True)\n\nBases: Element\n\nProvides the caution element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Caution.html#overview","title":"Caution > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nto_rst\n\nReturn a string to enable converting the element to an RST format."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Caution.html#import-detail","title":"Caution > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Caution.html#method-detail","title":"Caution > Method detail","text":"Method detail\n\n\n\nCaution.to_rst(indent='', max_length=100)\n\nReturn a string to enable converting the element to an RST format.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/ClassName.html#classname","title":"ClassName","text":"ClassName\n\n\n\nclass src.pyconverter.xml2py.ast_tree.ClassName(element, parse_children=True)\n\nBases: Element\n\nProvides the base element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/ClassName.html#import-detail","title":"ClassName > Import detail","text":"Import detail\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/version_variables/index.html#the-version_variablespy-module","title":"The version_variables.py module","text":"The version_variables.py module\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/version_variables/index.html#summary","title":"The version_variables.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nAutogenerateddirectory\n\nContains the version variables of the XML documentation.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Link.html#link","title":"Link","text":"Link\n\n\n\nclass src.pyconverter.xml2py.ast_tree.Link(element)\n\nBases: Element\n\nProvides the link element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Link.html#overview","title":"Link > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nto_rst\n\nReturn a string to enable converting the element to an RST format.\n\nProperties\n\n\n\n\n\nlinkend\n\nLink.\n\nSpecial methods\n\n\n\n\n\n__repr__\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Link.html#import-detail","title":"Link > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Link.html#property-detail","title":"Link > Property detail","text":"Property detail\n\n\n\nproperty Link.linkend\n\nLink."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Link.html#method-detail","title":"Link > Method detail","text":"Method detail\n\n\n\nLink.__repr__()\n\n\n\n\n\nLink.to_rst(indent='', max_length=100, links=None, base_url=None)\n\nReturn a string to enable converting the element to an RST format.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/SegTitle.html#segtitle","title":"SegTitle","text":"SegTitle\n\n\n\nclass src.pyconverter.xml2py.ast_tree.SegTitle(element, parse_children=True)\n\nBases: Element\n\nProvides the base element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/SegTitle.html#import-detail","title":"SegTitle > Import detail","text":"Import detail\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Important.html#important","title":"Important","text":"Important\n\n\n\nclass src.pyconverter.xml2py.ast_tree.Important(element, parse_children=True)\n\nBases: Element\n\nProvides the base element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Important.html#import-detail","title":"Important > Import detail","text":"Import detail\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/OxygenXmlTree.html#oxygenxmltree","title":"OxygenXmlTree","text":"OxygenXmlTree\n\n\n\nclass src.pyconverter.xml2py.ast_tree.OxygenXmlTree(filename, meta_only=False)\n\nBases: Element\n\nProvides for loading an XML file as an AST (abstract syntax tree)."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/OxygenXmlTree.html#overview","title":"OxygenXmlTree > Overview","text":"Overview\n\nProperties\n\n\n\n\n\nxml_filename\n\nSource filename of the command."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/OxygenXmlTree.html#import-detail","title":"OxygenXmlTree > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/OxygenXmlTree.html#property-detail","title":"OxygenXmlTree > Property detail","text":"Property detail\n\n\n\nproperty OxygenXmlTree.xml_filename\n\nSource filename of the command.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Glossterm.html#glossterm","title":"Glossterm","text":"Glossterm\n\n\n\nclass src.pyconverter.xml2py.ast_tree.Glossterm(element, parse_children=True)\n\nBases: Element\n\nProvides the base element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Glossterm.html#import-detail","title":"Glossterm > Import detail","text":"Import detail\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/utils/regex_pattern/index.html#the-regex_patternpy-module","title":"The regex_pattern.py module","text":"The regex_pattern.py module\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/utils/regex_pattern/index.html#summary","title":"The regex_pattern.py module > Summary","text":"Summary\n\nConstants\n\n\n\n\n\nGET_BOLD_COMMANDS\n\n\n\nBEFORE_DEF\n\n\n\nGET_CLASSNAME\n\n\n\nGET_CODE_BLOCK\n\n\n\nGET_GROUP\n\n\n\nGET_IMPORTS\n\n\n\nGET_ITALIC_COMMANDS\n\n\n\nGET_LINES\n\n\n\nGET_STAR_COMMANDS\n\n\n\nGET_STAR_FUNCTIONS\n\n\n\nGET_TYPENAME_1OPT\n\n\n\nGET_TYPENAME_2OPT\n\n\n\nREPLACE_BOLD_COMMANDS\n\n\n\nREPLACE_ITALIC_COMMANDS\n\n\n\nREPLACE_STAR_COMMANDS\n\n\n\nREPLACE_STAR_FUNCTIONS\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/utils/regex_pattern/index.html#module-detail","title":"The regex_pattern.py module > Module detail","text":"Module detail\n\n\n\nregex_pattern.GET_BOLD_COMMANDS = '([^\\\\*])(\\\\*\\\\*)(\\\\*)([^*\\\\n]*?)(\\\\*\\\\*)([^\\\\*])'\n\n\n\n\n\nregex_pattern.BEFORE_DEF = '[\\\\s\\\\S]*?(?=def '\n\n\n\n\n\nregex_pattern.GET_CLASSNAME = '(\\\\S+)(?=:)'\n\n\n\n\n\nregex_pattern.GET_CODE_BLOCK = '(\\\\s*\\\\.\\\\. code:: apdl\\\\n\\\\s*(?: +.+\\\\n)+)'\n\n\n\n\n\nregex_pattern.GET_GROUP = '(?<=&)(.*?)(?=;)'\n\n\n\n\n\nregex_pattern.GET_IMPORTS = '(?:(?:from [a-zA-Z0-9_.]* import [a-zA-Z0-9_.]* as [a-zA-Z0-9_.]*)|(?:from [a-zA-Z0-9_.]*...\n\n\n\n\n\nregex_pattern.GET_ITALIC_COMMANDS = '([^\\\\*])(\\\\*)(\\\\*)([A-Z]+)(\\\\*)([^\\\\*])'\n\n\n\n\n\nregex_pattern.GET_LINES = '^[^\\\\.\\\\s].+(?=\\\\n)|(?<=\\\\n)[^\\\\.\\\\s].+(?=\\\\n)'\n\n\n\n\n\nregex_pattern.GET_STAR_COMMANDS = '([^*`]|(?<!``))(\\\\*)([A-Z]+)(\\\\`|\\\\,|\\\\.|\\\\s)'\n\n\n\n\n\nregex_pattern.GET_STAR_FUNCTIONS = '([^\\\\*\\\\s\\\\\\\\\\\\`]+)(\\\\*)([^\\\\*\\\\s]+)'\n\n\n\n\n\nregex_pattern.GET_TYPENAME_1OPT = '(?<=:)(.*)'\n\n\n\n\n\nregex_pattern.GET_TYPENAME_2OPT = '(?<=:)(.*?)(?=[A-Z][A-Z])'\n\n\n\n\n\nregex_pattern.REPLACE_BOLD_COMMANDS = '\\\\1\\\\2\\\\*\\\\4\\\\5\\\\6'\n\n\n\n\n\nregex_pattern.REPLACE_ITALIC_COMMANDS = '\\\\1\\\\2\\\\*\\\\4\\\\5\\\\6'\n\n\n\n\n\nregex_pattern.REPLACE_STAR_COMMANDS = '\\\\1\\\\*\\\\3\\\\4'\n\n\n\n\n\nregex_pattern.REPLACE_STAR_FUNCTIONS = '\\\\1\\\\\\\\2\\\\3'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Variablelist.html#variablelist","title":"Variablelist","text":"Variablelist\n\n\n\nclass src.pyconverter.xml2py.ast_tree.Variablelist(element)\n\nBases: Element\n\nProvides the variable list."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Variablelist.html#overview","title":"Variablelist > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nto_rst\n\nReturn a string to enable converting the element to an RST format.\n\nProperties\n\n\n\n\n\nterms\n\nList containing the terms of the element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Variablelist.html#import-detail","title":"Variablelist > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Variablelist.html#property-detail","title":"Variablelist > Property detail","text":"Property detail\n\n\n\nproperty Variablelist.terms\n\nList containing the terms of the element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Variablelist.html#method-detail","title":"Variablelist > Method detail","text":"Method detail\n\n\n\nVariablelist.to_rst(indent='', max_length=100, links=None, base_url=None, fcache=None)\n\nReturn a string to enable converting the element to an RST format.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/index.html#the-ast_treepy-module","title":"The ast_tree.py module","text":"The ast_tree.py module\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/index.html#summary","title":"The ast_tree.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nNameMap\n\n\n\nElement\n\nProvides the base element.\n\nItemizedList\n\nProvides the itemized list element.\n\nSimpleList\n\nProvides the simple itemized list element.\n\nMember\n\nProvides the member element for a simple itemized list.\n\nOrderedList\n\nProvides the ordered list element.\n\nListItem\n\nProvides the list item element.\n\nFileName\n\nProvides the filename element.\n\nOLink\n\nProvides the external link element.\n\nParagraph\n\nProvides the paragraph element.\n\nPhrase\n\nProvides the phrase element.\n\nStructname\n\nProvides the structure name element.\n\nTitle\n\nProvides the title element.\n\nEmphasis\n\nProvides the emphasis element.\n\nExample\n\nProvides the example element.\n\nInformalExample\n\nProvides the informal example element.\n\nGuiMenu\n\nProvides the GUI menu element.\n\nReplaceable\n\nProvides the replaceable element.\n\nProgramListing\n\nProvides the program listing element.\n\nVariablelist\n\nProvides the variable list.\n\nRefSection\n\nProvides the reference section element.\n\nVarlistEntry\n\nProvides the variable list entry element.\n\nTerm\n\nProvides the term element.\n\nGuiLabel\n\nProvides the GUI label element.\n\nGuiMenuItem\n\nProvides the GUI menu item element.\n\nSuperScript\n\nProvides the superscript element.\n\nCode\n\nProvides the code element.\n\nMath\n\nProvides the math element.\n\nInlineEquation\n\nProvides the inline equation element.\n\nSubScript\n\nProvides the subscript element.\n\nInlineGraphic\n\nProvides the inline graphic element.\n\nQuote\n\nProvides the quote element.\n\nLink\n\nProvides the link element.\n\nXRef\n\nProvides the cross reference element.\n\nUserInput\n\nProvides the user input element.\n\nScreen\n\nProvides the screen element.\n\nLiteral\n\nProvides the literal output element.\n\nCaution\n\nProvides the caution element.\n\nGraphic\n\nProvides the graphic element.\n\nFunction\n\nProvides the function element.\n\nNote\n\nProvides the note element.\n\nBlockQuote\n\nProvides the block quote element.\n\nRefMeta\n\nProvides the reference metadata element.\n\nIndexTerm\n\nProvides the index term element.\n\nPrimary\n\nProvides the primary element.\n\nTGroup\n\nProvides the tgroup element, which contains the header and body rows of a table.\n\nTable\n\nProvides the table element\n\nRefentrytitle\n\nProvides the title of the reference entry.\n\nRefnamediv\n\nProvides the refnamediv element, which contains the name,\n\nRefname\n\nProvides the refname element which contains\n\nRefpurpose\n\nProvides the refpurpose element, which contains\n\nRefclass\n\nProvides the base element.\n\nApplication\n\nProvides the base element.\n\nRefsect1\n\nProvides the base element.\n\nCommand\n\nProvides the command element.\n\nComputerOutput\n\nProvides the computer output element.\n\nFigure\n\nProvides the figure element.\n\nFootnote\n\nProvides the base element.\n\nFootnoteref\n\nProvides the base element.\n\nFormalpara\n\nProvides the base element.\n\nGlossterm\n\nProvides the base element.\n\nGuiButton\n\nProvides the base element.\n\nGuiIcon\n\nProvides the base element.\n\nHighlights\n\nProvides the base element.\n\nImportant\n\nProvides the base element.\n\nInformalEquation\n\nProvides the math element.\n\nInterface\n\nProvides the base element.\n\nMarkup\n\nProvides the base element.\n\nMediaobject\n\nProvides the base element.\n\nOption\n\nProvides the base element.\n\nRefsect3\n\nProvides the base element.\n\nRefsynopsisdiv\n\nProvides the base element.\n\nSidebar\n\nProvides the base element.\n\nXMLType\n\nProvides the base element.\n\nXMLWarning\n\nXML Warning element are handled the same as Caution elements.\n\nClassName\n\nProvides the base element.\n\nImageobject\n\nProvides the base element.\n\nInformalFigure\n\nProvides the base element.\n\nEnvar\n\nProvides the base element.\n\nImageData\n\nProvides the base element.\n\nColSpec\n\nProvides the base element.\n\nTBody\n\nProvides the tbody element.\n\nEntry\n\nProvides the entry element.\n\nRow\n\nProvides the row element.\n\nTHead\n\nProvides the thead element.\n\nRemark\n\nProvides the base element.\n\nLiteralLayout\n\nProvides the base element.\n\nCiteTitle\n\nProvides the base element.\n\nULink\n\nProvides the base element.\n\nSegTitle\n\nProvides the base element.\n\nChapter\n\nProvides the chapter element.\n\nSection1\n\nProvides the base element.\n\nProductName\n\nProvides the base element.\n\nArgument\n\nArgument object.\n\nArgumentList\n\n\n\nXMLCommand\n\nProvides the XML command from the documentation.\n\nInformalTable\n\nProvides the informal table element.\n\nBridgeHead\n\nProvides the bridgehead element.\n\nOxygenXmlTree\n\nProvides for loading an XML file as an AST (abstract syntax tree).\n\nFunctions\n\n\n\n\n\nto_py_name\n\nReturn a Python-compatible name for a command using the global name map.\n\nget_iter_values\n\nGet the values of an iterator.\n\nget_quant_iter_pos\n\nGet the values of a quantity iterator.\n\nto_py_arg_name\n\nReturn a Python-compatible name for an argument.\n\nget_complete_args_from_initial_arg\n\nGet the complete argument list from a list with elipsis.\n\nis_elipsis\n\nCheck if a name is an elipsis.\n\nstr_types\n\nString representation of the parameter types.\n\nto_py_signature\n\nReturn the Python signature of the argument.\n\nresize_length\n\nResize the length of a text.\n\nget_fragment_code\n\nSplit the text around a pattern.\n\nreplace_asterisks_without_code\n\n\n\nreplace_asterisks\n\n\n\nreplace_terms\n\nReplace terms with their definitions.\n\nponctuation_whitespace\n\n\n\nresize_element_list\n\n\n\nparse_element\n\nParse a single element.\n\nparse_children\n\nParse the children of an element.\n\nget_parser\n\n\n\nAttributes\n\n\n\n\n\nlogger\n\n\n\nsuperlatif\n\n\n\nparsers\n\n\n\nitem_needing_links_base_url\n\n\n\nitem_needing_fcache\n\n\n\nitem_needing_all\n\n\n\nConstants\n\n\n\n\n\nCONV_EQN\n\n\n\nXML_CLEANUP\n\n\n\nCLEANUP\n\n\n\nPY_ARG_CLEANUP\n\n\n\nFORBIDDEN_ARGUMENT_NAMES\n\n\n\nNAME_MAP_GLOB\n\n\n\nNO_RESIZE_LIST\n\n\n\nMISSING_ARGUMENT_DESCRIPTION\n\n\n\nADDITIONAL_ARGUMENT_DESCRIPTION\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/index.html#module-detail","title":"The ast_tree.py module > Module detail","text":"Module detail\n\n\n\nast_tree.to_py_name(name, name_map=None)\n\nReturn a Python-compatible name for a command using the global name map.\n\nParameters\n\nname\n\npython:str\n\nName of the command.\n\nname_map\n\npython:dict\n\nDictionary containing the name map.\n\nReturns\n\npython:str\n\nPython-compatible command name.\n\n\n\nast_tree.get_iter_values(name: str)\n\nGet the values of an iterator.\n\nParameters\n\nname\n\npython:str\n\nName of the parameter containing the iterator.\n\nReturns\n\npython:tuple(python:str, python:int)\n\nTuple containing the name of the iterator and the iteration value.\n\n\n\nast_tree.get_quant_iter_pos(name: str) -> tuple\n\nGet the values of a quantity iterator.\n\nParameters\n\nname: str\n\nName of the parameter containing the iterator.\n\nReturns\n\npython:tuple\n\nTuple containing the iteration value and the position of the iterator.\n\n\n\nast_tree.to_py_arg_name(name: str) -> str\n\nReturn a Python-compatible name for an argument.\n\nParameters\n\nname\n\npython:str\n\nName of the argument.\n\nReturns\n\npython:str\n\nPython-compatible argument name.\n\n\n\nast_tree.get_complete_args_from_initial_arg(initial_args: List[str], elipsis_args: List[str]) -> List[str]\n\nGet the complete argument list from a list with elipsis.\n\nParameters\n\ninitial_args\n\npython:list\n\nList of initial arguments.\n\nelipsis_args\n\npython:list\n\nList of containing the elipsed arguments.\n\nReturns\n\npython:list\n\nList of complete pythonnic arguments.\n\nExamples\n\n>>> initial_args = ['energytype', 'cname1', 'cname2', 'cname3', 'cname4', 'cname5', 'cname6']\n>>> elipsis_args = ['Cname1', ' Cname2',' …']\n>>> get_complete_args_from_initial_arg(initial_args, elipsis_args)\n['cname1', 'cname2', 'cname3', 'cname4', 'cname5', 'cname6']\n\n\n\nast_tree.is_elipsis(name: str) -> bool\n\nCheck if a name is an elipsis.\n\nReturns\n\nbool\n\nTrue if the argument is an elipsis, False otherwise.\n\n\n\nast_tree.str_types(types, join_str: str) -> str\n\nString representation of the parameter types.\n\nParameters\n\ntypes\n\npython:list\n\nList of types.\n\njoin_str\n\npython:str\n\nString to join the types.\n\nReturns\n\npython:str\n\nString representation of the parameter types.\n\nExamples\n\n>>> types = [str, int, float]\n>>> str_types(types, \" | \")\n'str | int | float'\n\n>>> types = [str, int]\n>>> str_types(types, \" or \")\n'str or int'\n\n\n\nast_tree.to_py_signature(py_arg_name, types) -> str\n\nReturn the Python signature of the argument.\n\nParameters\n\npy_arg_name\n\npython:str\n\nPython-compatible argument name.\n\ntypes\n\npython:list\n\nList of types.\n\nReturns\n\npython:str\n\nPython signature of the argument.\n\nExamples\n\n>>> py_arg_name = 'energytype'\n>>> types = [str, int, float]\n>>> to_py_signature(py_arg_name, types)\n'energytype: str | int | float = \"\"'\n\n\n\nast_tree.resize_length(text, max_length=100, initial_indent='', subsequent_indent='', list=False)\n\nResize the length of a text.\n\nParameters\n\ntext\n\npython:str\n\nText to resize.\n\nmax_length\n\npython:int\n\nMaximum length of the text to be resized.\n\ninitial_indent\n\npython:str\n\nInitial indentation of the text.\n\nsubsequent_indent\n\npython:str\n\nSubsequent indentation of the text.\n\nreturn_list\n\nbool\n\nIf set to True, the function returns a list of strings.\nDefault is False.\n\nReturns\n\npython:str or python:list\n\nResized text.\n\n\n\nast_tree.get_fragment_code(initial_text, pattern)\n\nSplit the text around a pattern.\n\nParameters\n\ninitial_text\n\npython:str\n\nInitial text to split.\n\npattern\n\npython:str\n\nPattern to split the text.\n\nReturns\n\npython:list\n\nList of fragments.\n\n\n\nast_tree.replace_asterisks_without_code(initial_text)\n\n\n\n\n\nast_tree.replace_asterisks(initial_text)\n\n\n\n\n\nast_tree.replace_terms(text, terms)\n\nReplace terms with their definitions.\n\nParameters\n\ntext\n\npython:str\n\nText to replace terms.\n\nterms\n\npython:dict\n\nDictionary containing the terms and their definitions.\n\nReturns\n\npython:str\n\nText with the terms replaced.\n\n\n\nast_tree.ponctuation_whitespace(text, ponctuation)\n\n\n\n\n\nast_tree.resize_element_list(text, max_length=100, initial_indent='', subsequent_indent='')\n\n\n\n\n\nast_tree.parse_element(element)\n\nParse a single element.\n\n\n\nast_tree.parse_children(element)\n\nParse the children of an element.\n\nReturns\n\npython:list\n\nList of the children of the element.\n\n\n\nast_tree.get_parser()\n\n\n\n\n\nast_tree.CONV_EQN = False\n\n\n\n\n\nast_tree.XML_CLEANUP\n\n\n\n\n\nast_tree.CLEANUP\n\n\n\n\n\nast_tree.PY_ARG_CLEANUP\n\n\n\n\n\nast_tree.FORBIDDEN_ARGUMENT_NAMES = ['abs', 'char', 'class', 'dir', 'eval', 'format', 'id', 'int', 'iter', 'list', 'min', 'max',...\n\n\n\n\n\nast_tree.NAME_MAP_GLOB\n\n\n\n\n\nast_tree.NO_RESIZE_LIST = ['Variablelist', 'ItemizedList', 'SimpleList', 'Caution', 'XMLWarning', 'ProgramListing', 'Example']\n\n\n\n\n\nast_tree.MISSING_ARGUMENT_DESCRIPTION = Multiline-String\n\n\n\n\n\nast_tree.ADDITIONAL_ARGUMENT_DESCRIPTION = Multiline-String\n\n\n\n\n\nast_tree.logger\n\n\n\n\n\nast_tree.superlatif = ['st', 'nd', 'rd', 'th']\n\n\n\n\n\nast_tree.parsers\n\n\n\n\n\nast_tree.item_needing_links_base_url\n\n\n\n\n\nast_tree.item_needing_fcache\n\n\n\n\n\nast_tree.item_needing_all\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/InformalEquation.html#informalequation","title":"InformalEquation","text":"InformalEquation\n\n\n\nclass src.pyconverter.xml2py.ast_tree.InformalEquation(element)\n\nBases: Math\n\nProvides the math element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/InformalEquation.html#import-detail","title":"InformalEquation > Import detail","text":"Import detail\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"getting_started/index.html#getting-started","title":"Getting started","text":"Getting started"},{"objectID":"Home","href":"getting_started/index.html#installation","title":"Getting started > Installation","text":"Installation\n\nTwo installation modes of the pyconverter-xml2py package are provided: user and developer."},{"objectID":"Home","href":"getting_started/index.html#user-installation","title":"Getting started > User installation","text":"User installation\n\nInstall the latest release for use with this command:"},{"objectID":"Home","href":"getting_started/index.html#for-developers","title":"Getting started > For developers","text":"For developers\n\nInstalling the pyconverter-xml2py package in developer mode allows you to modify the source and enhance it.\nFor contribution guidelines, see Contribute."},{"objectID":"Home","href":"getting_started/index.html#post-issues","title":"Getting started > Post issues","text":"Post issues\n\nUse the PyConverter-XML2Py Issues page to submit questions,\nreport bug, and request new features. When possible, use these issue templates:\n\nBug, problem, error:\nFor filing a bug report\n\nDocumentation issue:\nFor requesting modifications to the documentation\n\nAdding an example:\nFor proposing a new example\n\nNew feature:\nFor requesting enhancements to the code\n\nIf your issue does not fit into one of these categories, create your own issue.\n\nTo reach the PyAnsys support team, email pyansys.core@ansys.com.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Entry.html#entry","title":"Entry","text":"Entry\n\n\n\nclass src.pyconverter.xml2py.ast_tree.Entry(element, parse_children=True)\n\nBases: Element\n\nProvides the entry element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Entry.html#overview","title":"Entry > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nto_rst\n\nReturn a string to enable converting the element to an RST format.\n\nProperties\n\n\n\n\n\nmorerows\n\nValue for the morerows parameter contained in the entry element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Entry.html#import-detail","title":"Entry > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Entry.html#property-detail","title":"Entry > Property detail","text":"Property detail\n\n\n\nproperty Entry.morerows\n\nValue for the morerows parameter contained in the entry element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Entry.html#method-detail","title":"Entry > Method detail","text":"Method detail\n\n\n\nEntry.to_rst(indent='', max_length=100, links=None, base_url=None, fcache=None)\n\nReturn a string to enable converting the element to an RST format.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Refname.html#refname","title":"Refname","text":"Refname\n\n\n\nclass src.pyconverter.xml2py.ast_tree.Refname(element, terms=None)\n\nBases: Element\n\nProvides the refname element which contains\nthe name of a reference."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Refname.html#overview","title":"Refname > Overview","text":"Overview\n\nProperties\n\n\n\n\n\nterms\n\nTerms of the element.\n\nraw_args\n\nRaws containing the command arguments.\n\nargs\n\nCommand arguments."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Refname.html#import-detail","title":"Refname > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Refname.html#property-detail","title":"Refname > Property detail","text":"Property detail\n\n\n\nproperty Refname.terms\n\nTerms of the element.\n\n\n\nproperty Refname.raw_args\n\nRaws containing the command arguments.\n\n\n\nproperty Refname.args\n\nCommand arguments.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Mediaobject.html#mediaobject","title":"Mediaobject","text":"Mediaobject\n\n\n\nclass src.pyconverter.xml2py.ast_tree.Mediaobject(element, parse_children=True)\n\nBases: Element\n\nProvides the base element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Mediaobject.html#import-detail","title":"Mediaobject > Import detail","text":"Import detail\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/TBody.html#tbody","title":"TBody","text":"TBody\n\n\n\nclass src.pyconverter.xml2py.ast_tree.TBody(element, parse_children=True)\n\nBases: Element\n\nProvides the tbody element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/TBody.html#overview","title":"TBody > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nto_rst\n\nReturn a list to enable converting the element to an RST format.\n\nProperties\n\n\n\n\n\nrows\n\nReturn all the row elements found in the TBody element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/TBody.html#import-detail","title":"TBody > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/TBody.html#property-detail","title":"TBody > Property detail","text":"Property detail\n\n\n\nproperty TBody.rows\n\nReturn all the row elements found in the TBody element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/TBody.html#method-detail","title":"TBody > Method detail","text":"Method detail\n\n\n\nTBody.to_rst(l_head, indent='', links=None, base_url=None)\n\nReturn a list to enable converting the element to an RST format.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Primary.html#primary","title":"Primary","text":"Primary\n\n\n\nclass src.pyconverter.xml2py.ast_tree.Primary(element, parse_children=True)\n\nBases: Element\n\nProvides the primary element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Primary.html#import-detail","title":"Primary > Import detail","text":"Import detail\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/InlineEquation.html#inlineequation","title":"InlineEquation","text":"InlineEquation\n\n\n\nclass src.pyconverter.xml2py.ast_tree.InlineEquation(element)\n\nBases: Math\n\nProvides the inline equation element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/InlineEquation.html#overview","title":"InlineEquation > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nto_rst\n\nReturn a string to enable converting the element to an RST format.\n\nProperties\n\n\n\n\n\ntail\n\nReturn the tail of the element as a string."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/InlineEquation.html#import-detail","title":"InlineEquation > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/InlineEquation.html#property-detail","title":"InlineEquation > Property detail","text":"Property detail\n\n\n\nproperty InlineEquation.tail\n\nReturn the tail of the element as a string."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/InlineEquation.html#method-detail","title":"InlineEquation > Method detail","text":"Method detail\n\n\n\nInlineEquation.to_rst(indent='', max_length=100)\n\nReturn a string to enable converting the element to an RST format.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Replaceable.html#replaceable","title":"Replaceable","text":"Replaceable\n\n\n\nclass src.pyconverter.xml2py.ast_tree.Replaceable(element, parse_children=True)\n\nBases: Element\n\nProvides the replaceable element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Replaceable.html#overview","title":"Replaceable > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nto_rst\n\nReturn a string to enable converting the element to an RST format.\n\nProperties\n\n\n\n\n\nis_equals\n\nReplaceable equals something.\n\ncontent_equals\n\nContent of the element after handling the ‘=’ sign."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Replaceable.html#import-detail","title":"Replaceable > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Replaceable.html#property-detail","title":"Replaceable > Property detail","text":"Property detail\n\n\n\nproperty Replaceable.is_equals\n\nReplaceable equals something.\n\n\n\nproperty Replaceable.content_equals\n\nContent of the element after handling the ‘=’ sign."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Replaceable.html#method-detail","title":"Replaceable > Method detail","text":"Method detail\n\n\n\nReplaceable.to_rst(indent='', max_length=100)\n\nReturn a string to enable converting the element to an RST format.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/THead.html#thead","title":"THead","text":"THead\n\n\n\nclass src.pyconverter.xml2py.ast_tree.THead(element, parse_children=True)\n\nBases: Element\n\nProvides the thead element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/THead.html#overview","title":"THead > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nto_rst\n\nReturn a list and the length of the list for converting the element\n\nProperties\n\n\n\n\n\nrows\n\nReturn all row elements found in the THead element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/THead.html#import-detail","title":"THead > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/THead.html#property-detail","title":"THead > Property detail","text":"Property detail\n\n\n\nproperty THead.rows\n\nReturn all row elements found in the THead element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/THead.html#method-detail","title":"THead > Method detail","text":"Method detail\n\n\n\nTHead.to_rst(indent='', links=None, base_url=None)\n\nReturn a list and the length of the list for converting the element\nto an RST format.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Formalpara.html#formalpara","title":"Formalpara","text":"Formalpara\n\n\n\nclass src.pyconverter.xml2py.ast_tree.Formalpara(element, parse_children=True)\n\nBases: Element\n\nProvides the base element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Formalpara.html#import-detail","title":"Formalpara > Import detail","text":"Import detail\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Refentrytitle.html#refentrytitle","title":"Refentrytitle","text":"Refentrytitle\n\n\n\nclass src.pyconverter.xml2py.ast_tree.Refentrytitle(element, parse_children=True)\n\nBases: Element\n\nProvides the title of the reference entry."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Refentrytitle.html#overview","title":"Refentrytitle > Overview","text":"Overview\n\nSpecial methods\n\n\n\n\n\n__repr__\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Refentrytitle.html#import-detail","title":"Refentrytitle > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Refentrytitle.html#method-detail","title":"Refentrytitle > Method detail","text":"Method detail\n\n\n\nRefentrytitle.__repr__()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/SuperScript.html#superscript","title":"SuperScript","text":"SuperScript\n\n\n\nclass src.pyconverter.xml2py.ast_tree.SuperScript(element, parse_children=True)\n\nBases: Element\n\nProvides the superscript element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/SuperScript.html#overview","title":"SuperScript > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nto_rst\n\nReturn a string to enable converting the element to an RST format."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/SuperScript.html#import-detail","title":"SuperScript > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/SuperScript.html#method-detail","title":"SuperScript > Method detail","text":"Method detail\n\n\n\nSuperScript.to_rst(indent='', max_length=100)\n\nReturn a string to enable converting the element to an RST format.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/load_xml_doc/index.html#the-load_xml_docpy-module","title":"The load_xml_doc.py module","text":"The load_xml_doc.py module\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/load_xml_doc/index.html#summary","title":"The load_xml_doc.py module > Summary","text":"Summary\n\nFunctions\n\n\n\n\n\nlink_replacer\n\n\n\nload_links\n\nLoad all links.\n\nload_fcache\n\nLoad all graphics and cache the base name without the extension.\n\nload_docu_global\n\nLoad all global documents.\n\nload_terms\n\nLoad all needed terms."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/load_xml_doc/index.html#module-detail","title":"The load_xml_doc.py module > Module detail","text":"Module detail\n\n\n\nload_xml_doc.link_replacer(file, terms, docu_global, links, base_url, fcache)\n\n\n\n\n\nload_xml_doc.load_links(link_path: pathlib.Path) -> dict\n\nLoad all links.\n\nParameters\n\nlink_path: Path\n\nPath to the links directory.\n\nReturns\n\npython:dict\n\nDictionary containing the link names and the needed information to render the links.\n\n\n\nload_xml_doc.load_fcache(graph_path: pathlib.Path) -> dict\n\nLoad all graphics and cache the base name without the extension.\n\nParameters\n\ngraph_path: Path\n\nPath object of the graphic directory.\n\nReturns\n\npython:dict\n\nDictionary containing the base names of the graphics and their path.\n\n\n\nload_xml_doc.load_docu_global(term_path: pathlib.Path) -> dict\n\nLoad all global documents.\n\nParameters\n\nterm_path: Path\n\nPath object of the terms directory.\n\nReturns\n\npython:dict\n\nDictionary containing the entity names from the documentation and their path.\n\n\n\nload_xml_doc.load_terms(term_path: pathlib.Path, docu_global: dict, links: dict, fcache: dict, variable_file: str = 'build_variables.ent', global_terms_file: str = 'terms_global.ent', manual_file: str = 'manuals.ent', group_code_file: str = '../xml/ansys.groupcodes.commands.ent', character_directory: str = 'ent') -> Tuple[dict, pyconverter.xml2py.version_variables.Autogenerateddirectory]\n\nLoad all needed terms.\n\nParameters\n\nterm_path: Path\n\nPath object of the terms directory.\n\ndocu_global: dict\n\nDictionary containing the entity names from the documentation and their path.\n\nlinks: dict\n\nDictionary containing the link names and the needed information to render the links.\n\nfcache: dict\n\nDictionary containing the base names of the graphics and their path.\n\nvariable_file: str, optional\n\nName of the file containing the variable terms to import.\nThe default value is \"build_variables.ent\".\n\nglobal_terms_file: str, optional\n\nName of the file containing the global terms to import.\nThe default is \"terms_global.ent\".\n\nmanual_file: str, optional\n\nName of the file containing the manual entities to import.\nThe default is \"manuals.ent\".\n\ncharacter_directory: str, optional\n\nName of the directory containg the entities for the special characters.\nThe default is \"ent\".\n\nReturns\n\npython:dict\n\nDictionary containing the entity names and their values.\n\nAutogenerateddirectory\n\nObject containing the version variables of the XML documentation.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/cli/index.html#the-clipy-module","title":"The cli.py module","text":"The cli.py module\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/cli/index.html#summary","title":"The cli.py module > Summary","text":"Summary\n\nFunctions\n\n\n\n\n\ncreate_package\n\nCreate Python package based on a XML documentation.\n\nmain\n\nA Python wrapper to convert XML documentation into Python source code\n\nversion\n\nDisplay current version.\n\npackage\n\nCreate a Python package from your XML documentation."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/cli/index.html#description","title":"The cli.py module > Description","text":"Description\n\nCommand Line Interface for PyConverter-XML2Py."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/cli/index.html#module-detail","title":"The cli.py module > Module detail","text":"Module detail\n\n\n\ncli.create_package(xml_path: pathlib.Path | None = None, target_path: pathlib.Path | None = None, template_path: pathlib.Path | None = None, custom_functions_path: pathlib.Path | None = None, run_pre_commit: bool = False, max_docstring_length: int = 100) -> None\n\nCreate Python package based on a XML documentation.\n\nParameters\n\nxml_path: str or Path\n\nPath to the directory that contains the XML documentation to convert.\n\ntarget_path: str or Path, optional\n\nPath to the directory where you want to create the autogenerated package.\nThe default value is the current working directory.\n\ntemplate_path: str or Path, optional\n\nPath for the template to use. If no path is provided, the default template is used.\nThe default value is the _package directory accessible in the\nPyConverter-XML2Py GitHub repository.\n\ncustom_functions_path: str or Path, optional\n\nPath to the directory that contains the functions that need to be customized.\nThe default value is None.\n\nrun_pre_commit: bool, optional\n\nWhether to run pre-commit hooks on the autogenerated package source code.\nThe default value is False.\n\nmax_docstring_length: int, optional\n\nMaximum length of the generated docstrings.\nThe default is 100.\n\n\n\ncli.main()\n\nA Python wrapper to convert XML documentation into Python source code\nwith its related Sphinx documentation.\n\n\n\ncli.version()\n\nDisplay current version.\n\n\n\ncli.package(xml_path: pathlib.Path, targ_path: pathlib.Path, template_path: pathlib.Path, func_path: pathlib.Path, run_pre_commit: bool, max_length: int) -> None\n\nCreate a Python package from your XML documentation.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/formatter/index.html#the-formatterpy-module","title":"The formatter.py module","text":"The formatter.py module\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/formatter/index.html#summary","title":"The formatter.py module > Summary","text":"Summary\n\nFunctions\n\n\n\n\n\nrun_pre_commit\n\nRun pre-commit on the autogenerated package."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/formatter/index.html#description","title":"The formatter.py module > Description","text":"Description\n\nThis module contains the functions to format the generated docstrings with\nBlack."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/formatter/index.html#module-detail","title":"The formatter.py module > Module detail","text":"Module detail\n\n\n\nformatter.run_pre_commit(package_path) -> None\n\nRun pre-commit on the autogenerated package.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/GuiLabel.html#guilabel","title":"GuiLabel","text":"GuiLabel\n\n\n\nclass src.pyconverter.xml2py.ast_tree.GuiLabel(element, parse_children=True)\n\nBases: Element\n\nProvides the GUI label element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/GuiLabel.html#import-detail","title":"GuiLabel > Import detail","text":"Import detail\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/BlockQuote.html#blockquote","title":"BlockQuote","text":"BlockQuote\n\n\n\nclass src.pyconverter.xml2py.ast_tree.BlockQuote(element, parse_children=True)\n\nBases: Element\n\nProvides the block quote element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/BlockQuote.html#overview","title":"BlockQuote > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nto_rst\n\nReturn a string to enable converting the element to an RST format."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/BlockQuote.html#import-detail","title":"BlockQuote > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/BlockQuote.html#method-detail","title":"BlockQuote > Method detail","text":"Method detail\n\n\n\nBlockQuote.to_rst(indent='', max_length=100, links=None, base_url=None, fcache=None)\n\nReturn a string to enable converting the element to an RST format.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/InlineGraphic.html#inlinegraphic","title":"InlineGraphic","text":"InlineGraphic\n\n\n\nclass src.pyconverter.xml2py.ast_tree.InlineGraphic(element, parse_children=True)\n\nBases: Element\n\nProvides the inline graphic element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/InlineGraphic.html#overview","title":"InlineGraphic > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nfileref\n\nFile reference."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/InlineGraphic.html#import-detail","title":"InlineGraphic > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/InlineGraphic.html#method-detail","title":"InlineGraphic > Method detail","text":"Method detail\n\n\n\nInlineGraphic.fileref()\n\nFile reference.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/index.html#the-srcpyconverterxml2py-library","title":"The src.pyconverter.xml2py library","text":"The src.pyconverter.xml2py library\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/index.html#summary","title":"The src.pyconverter.xml2py library > Summary","text":"Summary\n\nSubpackages\n\n\n\n\n\nutils\n\n\n\nSubmodules\n\n\n\n\n\nast_tree\n\n\n\ncli\n\nCommand Line Interface for PyConverter-XML2Py.\n\ncustom_functions\n\n\n\ndirectory_format\n\n\n\ndownload\n\nFunctions to download template datasets from the pyconverter-xml2py repository.\n\nformatter\n\nThis module contains the functions to format the generated docstrings with\n\nload_xml_doc\n\n\n\nversion_variables\n\n\n\nwriter\n\n\n\nAttributes\n\n\n\n\n\n__version__\n\npyconverter.xml2py version.\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/index.html#description","title":"The src.pyconverter.xml2py library > Description","text":"Description\n\npyconverter.xml2py"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/index.html#module-detail","title":"The src.pyconverter.xml2py library > Module detail","text":"Module detail\n\n\n\nxml2py.__version__\n\npyconverter.xml2py version.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/SimpleList.html#simplelist","title":"SimpleList","text":"SimpleList\n\n\n\nclass src.pyconverter.xml2py.ast_tree.SimpleList(element, parse_children=True)\n\nBases: ItemizedList\n\nProvides the simple itemized list element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/SimpleList.html#overview","title":"SimpleList > Overview","text":"Overview\n\nSpecial methods\n\n\n\n\n\n__repr__\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/SimpleList.html#import-detail","title":"SimpleList > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/SimpleList.html#method-detail","title":"SimpleList > Method detail","text":"Method detail\n\n\n\nSimpleList.__repr__()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Literal.html#literal","title":"Literal","text":"Literal\n\n\n\nclass src.pyconverter.xml2py.ast_tree.Literal(element, parse_children=True)\n\nBases: Element\n\nProvides the literal output element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Literal.html#overview","title":"Literal > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nto_rst\n\nReturn a string to enable converting the element to an RST format."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Literal.html#import-detail","title":"Literal > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Literal.html#method-detail","title":"Literal > Method detail","text":"Method detail\n\n\n\nLiteral.to_rst(indent='', max_length=100)\n\nReturn a string to enable converting the element to an RST format.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Term.html#term","title":"Term","text":"Term\n\n\n\nclass src.pyconverter.xml2py.ast_tree.Term(element, parse_children=True)\n\nBases: Element\n\nProvides the term element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Term.html#overview","title":"Term > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nto_rst\n\nReturn a string to enable converting the element to an RST format.\n\nSpecial methods\n\n\n\n\n\n__repr__\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Term.html#import-detail","title":"Term > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Term.html#method-detail","title":"Term > Method detail","text":"Method detail\n\n\n\nTerm.to_rst(indent='', max_length=100, links=None, base_url=None, fcache=None)\n\nReturn a string to enable converting the element to an RST format.\n\n\n\nTerm.__repr__()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Option.html#option","title":"Option","text":"Option\n\n\n\nclass src.pyconverter.xml2py.ast_tree.Option(element, parse_children=True)\n\nBases: Element\n\nProvides the base element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Option.html#import-detail","title":"Option > Import detail","text":"Import detail\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/InformalTable.html#informaltable","title":"InformalTable","text":"InformalTable\n\n\n\nclass src.pyconverter.xml2py.ast_tree.InformalTable(element, parse_children=True)\n\nBases: Element\n\nProvides the informal table element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/InformalTable.html#overview","title":"InformalTable > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nto_rst\n\nReturn a string to enable converting the element to an RST format."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/InformalTable.html#import-detail","title":"InformalTable > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/InformalTable.html#method-detail","title":"InformalTable > Method detail","text":"Method detail\n\n\n\nInformalTable.to_rst(indent='', max_length=100)\n\nReturn a string to enable converting the element to an RST format.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Screen.html#screen","title":"Screen","text":"Screen\n\n\n\nclass src.pyconverter.xml2py.ast_tree.Screen(element, parse_children=True)\n\nBases: Element\n\nProvides the screen element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Screen.html#import-detail","title":"Screen > Import detail","text":"Import detail\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/ULink.html#ulink","title":"ULink","text":"ULink\n\n\n\nclass src.pyconverter.xml2py.ast_tree.ULink(element, parse_children=True)\n\nBases: Element\n\nProvides the base element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/ULink.html#import-detail","title":"ULink > Import detail","text":"Import detail\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Title.html#title","title":"Title","text":"Title\n\n\n\nclass src.pyconverter.xml2py.ast_tree.Title(element, parse_children=True)\n\nBases: Element\n\nProvides the title element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Title.html#overview","title":"Title > Overview","text":"Overview\n\nSpecial methods\n\n\n\n\n\n__repr__\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Title.html#import-detail","title":"Title > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Title.html#method-detail","title":"Title > Method detail","text":"Method detail\n\n\n\nTitle.__repr__()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/utils/index.html#the-utils-package","title":"The utils package","text":"The utils package\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/utils/index.html#summary","title":"The utils package > Summary","text":"Summary\n\nSubmodules\n\n\n\n\n\nregex_pattern\n\n\n\nutils\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/GuiIcon.html#guiicon","title":"GuiIcon","text":"GuiIcon\n\n\n\nclass src.pyconverter.xml2py.ast_tree.GuiIcon(element, parse_children=True)\n\nBases: Element\n\nProvides the base element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/GuiIcon.html#import-detail","title":"GuiIcon > Import detail","text":"Import detail\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Refsect1.html#refsect1","title":"Refsect1","text":"Refsect1\n\n\n\nclass src.pyconverter.xml2py.ast_tree.Refsect1(element, parse_children=True)\n\nBases: Element\n\nProvides the base element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Refsect1.html#import-detail","title":"Refsect1 > Import detail","text":"Import detail\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Example.html#example","title":"Example","text":"Example\n\n\n\nclass src.pyconverter.xml2py.ast_tree.Example(element, parse_children=True)\n\nBases: Element\n\nProvides the example element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Example.html#overview","title":"Example > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nto_rst\n\nReturn a string to enable converting the element to an RST format."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Example.html#import-detail","title":"Example > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Example.html#method-detail","title":"Example > Method detail","text":"Method detail\n\n\n\nExample.to_rst(indent='', max_length=100)\n\nReturn a string to enable converting the element to an RST format.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Element.html#element","title":"Element","text":"Element\n\n\n\nclass src.pyconverter.xml2py.ast_tree.Element(element, parse_children=True)\n\nProvides the base element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Element.html#overview","title":"Element > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nhas_children\n\nReturn wether the element has children.\n\nget\n\nGet an item from an element.\n\nprint_tree\n\nPrint the tree.\n\ntypes_repr\n\nReturn the string types.\n\nget_children_by_type\n\nGet children of a specific type.\n\nget_titles_in_element_list\n\nGet the titles of the elements in a list of elements.\n\nto_rst\n\nReturn a string to enable converting the element to an RST format.\n\nrec_find\n\nFind the first type matching a given type string recursively.\n\nfind\n\nFind the first type matching a given type string.\n\nfind_all\n\nFind all types matching a given type string.\n\nProperties\n\n\n\n\n\ntext_content\n\nText content.\n\nraw\n\nRaw string of the element.\n\ntostring\n\nAttributes of the element as a dictionary.\n\nadded\n\nHas the revision flag added.\n\nany_isalnum\n\nReturns True if any characters are alphanumeric.\n\ntail\n\nTail of the element as a string.\n\nchildren\n\nChildren of the tree.\n\nchildren_types\n\nTypes of the children.\n\ntitle\n\nElement title.\n\ncontent\n\nText content.\n\nid\n\nID of the element.\n\nnext_elem\n\nNext element.\n\nprev_elem\n\nPrevious element.\n\ntag\n\nElement tag.\n\nSpecial methods\n\n\n\n\n\n__getitem__\n\n\n\n__len__\n\n\n\n__repr__\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Element.html#import-detail","title":"Element > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Element.html#property-detail","title":"Element > Property detail","text":"Property detail\n\n\n\nproperty Element.text_content\n\nText content.\n\n\n\nproperty Element.raw\n\nRaw string of the element.\n\n\n\nproperty Element.tostring\n\nAttributes of the element as a dictionary.\n\n\n\nproperty Element.added\n\nHas the revision flag added.\n\n\n\nproperty Element.any_isalnum\n\nReturns True if any characters are alphanumeric.\n\n\n\nproperty Element.tail\n\nTail of the element as a string.\n\n\n\nproperty Element.children\n\nChildren of the tree.\n\n\n\nproperty Element.children_types\n\nTypes of the children.\n\n\n\nproperty Element.title\n\nElement title.\n\n\n\nproperty Element.content\n\nText content.\n\n\n\nproperty Element.id\n\nID of the element.\n\n\n\nproperty Element.next_elem\n\nNext element.\n\n\n\nproperty Element.prev_elem\n\nPrevious element.\n\n\n\nproperty Element.tag\n\nElement tag."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Element.html#method-detail","title":"Element > Method detail","text":"Method detail\n\n\n\nElement.has_children()\n\nReturn wether the element has children.\n\n\n\nElement.get(entry)\n\nGet an item from an element.\n\n\n\nElement.print_tree()\n\nPrint the tree.\n\n\n\nElement.types_repr()\n\nReturn the string types.\n\n\n\nElement.__getitem__(index)\n\n\n\n\n\nElement.__len__()\n\n\n\n\n\nElement.get_children_by_type(type_name)\n\nGet children of a specific type.\n\n\n\nElement.get_titles_in_element_list()\n\nGet the titles of the elements in a list of elements.\n\n\n\nElement.__repr__()\n\n\n\n\n\nElement.to_rst(indent='', max_length=100, links=None, base_url=None, fcache=None)\n\nReturn a string to enable converting the element to an RST format.\n\n\n\nElement.rec_find(_type, terms=None)\n\nFind the first type matching a given type string recursively.\n\n\n\nElement.find(_type, terms=None)\n\nFind the first type matching a given type string.\n\n\n\nElement.find_all(_type, recursive=False, terms=None)\n\nFind all types matching a given type string.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Refclass.html#refclass","title":"Refclass","text":"Refclass\n\n\n\nclass src.pyconverter.xml2py.ast_tree.Refclass(element, parse_children=True)\n\nBases: Element\n\nProvides the base element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Refclass.html#import-detail","title":"Refclass > Import detail","text":"Import detail\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Function.html#function","title":"Function","text":"Function\n\n\n\nclass src.pyconverter.xml2py.ast_tree.Function(element, parse_children=True)\n\nBases: Element\n\nProvides the function element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Function.html#import-detail","title":"Function > Import detail","text":"Import detail\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Quote.html#quote","title":"Quote","text":"Quote\n\n\n\nclass src.pyconverter.xml2py.ast_tree.Quote(element)\n\nBases: Element\n\nProvides the quote element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Quote.html#overview","title":"Quote > Overview","text":"Overview\n\nProperties\n\n\n\n\n\nquote\n\nQuote value.\n\nSpecial methods\n\n\n\n\n\n__repr__\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Quote.html#import-detail","title":"Quote > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Quote.html#property-detail","title":"Quote > Property detail","text":"Property detail\n\n\n\nproperty Quote.quote\n\nQuote value."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Quote.html#method-detail","title":"Quote > Method detail","text":"Method detail\n\n\n\nQuote.__repr__()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/version_variables/Autogenerateddirectory.html#autogenerateddirectory","title":"Autogenerateddirectory","text":"Autogenerateddirectory\n\n\n\nclass src.pyconverter.xml2py.version_variables.Autogenerateddirectory(terms: dict)\n\nContains the version variables of the XML documentation."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/version_variables/Autogenerateddirectory.html#overview","title":"Autogenerateddirectory > Overview","text":"Overview\n\nProperties\n\n\n\n\n\nautogenerated_directory_name\n\nAutogenerated directory name.\n\nversion\n\nVersion of the XML documentation.\n\nbase_url\n\nBase URL of the HTML documentation.\n\ncmd_base_url\n\nCommand base URL."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/version_variables/Autogenerateddirectory.html#import-detail","title":"Autogenerateddirectory > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/version_variables/Autogenerateddirectory.html#property-detail","title":"Autogenerateddirectory > Property detail","text":"Property detail\n\n\n\nproperty Autogenerateddirectory.autogenerated_directory_name: str\n\nAutogenerated directory name.\n\n\n\nproperty Autogenerateddirectory.version: str\n\nVersion of the XML documentation.\n\n\n\nproperty Autogenerateddirectory.base_url: str\n\nBase URL of the HTML documentation.\n\n\n\nproperty Autogenerateddirectory.cmd_base_url: str\n\nCommand base URL.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Footnoteref.html#footnoteref","title":"Footnoteref","text":"Footnoteref\n\n\n\nclass src.pyconverter.xml2py.ast_tree.Footnoteref(element, parse_children=True)\n\nBases: Element\n\nProvides the base element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Footnoteref.html#import-detail","title":"Footnoteref > Import detail","text":"Import detail\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/XRef.html#xref","title":"XRef","text":"XRef\n\n\n\nclass src.pyconverter.xml2py.ast_tree.XRef(element)\n\nBases: Link\n\nProvides the cross reference element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/XRef.html#overview","title":"XRef > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nto_rst\n\nReturn a string to enable converting the element to an RST format.\n\nProperties\n\n\n\n\n\ntail\n\nTail of the element as a string."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/XRef.html#import-detail","title":"XRef > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/XRef.html#property-detail","title":"XRef > Property detail","text":"Property detail\n\n\n\nproperty XRef.tail\n\nTail of the element as a string."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/XRef.html#method-detail","title":"XRef > Method detail","text":"Method detail\n\n\n\nXRef.to_rst(indent='', max_length=100)\n\nReturn a string to enable converting the element to an RST format.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"contributing/index.html#contribute","title":"Contribute","text":"Contribute\n\nOverall guidance on contributing to a PyAnsys library appears in the\nContributing topic\nin the PyAnsys Developer’s Guide. Ensure that you are thoroughly familiar\nwith this guide before attempting to contribute to PyConverter-XML2Py.\n\nThe following contribution information is specific to PyConverter-XML2Py."},{"objectID":"Home","href":"contributing/index.html#developer-installation","title":"Contribute > Developer installation","text":"Developer installation\n\nFollow these steps to install the package in developer mode:\n\nClone the repository:\n\n\n\nCreate a fresh-clean Python environment and activate it. If you require\nadditional information on creation of a virtual environment, see the\nofficial Python venv documentation.\n\nLinux\n\n\n\nmacOS\n\n\n\nWindows\n\n\n\nMake sure you have the latest version of pip:\n\n\n\nInstall the project in editable mode:\n\n\n\nInstall additional requirements (if needed):\n\n\n\nVerify your development installation:\n\n"},{"objectID":"Home","href":"contributing/index.html#style-and-testing","title":"Contribute > Style and testing","text":"Style and testing\n\nIf required, you can call style commands (such as black, isort,\nand flake8) or unit testing commands (such as pytest) from the command line.\nHowever, this does not guarantee that your project is being tested in an isolated\nenvironment, which is why you might consider using tox."},{"objectID":"Home","href":"contributing/index.html#documentation","title":"Contribute > Documentation","text":"Documentation\n\nFor building documentation, you can run the usual rules provided in the\nSphinx Makefile or make.bat:\n\nMakefile\n\n\n\nmake.bat\n\n\n\nOnce the documentation is built, you can open it as follows.\n\nLinux\n\nBy running the command:\n\nmacOS\n\nBy opening the documentation, which you do by going to the doc/html directory\nand opening the index.html file.\n\nWindows\n\nBy opening the documentation, which you do by going to the doc/html directory\nand opening the index.html file."},{"objectID":"Home","href":"contributing/index.html#adhere-to-code-style","title":"Contribute > Adhere to code style","text":"Adhere to code style\n\nPyConverter-XML2Py follows the PEP8 standard as outlined in the PyAnsys Developer’s Guide and implements style checking using\npre-commit.\n\nTo ensure your code meets minimum code styling standards, run this code:\n\nYou can also install this as a pre-commit hook by running this code:\n\nThis way, it’s not possible for you to push code that fails the style checks"},{"objectID":"Home","href":"contributing/index.html#distributing","title":"Contribute > Distributing","text":"Distributing\n\nIf you would like to create either source or wheel files, start by installing\nthe building requirements:\n\nThen, execute these commands:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/ProgramListing.html#programlisting","title":"ProgramListing","text":"ProgramListing\n\n\n\nclass src.pyconverter.xml2py.ast_tree.ProgramListing(element, parse_children=True)\n\nBases: Element\n\nProvides the program listing element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/ProgramListing.html#overview","title":"ProgramListing > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nto_rst\n\nReturn a string to enable converting the element to an RST format.\n\nProperties\n\n\n\n\n\nsource\n\nReturn the source value."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/ProgramListing.html#import-detail","title":"ProgramListing > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/ProgramListing.html#property-detail","title":"ProgramListing > Property detail","text":"Property detail\n\n\n\nproperty ProgramListing.source\n\nReturn the source value."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/ProgramListing.html#method-detail","title":"ProgramListing > Method detail","text":"Method detail\n\n\n\nProgramListing.to_rst(indent='', max_length=100)\n\nReturn a string to enable converting the element to an RST format.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/ListItem.html#listitem","title":"ListItem","text":"ListItem\n\n\n\nclass src.pyconverter.xml2py.ast_tree.ListItem(element, parse_children=True)\n\nBases: Element\n\nProvides the list item element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/ListItem.html#overview","title":"ListItem > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nto_rst\n\nReturn a string to enable converting the element to an RST format."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/ListItem.html#import-detail","title":"ListItem > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/ListItem.html#method-detail","title":"ListItem > Method detail","text":"Method detail\n\n\n\nListItem.to_rst(indent='', max_length=100, links=None, base_url=None, fcache=None)\n\nReturn a string to enable converting the element to an RST format.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Markup.html#markup","title":"Markup","text":"Markup\n\n\n\nclass src.pyconverter.xml2py.ast_tree.Markup(element, parse_children=True)\n\nBases: Element\n\nProvides the base element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Markup.html#import-detail","title":"Markup > Import detail","text":"Import detail\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Math.html#math","title":"Math","text":"Math\n\n\n\nclass src.pyconverter.xml2py.ast_tree.Math(element)\n\nBases: _Math\n\nProvides the math element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Math.html#overview","title":"Math > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nto_rst\n\nReturn a string to enable converting the element to an RST format."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Math.html#import-detail","title":"Math > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Math.html#method-detail","title":"Math > Method detail","text":"Method detail\n\n\n\nMath.to_rst(indent='', max_length=100)\n\nReturn a string to enable converting the element to an RST format.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/SubScript.html#subscript","title":"SubScript","text":"SubScript\n\n\n\nclass src.pyconverter.xml2py.ast_tree.SubScript(element)\n\nBases: Element\n\nProvides the subscript element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/SubScript.html#overview","title":"SubScript > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nto_rst\n\nReturn a string to enable converting the element to an RST format."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/SubScript.html#import-detail","title":"SubScript > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/SubScript.html#method-detail","title":"SubScript > Method detail","text":"Method detail\n\n\n\nSubScript.to_rst(indent='', max_length=100)\n\nReturn a string to enable converting the element to an RST format.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/RefSection.html#refsection","title":"RefSection","text":"RefSection\n\n\n\nclass src.pyconverter.xml2py.ast_tree.RefSection(element, parse_children=True)\n\nBases: Element\n\nProvides the reference section element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/RefSection.html#overview","title":"RefSection > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nto_rst\n\nReturn a string to enable converting the element to an RST format."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/RefSection.html#import-detail","title":"RefSection > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/RefSection.html#method-detail","title":"RefSection > Method detail","text":"Method detail\n\n\n\nRefSection.to_rst(indent='', max_length=100, links=None, base_url=None, fcache=None)\n\nReturn a string to enable converting the element to an RST format.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"user_guide/source_code.html#source-code-generation","title":"Source code generation","text":"Source code generation\n\nSource code is automatically generated from the name of the commands\nand the parameters defined in the documentation.\n\nHere are the initial command and then the default Python code that\nthis command generates:\n\nInital command\n\n\n\nPython code generated\n\n"},{"objectID":"Home","href":"user_guide/source_code.html#customized-functions","title":"Source code generation > Customized functions","text":"Customized functions\n\nThe converter can handle code generation for functions that require a\ncustomized code. To specify the folder containing these files, you must\nbe specified the -f or --func-path arguments in the command for\ngenerating the code:\n\nIn this configuration, the provided code is used for the conversion.\n\nAdditionally, any Returns and Examples sections are taken\ninto account and added to the Python docstring:\n\nInital command\n\n\n\nAdded customized function\n\n\n\nPython code generated\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/ColSpec.html#colspec","title":"ColSpec","text":"ColSpec\n\n\n\nclass src.pyconverter.xml2py.ast_tree.ColSpec(element, parse_children=True)\n\nBases: Element\n\nProvides the base element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/ColSpec.html#import-detail","title":"ColSpec > Import detail","text":"Import detail\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Remark.html#remark","title":"Remark","text":"Remark\n\n\n\nclass src.pyconverter.xml2py.ast_tree.Remark(element, parse_children=True)\n\nBases: Element\n\nProvides the base element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Remark.html#import-detail","title":"Remark > Import detail","text":"Import detail\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/directory_format/index.html#the-directory_formatpy-module","title":"The directory_format.py module","text":"The directory_format.py module\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/directory_format/index.html#summary","title":"The directory_format.py module > Summary","text":"Summary\n\nFunctions\n\n\n\n\n\nget_paths\n\nGet the paths to the directories needed for the conversion."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/directory_format/index.html#module-detail","title":"The directory_format.py module > Module detail","text":"Module detail\n\n\n\ndirectory_format.get_paths(path: pathlib.Path, graph_path: pathlib.Path | None = None, link_path: pathlib.Path | None = None, term_path: pathlib.Path | None = None, xml_path: pathlib.Path | None = None) -> Tuple[pathlib.Path, pathlib.Path, pathlib.Path, pathlib.Path]\n\nGet the paths to the directories needed for the conversion.\n\nParameters\n\npath: Path\n\nPath object of the directory with the predefined format.\n\ngraph_path: Path, optional\n\nPath object of the directory containing the graphics. The default is None,\nin which case the XML predefined directory format is used.\n\nlink_path: Path, optional\n\nPath object of the directory containing the links. The default is None,\nin which case the XML predefined directory format is used.\n\nterm_path: Path, optional\n\nPath object of the directory containing the terms. The default is None,\nin which case the XML predefined directory format is used.\n\nxml_path: Path, optional\n\nPath object of the directory containing the XML files. The default is None,\nin which case the XML predefined directory format is used.\n\nReturns\n\nPath\n\nPath object of the directory containing the graphics.\n\nPath\n\nPath object of the directory containing the links.\n\nPath\n\nPath object of the directory containing the terms.\n\nPath\n\nPath object of the directory containing the XML files.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/LiteralLayout.html#literallayout","title":"LiteralLayout","text":"LiteralLayout\n\n\n\nclass src.pyconverter.xml2py.ast_tree.LiteralLayout(element, parse_children=True)\n\nBases: Element\n\nProvides the base element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/LiteralLayout.html#import-detail","title":"LiteralLayout > Import detail","text":"Import detail\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Row.html#row","title":"Row","text":"Row\n\n\n\nclass src.pyconverter.xml2py.ast_tree.Row(element, parse_children=True)\n\nBases: Element\n\nProvides the row element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Row.html#overview","title":"Row > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nto_rst_list\n\nReturn a list to enable converting the element to an RST format.\n\nProperties\n\n\n\n\n\nentry\n\nReturn all entry elements found in the row element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Row.html#import-detail","title":"Row > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Row.html#property-detail","title":"Row > Property detail","text":"Property detail\n\n\n\nproperty Row.entry\n\nReturn all entry elements found in the row element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Row.html#method-detail","title":"Row > Method detail","text":"Method detail\n\n\n\nRow.to_rst_list(indent='', max_length=100, links=None, base_url=None)\n\nReturn a list to enable converting the element to an RST format.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Member.html#member","title":"Member","text":"Member\n\n\n\nclass src.pyconverter.xml2py.ast_tree.Member(element, parse_children=True)\n\nBases: Element\n\nProvides the member element for a simple itemized list."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Member.html#overview","title":"Member > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nto_rst\n\nReturn a string to enable converting the element to an RST format."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Member.html#import-detail","title":"Member > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Member.html#method-detail","title":"Member > Method detail","text":"Method detail\n\n\n\nMember.to_rst(indent='', max_length=100, links=None, base_url=None, fcache=None)\n\nReturn a string to enable converting the element to an RST format.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Refnamediv.html#refnamediv","title":"Refnamediv","text":"Refnamediv\n\n\n\nclass src.pyconverter.xml2py.ast_tree.Refnamediv(element, terms=None)\n\nBases: Element\n\nProvides the refnamediv element, which contains the name,\npurpose, and classification of a reference."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Refnamediv.html#overview","title":"Refnamediv > Overview","text":"Overview\n\nProperties\n\n\n\n\n\nterms\n\nTerms of the element.\n\nrefname\n\nRefname of the element.\n\npurpose\n\nRefpurpose of the element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Refnamediv.html#import-detail","title":"Refnamediv > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Refnamediv.html#property-detail","title":"Refnamediv > Property detail","text":"Property detail\n\n\n\nproperty Refnamediv.terms\n\nTerms of the element.\n\n\n\nproperty Refnamediv.refname\n\nRefname of the element.\n\n\n\nproperty Refnamediv.purpose\n\nRefpurpose of the element.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/OrderedList.html#orderedlist","title":"OrderedList","text":"OrderedList\n\n\n\nclass src.pyconverter.xml2py.ast_tree.OrderedList(element, parse_children=True)\n\nBases: Element\n\nProvides the ordered list element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/OrderedList.html#overview","title":"OrderedList > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nto_rst\n\nReturn a string to enable converting the element to an RST format."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/OrderedList.html#import-detail","title":"OrderedList > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/OrderedList.html#method-detail","title":"OrderedList > Method detail","text":"Method detail\n\n\n\nOrderedList.to_rst(indent='', max_length=100, links=None, base_url=None)\n\nReturn a string to enable converting the element to an RST format.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/custom_functions/index.html#the-custom_functionspy-module","title":"The custom_functions.py module","text":"The custom_functions.py module\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/custom_functions/index.html#summary","title":"The custom_functions.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nCustomFunctions\n\nProvides for creating customized functions.\n\nFunctions\n\n\n\n\n\nget_docstring_lists\n\nGet lists of strings depending on Python file sections.\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/custom_functions/index.html#module-detail","title":"The custom_functions.py module > Module detail","text":"Module detail\n\n\n\ncustom_functions.get_docstring_lists(filename: str) -> Tuple[list[str], list[str], list[str], list[str]]\n\nGet lists of strings depending on Python file sections.\n\nParameters\n\nfilename: str\n\nPath containing the Python file.\n\nReturns\n\nList[python:str]\n\nList containing the docstring Parameters section.\n\nList[python:str]\n\nList containing the docstring Returns section.\n\nList[python:str]\n\nList containing the docstring Notes section.\n\nList[python:str]\n\nList containing the docstring Examples section.\n\nList[python:str]\n\nList containing the source code.\n\nList[python:str]\n\nList containing the library import section.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/ImageData.html#imagedata","title":"ImageData","text":"ImageData\n\n\n\nclass src.pyconverter.xml2py.ast_tree.ImageData(element, parse_children=True)\n\nBases: Element\n\nProvides the base element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/ImageData.html#import-detail","title":"ImageData > Import detail","text":"Import detail\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Footnote.html#footnote","title":"Footnote","text":"Footnote\n\n\n\nclass src.pyconverter.xml2py.ast_tree.Footnote(element, parse_children=True)\n\nBases: Element\n\nProvides the base element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Footnote.html#import-detail","title":"Footnote > Import detail","text":"Import detail\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/GuiMenuItem.html#guimenuitem","title":"GuiMenuItem","text":"GuiMenuItem\n\n\n\nclass src.pyconverter.xml2py.ast_tree.GuiMenuItem(element, parse_children=True)\n\nBases: Element\n\nProvides the GUI menu item element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/GuiMenuItem.html#overview","title":"GuiMenuItem > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nto_rst\n\nReturn a string to enable converting the element to an RST format."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/GuiMenuItem.html#import-detail","title":"GuiMenuItem > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/GuiMenuItem.html#method-detail","title":"GuiMenuItem > Method detail","text":"Method detail\n\n\n\nGuiMenuItem.to_rst(indent='', max_length=100)\n\nReturn a string to enable converting the element to an RST format.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/XMLWarning.html#xmlwarning","title":"XMLWarning","text":"XMLWarning\n\n\n\nclass src.pyconverter.xml2py.ast_tree.XMLWarning(element, parse_children=True)\n\nBases: Caution\n\nXML Warning element are handled the same as Caution elements."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/XMLWarning.html#import-detail","title":"XMLWarning > Import detail","text":"Import detail\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Refsynopsisdiv.html#refsynopsisdiv","title":"Refsynopsisdiv","text":"Refsynopsisdiv\n\n\n\nclass src.pyconverter.xml2py.ast_tree.Refsynopsisdiv(element, parse_children=True)\n\nBases: Element\n\nProvides the base element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/Refsynopsisdiv.html#import-detail","title":"Refsynopsisdiv > Import detail","text":"Import detail\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/OLink.html#olink","title":"OLink","text":"OLink\n\n\n\nclass src.pyconverter.xml2py.ast_tree.OLink(element)\n\nBases: Element\n\nProvides the external link element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/OLink.html#overview","title":"OLink > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nto_rst\n\nReturn a string to enable converting the element to an RST format.\n\nProperties\n\n\n\n\n\ntargetptr\n\nValue for the targetptr contained in the OLink element.\n\ntargetdoc\n\nValue for the targetdoc parameter contained in the OLink element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/OLink.html#import-detail","title":"OLink > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/OLink.html#property-detail","title":"OLink > Property detail","text":"Property detail\n\n\n\nproperty OLink.targetptr\n\nValue for the targetptr contained in the OLink element.\n\n\n\nproperty OLink.targetdoc\n\nValue for the targetdoc parameter contained in the OLink element."},{"objectID":"Home","href":"api/src/pyconverter/xml2py/ast_tree/OLink.html#method-detail","title":"OLink > Method detail","text":"Method detail\n\n\n\nOLink.to_rst(indent='', max_length=100, links=None, base_url=None)\n\nReturn a string to enable converting the element to an RST format.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}]